{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\nimport { defaultCurrencyCode } from '../internationalization';\nimport { getValue, isNullOrUndefined, extend, isBlazor } from '../util';\nimport { ParserBase as parser, getBlazorCurrencySymbol } from './parser-base';\nimport { DateFormat } from './date-formatter';\nimport { NumberFormat } from './number-formatter';\nimport { isUndefined } from '../util';\nvar regExp = RegExp;\nexport var blazorCultureFormats = {\n  'en-US': {\n    'd': 'M/d/y',\n    'D': 'EEEE, MMMM d, y',\n    'f': 'EEEE, MMMM d, y h:mm a',\n    'F': 'EEEE, MMMM d, y h:mm:s a',\n    'g': 'M/d/y h:mm a',\n    'G': 'M/d/yyyy h:mm:ss tt',\n    'm': 'MMMM d',\n    'M': 'MMMM d',\n    'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n    'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n    's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n    't': 'h:mm tt',\n    'T': 'h:m:s tt',\n    'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n    'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\n    'y': 'MMMM yyyy',\n    'Y': 'MMMM yyyy'\n  }\n};\n/**\r\n * Date base common constants and function for date parser and formatter.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport var IntlBase;\n(function (IntlBase) {\n  // eslint-disable-next-line security/detect-unsafe-regex\n  IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n  // eslint-disable-next-line security/detect-unsafe-regex\n  IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*[0# ]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n  IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\n  var fractionRegex = /[0-9]/g;\n  IntlBase.defaultCurrency = '$';\n  var mapper = ['infinity', 'nan', 'group', 'decimal'];\n  var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\n  var patternMatch = {\n    'G': '',\n    'M': 'm',\n    'L': 'm',\n    'H': 'h',\n    'c': 'd',\n    '\\'': '\"',\n    ' a': ' AM/PM',\n    'yy': 'yy',\n    'y': 'yyyy',\n    'EEEE': 'dddd',\n    'E': 'ddd'\n  };\n  IntlBase.dateConverterMapper = /dddd|ddd/ig;\n  var defaultFirstDay = 'sun';\n  IntlBase.islamicRegex = /^islamic/;\n  var firstDayMapper = {\n    'sun': 0,\n    'mon': 1,\n    'tue': 2,\n    'wed': 3,\n    'thu': 4,\n    'fri': 5,\n    'sat': 6\n  };\n  IntlBase.formatRegex = new regExp('(^[ncpae]{1})([0-1]?[0-9]|20)?$', 'i');\n  IntlBase.currencyFormatRegex = new regExp('(^[ca]{1})([0-1]?[0-9]|20)?$', 'i');\n  IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\n  var typeMapper = {\n    '$': 'isCurrency',\n    '%': 'isPercent',\n    '-': 'isNegative',\n    0: 'nlead',\n    1: 'nend'\n  };\n  IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\n  IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\n  IntlBase.defaultObject = {\n    'dates': {\n      'calendars': {\n        'gregorian': {\n          'months': {\n            'stand-alone': {\n              'abbreviated': {\n                '1': 'Jan',\n                '2': 'Feb',\n                '3': 'Mar',\n                '4': 'Apr',\n                '5': 'May',\n                '6': 'Jun',\n                '7': 'Jul',\n                '8': 'Aug',\n                '9': 'Sep',\n                '10': 'Oct',\n                '11': 'Nov',\n                '12': 'Dec'\n              },\n              'narrow': {\n                '1': 'J',\n                '2': 'F',\n                '3': 'M',\n                '4': 'A',\n                '5': 'M',\n                '6': 'J',\n                '7': 'J',\n                '8': 'A',\n                '9': 'S',\n                '10': 'O',\n                '11': 'N',\n                '12': 'D'\n              },\n              'wide': {\n                '1': 'January',\n                '2': 'February',\n                '3': 'March',\n                '4': 'April',\n                '5': 'May',\n                '6': 'June',\n                '7': 'July',\n                '8': 'August',\n                '9': 'September',\n                '10': 'October',\n                '11': 'November',\n                '12': 'December'\n              }\n            }\n          },\n          'days': {\n            'stand-alone': {\n              'abbreviated': {\n                'sun': 'Sun',\n                'mon': 'Mon',\n                'tue': 'Tue',\n                'wed': 'Wed',\n                'thu': 'Thu',\n                'fri': 'Fri',\n                'sat': 'Sat'\n              },\n              'narrow': {\n                'sun': 'S',\n                'mon': 'M',\n                'tue': 'T',\n                'wed': 'W',\n                'thu': 'T',\n                'fri': 'F',\n                'sat': 'S'\n              },\n              'short': {\n                'sun': 'Su',\n                'mon': 'Mo',\n                'tue': 'Tu',\n                'wed': 'We',\n                'thu': 'Th',\n                'fri': 'Fr',\n                'sat': 'Sa'\n              },\n              'wide': {\n                'sun': 'Sunday',\n                'mon': 'Monday',\n                'tue': 'Tuesday',\n                'wed': 'Wednesday',\n                'thu': 'Thursday',\n                'fri': 'Friday',\n                'sat': 'Saturday'\n              }\n            }\n          },\n          'dayPeriods': {\n            'format': {\n              'wide': {\n                'am': 'AM',\n                'pm': 'PM'\n              }\n            }\n          },\n          'eras': {\n            'eraNames': {\n              '0': 'Before Christ',\n              '0-alt-variant': 'Before Common Era',\n              '1': 'Anno Domini',\n              '1-alt-variant': 'Common Era'\n            },\n            'eraAbbr': {\n              '0': 'BC',\n              '0-alt-variant': 'BCE',\n              '1': 'AD',\n              '1-alt-variant': 'CE'\n            },\n            'eraNarrow': {\n              '0': 'B',\n              '0-alt-variant': 'BCE',\n              '1': 'A',\n              '1-alt-variant': 'CE'\n            }\n          },\n          'dateFormats': {\n            'full': 'EEEE, MMMM d, y',\n            'long': 'MMMM d, y',\n            'medium': 'MMM d, y',\n            'short': 'M/d/yy'\n          },\n          'timeFormats': {\n            'full': 'h:mm:ss a zzzz',\n            'long': 'h:mm:ss a z',\n            'medium': 'h:mm:ss a',\n            'short': 'h:mm a'\n          },\n          'dateTimeFormats': {\n            'full': '{1} \\'at\\' {0}',\n            'long': '{1} \\'at\\' {0}',\n            'medium': '{1}, {0}',\n            'short': '{1}, {0}',\n            'availableFormats': {\n              'd': 'd',\n              'E': 'ccc',\n              'Ed': 'd E',\n              'Ehm': 'E h:mm a',\n              'EHm': 'E HH:mm',\n              'Ehms': 'E h:mm:ss a',\n              'EHms': 'E HH:mm:ss',\n              'Gy': 'y G',\n              'GyMMM': 'MMM y G',\n              'GyMMMd': 'MMM d, y G',\n              'GyMMMEd': 'E, MMM d, y G',\n              'h': 'h a',\n              'H': 'HH',\n              'hm': 'h:mm a',\n              'Hm': 'HH:mm',\n              'hms': 'h:mm:ss a',\n              'Hms': 'HH:mm:ss',\n              'hmsv': 'h:mm:ss a v',\n              'Hmsv': 'HH:mm:ss v',\n              'hmv': 'h:mm a v',\n              'Hmv': 'HH:mm v',\n              'M': 'L',\n              'Md': 'M/d',\n              'MEd': 'E, M/d',\n              'MMM': 'LLL',\n              'MMMd': 'MMM d',\n              'MMMEd': 'E, MMM d',\n              'MMMMd': 'MMMM d',\n              'ms': 'mm:ss',\n              'y': 'y',\n              'yM': 'M/y',\n              'yMd': 'M/d/y',\n              'yMEd': 'E, M/d/y',\n              'yMMM': 'MMM y',\n              'yMMMd': 'MMM d, y',\n              'yMMMEd': 'E, MMM d, y',\n              'yMMMM': 'MMMM y'\n            }\n          }\n        },\n        'islamic': {\n          'months': {\n            'stand-alone': {\n              'abbreviated': {\n                '1': 'Muh.',\n                '2': 'Saf.',\n                '3': 'Rab. I',\n                '4': 'Rab. II',\n                '5': 'Jum. I',\n                '6': 'Jum. II',\n                '7': 'Raj.',\n                '8': 'Sha.',\n                '9': 'Ram.',\n                '10': 'Shaw.',\n                '11': 'Dhuʻl-Q.',\n                '12': 'Dhuʻl-H.'\n              },\n              'narrow': {\n                '1': '1',\n                '2': '2',\n                '3': '3',\n                '4': '4',\n                '5': '5',\n                '6': '6',\n                '7': '7',\n                '8': '8',\n                '9': '9',\n                '10': '10',\n                '11': '11',\n                '12': '12'\n              },\n              'wide': {\n                '1': 'Muharram',\n                '2': 'Safar',\n                '3': 'Rabiʻ I',\n                '4': 'Rabiʻ II',\n                '5': 'Jumada I',\n                '6': 'Jumada II',\n                '7': 'Rajab',\n                '8': 'Shaʻban',\n                '9': 'Ramadan',\n                '10': 'Shawwal',\n                '11': 'Dhuʻl-Qiʻdah',\n                '12': 'Dhuʻl-Hijjah'\n              }\n            }\n          },\n          'days': {\n            'stand-alone': {\n              'abbreviated': {\n                'sun': 'Sun',\n                'mon': 'Mon',\n                'tue': 'Tue',\n                'wed': 'Wed',\n                'thu': 'Thu',\n                'fri': 'Fri',\n                'sat': 'Sat'\n              },\n              'narrow': {\n                'sun': 'S',\n                'mon': 'M',\n                'tue': 'T',\n                'wed': 'W',\n                'thu': 'T',\n                'fri': 'F',\n                'sat': 'S'\n              },\n              'short': {\n                'sun': 'Su',\n                'mon': 'Mo',\n                'tue': 'Tu',\n                'wed': 'We',\n                'thu': 'Th',\n                'fri': 'Fr',\n                'sat': 'Sa'\n              },\n              'wide': {\n                'sun': 'Sunday',\n                'mon': 'Monday',\n                'tue': 'Tuesday',\n                'wed': 'Wednesday',\n                'thu': 'Thursday',\n                'fri': 'Friday',\n                'sat': 'Saturday'\n              }\n            }\n          },\n          'dayPeriods': {\n            'format': {\n              'wide': {\n                'am': 'AM',\n                'pm': 'PM'\n              }\n            }\n          },\n          'eras': {\n            'eraNames': {\n              '0': 'AH'\n            },\n            'eraAbbr': {\n              '0': 'AH'\n            },\n            'eraNarrow': {\n              '0': 'AH'\n            }\n          },\n          'dateFormats': {\n            'full': 'EEEE, MMMM d, y G',\n            'long': 'MMMM d, y G',\n            'medium': 'MMM d, y G',\n            'short': 'M/d/y GGGGG'\n          },\n          'timeFormats': {\n            'full': 'h:mm:ss a zzzz',\n            'long': 'h:mm:ss a z',\n            'medium': 'h:mm:ss a',\n            'short': 'h:mm a'\n          },\n          'dateTimeFormats': {\n            'full': '{1} \\'at\\' {0}',\n            'long': '{1} \\'at\\' {0}',\n            'medium': '{1}, {0}',\n            'short': '{1}, {0}',\n            'availableFormats': {\n              'd': 'd',\n              'E': 'ccc',\n              'Ed': 'd E',\n              'Ehm': 'E h:mm a',\n              'EHm': 'E HH:mm',\n              'Ehms': 'E h:mm:ss a',\n              'EHms': 'E HH:mm:ss',\n              'Gy': 'y G',\n              'GyMMM': 'MMM y G',\n              'GyMMMd': 'MMM d, y G',\n              'GyMMMEd': 'E, MMM d, y G',\n              'h': 'h a',\n              'H': 'HH',\n              'hm': 'h:mm a',\n              'Hm': 'HH:mm',\n              'hms': 'h:mm:ss a',\n              'Hms': 'HH:mm:ss',\n              'M': 'L',\n              'Md': 'M/d',\n              'MEd': 'E, M/d',\n              'MMM': 'LLL',\n              'MMMd': 'MMM d',\n              'MMMEd': 'E, MMM d',\n              'MMMMd': 'MMMM d',\n              'ms': 'mm:ss',\n              'y': 'y G',\n              'yyyy': 'y G',\n              'yyyyM': 'M/y GGGGG',\n              'yyyyMd': 'M/d/y GGGGG',\n              'yyyyMEd': 'E, M/d/y GGGGG',\n              'yyyyMMM': 'MMM y G',\n              'yyyyMMMd': 'MMM d, y G',\n              'yyyyMMMEd': 'E, MMM d, y G',\n              'yyyyMMMM': 'MMMM y G',\n              'yyyyQQQ': 'QQQ y G',\n              'yyyyQQQQ': 'QQQQ y G'\n            }\n          }\n        }\n      },\n      'timeZoneNames': {\n        'hourFormat': '+HH:mm;-HH:mm',\n        'gmtFormat': 'GMT{0}',\n        'gmtZeroFormat': 'GMT'\n      }\n    },\n    'numbers': {\n      'currencies': {\n        'USD': {\n          'displayName': 'US Dollar',\n          'symbol': '$',\n          'symbol-alt-narrow': '$'\n        },\n        'EUR': {\n          'displayName': 'Euro',\n          'symbol': '€',\n          'symbol-alt-narrow': '€'\n        },\n        'GBP': {\n          'displayName': 'British Pound',\n          'symbol-alt-narrow': '£'\n        }\n      },\n      'defaultNumberingSystem': 'latn',\n      'minimumGroupingDigits': '1',\n      'symbols-numberSystem-latn': {\n        'decimal': '.',\n        'group': ',',\n        'list': ';',\n        'percentSign': '%',\n        'plusSign': '+',\n        'minusSign': '-',\n        'exponential': 'E',\n        'superscriptingExponent': '×',\n        'perMille': '‰',\n        'infinity': '∞',\n        'nan': 'NaN',\n        'timeSeparator': ':'\n      },\n      'decimalFormats-numberSystem-latn': {\n        'standard': '#,##0.###'\n      },\n      'percentFormats-numberSystem-latn': {\n        'standard': '#,##0%'\n      },\n      'currencyFormats-numberSystem-latn': {\n        'standard': '¤#,##0.00',\n        'accounting': '¤#,##0.00;(¤#,##0.00)'\n      },\n      'scientificFormats-numberSystem-latn': {\n        'standard': '#E0'\n      }\n    }\n  };\n  IntlBase.blazorDefaultObject = {\n    'numbers': {\n      'mapper': {\n        '0': '0',\n        '1': '1',\n        '2': '2',\n        '3': '3',\n        '4': '4',\n        '5': '5',\n        '6': '6',\n        '7': '7',\n        '8': '8',\n        '9': '9'\n      },\n      'mapperDigits': '0123456789',\n      'numberSymbols': {\n        'decimal': '.',\n        'group': ',',\n        'plusSign': '+',\n        'minusSign': '-',\n        'percentSign': '%',\n        'nan': 'NaN',\n        'timeSeparator': ':',\n        'infinity': '∞'\n      },\n      'timeSeparator': ':',\n      'currencySymbol': '$',\n      'currencypData': {\n        'nlead': '$',\n        'nend': '',\n        'groupSeparator': ',',\n        'groupData': {\n          'primary': 3\n        },\n        'maximumFraction': 2,\n        'minimumFraction': 2\n      },\n      'percentpData': {\n        'nlead': '',\n        'nend': '%',\n        'groupSeparator': ',',\n        'groupData': {\n          'primary': 3\n        },\n        'maximumFraction': 2,\n        'minimumFraction': 2\n      },\n      'percentnData': {\n        'nlead': '-',\n        'nend': '%',\n        'groupSeparator': ',',\n        'groupData': {\n          'primary': 3\n        },\n        'maximumFraction': 2,\n        'minimumFraction': 2\n      },\n      'currencynData': {\n        'nlead': '($',\n        'nend': ')',\n        'groupSeparator': ',',\n        'groupData': {\n          'primary': 3\n        },\n        'maximumFraction': 2,\n        'minimumFraction': 2\n      },\n      'decimalnData': {\n        'nlead': '-',\n        'nend': '',\n        'groupData': {\n          'primary': 3\n        },\n        'maximumFraction': 2,\n        'minimumFraction': 2\n      },\n      'decimalpData': {\n        'nlead': '',\n        'nend': '',\n        'groupData': {\n          'primary': 3\n        },\n        'maximumFraction': 2,\n        'minimumFraction': 2\n      }\n    },\n    'dates': {\n      'dayPeriods': {\n        'am': 'AM',\n        'pm': 'PM'\n      },\n      'dateSeperator': '/',\n      'days': {\n        'abbreviated': {\n          'sun': 'Sun',\n          'mon': 'Mon',\n          'tue': 'Tue',\n          'wed': 'Wed',\n          'thu': 'Thu',\n          'fri': 'Fri',\n          'sat': 'Sat'\n        },\n        'short': {\n          'sun': 'Su',\n          'mon': 'Mo',\n          'tue': 'Tu',\n          'wed': 'We',\n          'thu': 'Th',\n          'fri': 'Fr',\n          'sat': 'Sa'\n        },\n        'wide': {\n          'sun': 'Sunday',\n          'mon': 'Monday',\n          'tue': 'Tuesday',\n          'wed': 'Wednesday',\n          'thu': 'Thursday',\n          'fri': 'Friday',\n          'sat': 'Saturday'\n        }\n      },\n      'months': {\n        'abbreviated': {\n          '1': 'Jan',\n          '2': 'Feb',\n          '3': 'Mar',\n          '4': 'Apr',\n          '5': 'May',\n          '6': 'Jun',\n          '7': 'Jul',\n          '8': 'Aug',\n          '9': 'Sep',\n          '10': 'Oct',\n          '11': 'Nov',\n          '12': 'Dec'\n        },\n        'wide': {\n          '1': 'January',\n          '2': 'February',\n          '3': 'March',\n          '4': 'April',\n          '5': 'May',\n          '6': 'June',\n          '7': 'July',\n          '8': 'August',\n          '9': 'September',\n          '10': 'October',\n          '11': 'November',\n          '12': 'December'\n        }\n      },\n      'eras': {\n        '1': 'AD'\n      }\n    }\n  };\n  IntlBase.monthIndex = {\n    3: 'abbreviated',\n    4: 'wide',\n    5: 'narrow',\n    1: 'abbreviated'\n  };\n  /**\r\n   *\r\n   */\n  IntlBase.month = 'months';\n  IntlBase.days = 'days';\n  /**\r\n   * Default numerber Object\r\n   */\n  IntlBase.patternMatcher = {\n    C: 'currency',\n    P: 'percent',\n    N: 'decimal',\n    A: 'currency',\n    E: 'scientific'\n  };\n  /**\r\n   * Returns the resultant pattern based on the skeleton, dateObject and the type provided\r\n   *\r\n   * @private\r\n   * @param {string} skeleton ?\r\n   * @param {Object} dateObject ?\r\n   * @param {string} type ?\r\n   * @param {boolean} isIslamic ?\r\n   * @param {string} blazorCulture ?\r\n   * @returns {string} ?\r\n   */\n  function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\n    var resPattern;\n    var iType = type || 'date';\n    if (blazorCulture) {\n      resPattern = compareBlazorDateFormats({\n        skeleton: skeleton\n      }, blazorCulture).format || compareBlazorDateFormats({\n        skeleton: 'd'\n      }, 'en-US').format;\n    } else {\n      if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\n        resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\n        if (iType === 'dateTime') {\n          var dPattern = getValue('dateFormats.' + skeleton, dateObject);\n          var tPattern = getValue('timeFormats.' + skeleton, dateObject);\n          resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\n        }\n      } else {\n        resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\n      }\n      if (isUndefined(resPattern) && skeleton === 'yMd') {\n        resPattern = 'M/d/y';\n      }\n    }\n    return resPattern;\n  }\n  IntlBase.getResultantPattern = getResultantPattern;\n  /**\r\n   * Returns the dependable object for provided cldr data and culture\r\n   *\r\n   * @private\r\n   * @param {Object} cldr ?\r\n   * @param {string} culture ?\r\n   * @param {string} mode ?\r\n   * @param {boolean} isNumber ?\r\n   * @returns {any} ?\r\n   */\n  function getDependables(cldr, culture, mode, isNumber) {\n    var ret = {};\n    var calendartype = mode || 'gregorian';\n    ret.parserObject = parser.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\n    if (isNumber) {\n      ret.numericObject = getValue('numbers', ret.parserObject);\n    } else {\n      var dateString = isBlazor() ? 'dates' : 'dates.calendars.' + calendartype;\n      ret.dateObject = getValue(dateString, ret.parserObject);\n    }\n    return ret;\n  }\n  IntlBase.getDependables = getDependables;\n  /**\r\n   * Returns the symbol pattern for provided parameters\r\n   *\r\n   * @private\r\n   * @param {string} type ?\r\n   * @param {string} numSystem ?\r\n   * @param {Object} obj ?\r\n   * @param {boolean} isAccount ?\r\n   * @returns {string} ?\r\n   */\n  function getSymbolPattern(type, numSystem, obj, isAccount) {\n    return getValue(type + 'Formats-numberSystem-' + numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' + numSystem + '.standard', obj) : '');\n  }\n  IntlBase.getSymbolPattern = getSymbolPattern;\n  /**\r\n   *\r\n   * @param {string} format ?\r\n   * @returns {string} ?\r\n   */\n  function ConvertDateToWeekFormat(format) {\n    var convertMapper = format.match(IntlBase.dateConverterMapper);\n    if (convertMapper && isBlazor()) {\n      var tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\n      return format.replace(IntlBase.dateConverterMapper, tempString);\n    }\n    return format;\n  }\n  IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\n  /**\r\n   *\r\n   * @param {DateFormatOptions} formatOptions ?\r\n   * @param {string} culture ?\r\n   * @returns {DateFormatOptions} ?\r\n   */\n  function compareBlazorDateFormats(formatOptions, culture) {\n    var format = formatOptions.format || formatOptions.skeleton;\n    var curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\n    if (!curFormatMapper) {\n      curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\n    }\n    if (curFormatMapper) {\n      curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\n      formatOptions.format = curFormatMapper.replace(/tt/, 'a');\n    }\n    return formatOptions;\n  }\n  IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\n  /**\r\n   * Returns proper numeric skeleton\r\n   *\r\n   * @private\r\n   * @param {string} skeleton ?\r\n   * @returns {any} ?\r\n   */\n  function getProperNumericSkeleton(skeleton) {\n    var matches = skeleton.match(IntlBase.formatRegex);\n    var ret = {};\n    var pattern = matches[1].toUpperCase();\n    ret.isAccount = pattern === 'A';\n    ret.type = IntlBase.patternMatcher[\"\" + pattern];\n    if (skeleton.length > 1) {\n      ret.fractionDigits = parseInt(matches[2], 10);\n    }\n    return ret;\n  }\n  IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\n  /**\r\n   * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\r\n   *\r\n   * @private\r\n   * @param {string} pattern ?\r\n   * @param {boolean} needFraction ?\r\n   * @param {string} cSymbol ?\r\n   * @param {boolean} fractionOnly ?\r\n   * @returns {any} ?\r\n   */\n  function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\n    var nData = fractionOnly ? {} : {\n      nlead: '',\n      nend: ''\n    };\n    var match = pattern.match(IntlBase.customRegex);\n    if (match) {\n      if (!fractionOnly) {\n        nData.nlead = changeCurrencySymbol(match[1], cSymbol);\n        nData.nend = changeCurrencySymbol(match[10], cSymbol);\n        nData.groupPattern = match[4];\n      }\n      var fraction = match[7];\n      if (fraction && needFraction) {\n        var fmatch = fraction.match(fractionRegex);\n        if (!isNullOrUndefined(fmatch)) {\n          nData.minimumFraction = fmatch.length;\n        } else {\n          nData.minimumFraction = 0;\n        }\n        nData.maximumFraction = fraction.length - 1;\n      }\n    }\n    return nData;\n  }\n  IntlBase.getFormatData = getFormatData;\n  /**\r\n   * Changes currency symbol\r\n   *\r\n   * @private\r\n   * @param {string} val ?\r\n   * @param {string} sym ?\r\n   * @returns {string} ?\r\n   */\n  function changeCurrencySymbol(val, sym) {\n    if (val) {\n      val = val.replace(IntlBase.defaultCurrency, sym);\n      return sym === '' ? val.trim() : val;\n    }\n    return '';\n  }\n  IntlBase.changeCurrencySymbol = changeCurrencySymbol;\n  /**\r\n   * Returns currency symbol based on currency code ?\r\n   *\r\n   * @private\r\n   * @param {Object} numericObject ?\r\n   * @param {string} currencyCode ?\r\n   * @param {string} altSymbol ?\r\n   * @returns {string} ?\r\n   */\n  function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\n    var symbol = altSymbol ? '.' + altSymbol : '.symbol';\n    var getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) || getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\n    return getCurrency;\n  }\n  IntlBase.getCurrencySymbol = getCurrencySymbol;\n  /**\r\n   * Returns formatting options for custom number format\r\n   *\r\n   * @private\r\n   * @param {string} format ?\r\n   * @param {CommonOptions} dOptions ?\r\n   * @param {any} obj ?\r\n   * @returns {any} ?\r\n   */\n  function customFormat(format, dOptions, obj) {\n    var options = {};\n    var formatSplit = format.split(';');\n    var data = ['pData', 'nData', 'zeroData'];\n    for (var i = 0; i < formatSplit.length; i++) {\n      options[\"\" + data[parseInt(i.toString(), 10)]] = customNumberFormat(formatSplit[parseInt(i.toString(), 10)], dOptions, obj);\n    }\n    if (isNullOrUndefined(options.nData)) {\n      options.nData = extend({}, options.pData);\n      options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\n    }\n    return options;\n  }\n  IntlBase.customFormat = customFormat;\n  /**\r\n   * Returns custom formatting options\r\n   *\r\n   * @private\r\n   * @param {string} format ?\r\n   * @param {CommonOptions} dOptions ?\r\n   * @param {Object} numObject ?\r\n   * @returns {any} ?\r\n   */\n  function customNumberFormat(format, dOptions, numObject) {\n    var cOptions = {\n      type: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    };\n    var pattern = format.match(IntlBase.customRegex);\n    if (isNullOrUndefined(pattern) || pattern[5] === '' && format !== 'N/A') {\n      cOptions.type = undefined;\n      return cOptions;\n    }\n    cOptions.nlead = pattern[1];\n    cOptions.nend = pattern[10];\n    var integerPart = pattern[6];\n    var spaceCapture = integerPart.match(/ $/g) ? true : false;\n    var spaceGrouping = integerPart.replace(/ $/g, '').indexOf(' ') !== -1;\n    cOptions.useGrouping = integerPart.indexOf(',') !== -1 || spaceGrouping;\n    integerPart = integerPart.replace(/,/g, '');\n    var fractionPart = pattern[7];\n    if (integerPart.indexOf('0') !== -1) {\n      cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\n    }\n    if (!isNullOrUndefined(fractionPart)) {\n      cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\n      cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\n      if (cOptions.minimumFractionDigits === -1) {\n        cOptions.minimumFractionDigits = 0;\n      }\n      if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\n        cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\n      }\n    }\n    if (!isNullOrUndefined(dOptions)) {\n      dOptions.isCustomFormat = true;\n      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\n      if (!cOptions.isCurrency) {\n        extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\n      }\n    } else {\n      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\n    }\n    if (!isNullOrUndefined(numObject)) {\n      var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\n      if (cOptions.useGrouping) {\n        cOptions.groupSeparator = spaceGrouping ? ' ' : dOptions.numberMapper.numberSymbols[mapper[2]];\n        cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\n      }\n      cOptions.nlead = cOptions.nlead.replace(/'/g, '');\n      cOptions.nend = spaceCapture ? ' ' + cOptions.nend.replace(/'/g, '') : cOptions.nend.replace(/'/g, '');\n    }\n    return cOptions;\n  }\n  IntlBase.customNumberFormat = customNumberFormat;\n  /**\r\n   * Returns formatting options for currency or percent type\r\n   *\r\n   * @private\r\n   * @param {string[]} parts ?\r\n   * @param {string} actual ?\r\n   * @param {string} symbol ?\r\n   * @returns {any} ?\r\n   */\n  function isCurrencyPercent(parts, actual, symbol) {\n    var options = {\n      nlead: parts[0],\n      nend: parts[1]\n    };\n    for (var i = 0; i < 2; i++) {\n      var part = parts[parseInt(i.toString(), 10)];\n      var loc = part.indexOf(actual);\n      if (loc !== -1 && (loc < part.indexOf('\\'') || loc > part.lastIndexOf('\\''))) {\n        options[\"\" + typeMapper[parseInt(i.toString(), 10)]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\n        options[\"\" + typeMapper[\"\" + actual]] = true;\n        options.type = options.isCurrency ? 'currency' : 'percent';\n        break;\n      }\n    }\n    return options;\n  }\n  IntlBase.isCurrencyPercent = isCurrencyPercent;\n  /**\r\n   * Returns culture based date separator\r\n   *\r\n   * @private\r\n   * @param {Object} dateObj ?\r\n   * @returns {string} ?\r\n   */\n  function getDateSeparator(dateObj) {\n    var value = (getValue('dateFormats.short', dateObj) || '').match(/[dM]([^dM])[dM]/i);\n    return value ? value[1] : '/';\n  }\n  IntlBase.getDateSeparator = getDateSeparator;\n  /**\r\n   * Returns Native Date Time pattern\r\n   *\r\n   * @private\r\n   * @param {string} culture ?\r\n   * @param {DateFormatOptions} options ?\r\n   * @param {Object} cldr ?\r\n   * @param {boolean} isExcelFormat ?\r\n   * @returns {string} ?\r\n   */\n  function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\n    var dependable = getDependables(cldr, culture, options.calendar);\n    if (isBlazor()) {\n      options = compareBlazorDateFormats(options, culture);\n    }\n    var actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\n    if (isExcelFormat) {\n      actualPattern = actualPattern.replace(patternRegex, function (pattern) {\n        return patternMatch[\"\" + pattern];\n      });\n      if (actualPattern.indexOf('z') !== -1) {\n        var tLength = actualPattern.match(/z/g).length;\n        var timeZonePattern = void 0;\n        var options_1 = {\n          'timeZone': {}\n        };\n        options_1.numMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\n        options_1.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n        var value = new Date();\n        var timezone = value.getTimezoneOffset();\n        var pattern = tLength < 4 ? '+H;-H' : options_1.timeZone.hourFormat;\n        pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator);\n        if (timezone === 0) {\n          timeZonePattern = options_1.timeZone.gmtZeroFormat;\n        } else {\n          timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\n          timeZonePattern = options_1.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\n        }\n        actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\n      }\n      actualPattern = actualPattern.replace(/ $/, '');\n    }\n    return actualPattern;\n  }\n  IntlBase.getActualDateTimeFormat = getActualDateTimeFormat;\n  /**\r\n   *\r\n   * @param {string} actual ?\r\n   * @param {any} option ?\r\n   * @returns {any} ?\r\n   */\n  function processSymbol(actual, option) {\n    if (actual.indexOf(',') !== -1) {\n      var split = actual.split(',');\n      actual = split[0] + getValue('numberMapper.numberSymbols.group', option) + split[1].replace('.', getValue('numberMapper.numberSymbols.decimal', option));\n    } else {\n      actual = actual.replace('.', getValue('numberMapper.numberSymbols.decimal', option));\n    }\n    return actual;\n  }\n  IntlBase.processSymbol = processSymbol;\n  /**\r\n   * Returns Native Number pattern\r\n   *\r\n   * @private\r\n   * @param {string} culture ?\r\n   * @param {NumberFormatOptions} options ?\r\n   * @param {Object} cldr ?\r\n   * @param {boolean} isExcel ?\r\n   * @returns {string} ?\r\n   */\n  function getActualNumberFormat(culture, options, cldr, isExcel) {\n    var dependable = getDependables(cldr, culture, '', true);\n    var parseOptions = {\n      custom: true\n    };\n    var numrericObject = dependable.numericObject;\n    var minFrac;\n    var curObj = {};\n    var curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\n    var type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\n    var dOptions = {};\n    if (curMatch) {\n      dOptions.numberMapper = isBlazor() ? extend({}, dependable.numericObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n      var curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) : getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\n      var symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format));\n      symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\n      var split = symbolPattern.split(';');\n      curObj.hasNegativePattern = isBlazor() ? true : split.length > 1;\n      curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) : getFormatData(split[1] || '-' + split[0], true, curCode);\n      curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) : getFormatData(split[0], false, curCode);\n      if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\n        minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\n      }\n    }\n    var actualPattern;\n    if (IntlBase.formatRegex.test(options.format) || !options.format) {\n      extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\n      parseOptions.custom = false;\n      actualPattern = '###0';\n      if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\n        var defaultMinimum = 0;\n        if (parseOptions.fractionDigits) {\n          options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\n        }\n        actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\n      }\n      if (options.minimumIntegerDigits) {\n        actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\n      }\n      if (options.useGrouping) {\n        actualPattern = groupingPattern(actualPattern);\n      }\n      if (parseOptions.type === 'currency' || parseOptions.type && isBlazor()) {\n        if (isBlazor() && parseOptions.type !== 'currency') {\n          curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\n          curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\n        }\n        var cPattern = actualPattern;\n        actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\n        if (curObj.hasNegativePattern || isBlazor()) {\n          actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\n        }\n      }\n      if (parseOptions.type === 'percent' && !isBlazor()) {\n        actualPattern += ' %';\n      }\n    } else {\n      actualPattern = options.format.replace(/'/g, '\"');\n    }\n    if (Object.keys(dOptions).length > 0) {\n      actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;\n    }\n    return actualPattern;\n  }\n  IntlBase.getActualNumberFormat = getActualNumberFormat;\n  /**\r\n   *\r\n   * @param {string} pattern ?\r\n   * @param {number} minDigits ?\r\n   * @param {number} maxDigits ?\r\n   * @returns {string} ?\r\n   */\n  function fractionDigitsPattern(pattern, minDigits, maxDigits) {\n    pattern += '.';\n    for (var a = 0; a < minDigits; a++) {\n      pattern += '0';\n    }\n    if (minDigits < maxDigits) {\n      var diff = maxDigits - minDigits;\n      for (var b = 0; b < diff; b++) {\n        pattern += '#';\n      }\n    }\n    return pattern;\n  }\n  IntlBase.fractionDigitsPattern = fractionDigitsPattern;\n  /**\r\n   *\r\n   * @param {string} pattern ?\r\n   * @param {number} digits ?\r\n   * @returns {string} ?\r\n   */\n  function minimumIntegerPattern(pattern, digits) {\n    var temp = pattern.split('.');\n    var integer = '';\n    for (var x = 0; x < digits; x++) {\n      integer += '0';\n    }\n    return temp[1] ? integer + '.' + temp[1] : integer;\n  }\n  IntlBase.minimumIntegerPattern = minimumIntegerPattern;\n  /**\r\n   *\r\n   * @param {string} pattern ?\r\n   * @returns {string} ?\r\n   */\n  function groupingPattern(pattern) {\n    var temp = pattern.split('.');\n    var integer = temp[0];\n    var no = 3 - integer.length % 3;\n    var hash = no && no === 1 ? '#' : no === 2 ? '##' : '';\n    integer = hash + integer;\n    pattern = '';\n    for (var x = integer.length - 1; x > 0; x = x - 3) {\n      pattern = ',' + integer[x - 2] + integer[x - 1] + integer[parseInt(x.toString(), 10)] + pattern;\n    }\n    pattern = pattern.slice(1);\n    return temp[1] ? pattern + '.' + temp[1] : pattern;\n  }\n  IntlBase.groupingPattern = groupingPattern;\n  /**\r\n   *\r\n   * @param {string} culture ?\r\n   * @param {Object} cldr ?\r\n   * @returns {number} ?\r\n   */\n  function getWeekData(culture, cldr) {\n    var firstDay = defaultFirstDay;\n    var mapper = getValue('supplemental.weekData.firstDay', cldr);\n    var iCulture = culture;\n    if (/en-/.test(iCulture)) {\n      iCulture = iCulture.slice(3);\n    }\n    iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\n    if (mapper) {\n      firstDay = mapper[\"\" + iCulture] || mapper[iCulture.slice(0, 2)] || defaultFirstDay;\n    }\n    return firstDayMapper[\"\" + firstDay];\n  }\n  IntlBase.getWeekData = getWeekData;\n  /**\r\n   * @private\r\n   * @param {any} pData ?\r\n   * @param {string} aCurrency ?\r\n   * @param {string} rCurrency ?\r\n   * @returns {void} ?\r\n   */\n  function replaceBlazorCurrency(pData, aCurrency, rCurrency) {\n    var iCurrency = getBlazorCurrencySymbol(rCurrency);\n    if (aCurrency !== iCurrency) {\n      for (var _i = 0, pData_1 = pData; _i < pData_1.length; _i++) {\n        var data = pData_1[_i];\n        data.nend = data.nend.replace(aCurrency, iCurrency);\n        data.nlead = data.nlead.replace(aCurrency, iCurrency);\n      }\n    }\n  }\n  IntlBase.replaceBlazorCurrency = replaceBlazorCurrency;\n  /**\r\n   * @private\r\n   * @param {Date} date ?\r\n   * @returns {number} ?\r\n   */\n  function getWeekOfYear(date) {\n    var newYear = new Date(date.getFullYear(), 0, 1);\n    var day = newYear.getDay();\n    var weeknum;\n    day = day >= 0 ? day : day + 7;\n    var daynum = Math.floor((date.getTime() - newYear.getTime() - (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\n    if (day < 4) {\n      weeknum = Math.floor((daynum + day - 1) / 7) + 1;\n      if (weeknum > 52) {\n        var nYear = new Date(date.getFullYear() + 1, 0, 1);\n        var nday = nYear.getDay();\n        nday = nday >= 0 ? nday : nday + 7;\n        weeknum = nday < 4 ? 1 : 53;\n      }\n    } else {\n      weeknum = Math.floor((daynum + day - 1) / 7);\n    }\n    return weeknum;\n  }\n  IntlBase.getWeekOfYear = getWeekOfYear;\n})(IntlBase || (IntlBase = {}));","map":{"version":3,"names":["defaultCurrencyCode","getValue","isNullOrUndefined","extend","isBlazor","ParserBase","parser","getBlazorCurrencySymbol","DateFormat","NumberFormat","isUndefined","regExp","RegExp","blazorCultureFormats","IntlBase","negativeDataRegex","customRegex","latnParseRegex","fractionRegex","defaultCurrency","mapper","patternRegex","patternMatch","dateConverterMapper","defaultFirstDay","islamicRegex","firstDayMapper","formatRegex","currencyFormatRegex","curWithoutNumberRegex","typeMapper","dateParseRegex","basicPatterns","defaultObject","blazorDefaultObject","monthIndex","month","days","patternMatcher","C","P","N","A","E","getResultantPattern","skeleton","dateObject","type","isIslamic","blazorCulture","resPattern","iType","compareBlazorDateFormats","format","indexOf","dPattern","tPattern","replace","getDependables","cldr","culture","mode","isNumber","ret","calendartype","parserObject","getMainObject","numericObject","dateString","getSymbolPattern","numSystem","obj","isAccount","ConvertDateToWeekFormat","convertMapper","match","tempString","length","formatOptions","curFormatMapper","getProperNumericSkeleton","matches","pattern","toUpperCase","fractionDigits","parseInt","getFormatData","needFraction","cSymbol","fractionOnly","nData","nlead","nend","changeCurrencySymbol","groupPattern","fraction","fmatch","minimumFraction","maximumFraction","val","sym","trim","getCurrencySymbol","currencyCode","altSymbol","symbol","getCurrency","customFormat","dOptions","options","formatSplit","split","data","i","toString","customNumberFormat","pData","minusSymbol","numObject","cOptions","minimumFractionDigits","maximumFractionDigits","undefined","integerPart","spaceCapture","spaceGrouping","useGrouping","fractionPart","minimumIntegerDigits","lastIndexOf","isCustomFormat","isCurrencyPercent","currencySymbol","isCurrency","percentSymbol","symbolPattern","numberMapper","numberSystem","groupSeparator","numberSymbols","groupData","getGroupingDetails","parts","actual","part","loc","substr","getDateSeparator","dateObj","value","getActualDateTimeFormat","isExcelFormat","dependable","calendar","actualPattern","tLength","timeZonePattern","options_1","numMapper","getNumberMapper","getNumberingSystem","timeZone","Date","timezone","getTimezoneOffset","hourFormat","timeSeparator","gmtZeroFormat","getTimeZoneValue","gmtFormat","processSymbol","option","getActualNumberFormat","isExcel","parseOptions","custom","numrericObject","minFrac","curObj","curMatch","test","curCode","currency","hasNegativePattern","defaultMinimum","fractionDigitsPattern","minimumIntegerPattern","groupingPattern","cPattern","Object","keys","minDigits","maxDigits","a","diff","b","digits","temp","integer","x","no","hash","slice","getWeekData","firstDay","iCulture","replaceBlazorCurrency","aCurrency","rCurrency","iCurrency","_i","pData_1","getWeekOfYear","date","newYear","getFullYear","day","getDay","weeknum","daynum","Math","floor","getTime","nYear","nday"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-base/src/intl/intl-base.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\r\nimport { defaultCurrencyCode } from '../internationalization';\r\nimport { getValue, isNullOrUndefined, extend, isBlazor } from '../util';\r\nimport { ParserBase as parser, getBlazorCurrencySymbol } from './parser-base';\r\nimport { DateFormat } from './date-formatter';\r\nimport { NumberFormat } from './number-formatter';\r\nimport { isUndefined } from '../util';\r\nvar regExp = RegExp;\r\nexport var blazorCultureFormats = {\r\n    'en-US': {\r\n        'd': 'M/d/y',\r\n        'D': 'EEEE, MMMM d, y',\r\n        'f': 'EEEE, MMMM d, y h:mm a',\r\n        'F': 'EEEE, MMMM d, y h:mm:s a',\r\n        'g': 'M/d/y h:mm a',\r\n        'G': 'M/d/yyyy h:mm:ss tt',\r\n        'm': 'MMMM d',\r\n        'M': 'MMMM d',\r\n        'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\r\n        'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\r\n        's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\r\n        't': 'h:mm tt',\r\n        'T': 'h:m:s tt',\r\n        'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\r\n        'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\r\n        'y': 'MMMM yyyy',\r\n        'Y': 'MMMM yyyy'\r\n    }\r\n};\r\n/**\r\n * Date base common constants and function for date parser and formatter.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport var IntlBase;\r\n(function (IntlBase) {\r\n    // eslint-disable-next-line security/detect-unsafe-regex\r\n    IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\r\n    // eslint-disable-next-line security/detect-unsafe-regex\r\n    IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*[0# ]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\r\n    IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\r\n    var fractionRegex = /[0-9]/g;\r\n    IntlBase.defaultCurrency = '$';\r\n    var mapper = ['infinity', 'nan', 'group', 'decimal'];\r\n    var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\r\n    var patternMatch = {\r\n        'G': '',\r\n        'M': 'm',\r\n        'L': 'm',\r\n        'H': 'h',\r\n        'c': 'd',\r\n        '\\'': '\"',\r\n        ' a': ' AM/PM',\r\n        'yy': 'yy',\r\n        'y': 'yyyy',\r\n        'EEEE': 'dddd',\r\n        'E': 'ddd'\r\n    };\r\n    IntlBase.dateConverterMapper = /dddd|ddd/ig;\r\n    var defaultFirstDay = 'sun';\r\n    IntlBase.islamicRegex = /^islamic/;\r\n    var firstDayMapper = {\r\n        'sun': 0,\r\n        'mon': 1,\r\n        'tue': 2,\r\n        'wed': 3,\r\n        'thu': 4,\r\n        'fri': 5,\r\n        'sat': 6\r\n    };\r\n    IntlBase.formatRegex = new regExp('(^[ncpae]{1})([0-1]?[0-9]|20)?$', 'i');\r\n    IntlBase.currencyFormatRegex = new regExp('(^[ca]{1})([0-1]?[0-9]|20)?$', 'i');\r\n    IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\r\n    var typeMapper = {\r\n        '$': 'isCurrency',\r\n        '%': 'isPercent',\r\n        '-': 'isNegative',\r\n        0: 'nlead',\r\n        1: 'nend'\r\n    };\r\n    IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\r\n    IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\r\n    IntlBase.defaultObject = {\r\n        'dates': {\r\n            'calendars': {\r\n                'gregorian': {\r\n                    'months': {\r\n                        'stand-alone': {\r\n                            'abbreviated': {\r\n                                '1': 'Jan',\r\n                                '2': 'Feb',\r\n                                '3': 'Mar',\r\n                                '4': 'Apr',\r\n                                '5': 'May',\r\n                                '6': 'Jun',\r\n                                '7': 'Jul',\r\n                                '8': 'Aug',\r\n                                '9': 'Sep',\r\n                                '10': 'Oct',\r\n                                '11': 'Nov',\r\n                                '12': 'Dec'\r\n                            },\r\n                            'narrow': {\r\n                                '1': 'J',\r\n                                '2': 'F',\r\n                                '3': 'M',\r\n                                '4': 'A',\r\n                                '5': 'M',\r\n                                '6': 'J',\r\n                                '7': 'J',\r\n                                '8': 'A',\r\n                                '9': 'S',\r\n                                '10': 'O',\r\n                                '11': 'N',\r\n                                '12': 'D'\r\n                            },\r\n                            'wide': {\r\n                                '1': 'January',\r\n                                '2': 'February',\r\n                                '3': 'March',\r\n                                '4': 'April',\r\n                                '5': 'May',\r\n                                '6': 'June',\r\n                                '7': 'July',\r\n                                '8': 'August',\r\n                                '9': 'September',\r\n                                '10': 'October',\r\n                                '11': 'November',\r\n                                '12': 'December'\r\n                            }\r\n                        }\r\n                    },\r\n                    'days': {\r\n                        'stand-alone': {\r\n                            'abbreviated': {\r\n                                'sun': 'Sun',\r\n                                'mon': 'Mon',\r\n                                'tue': 'Tue',\r\n                                'wed': 'Wed',\r\n                                'thu': 'Thu',\r\n                                'fri': 'Fri',\r\n                                'sat': 'Sat'\r\n                            },\r\n                            'narrow': {\r\n                                'sun': 'S',\r\n                                'mon': 'M',\r\n                                'tue': 'T',\r\n                                'wed': 'W',\r\n                                'thu': 'T',\r\n                                'fri': 'F',\r\n                                'sat': 'S'\r\n                            },\r\n                            'short': {\r\n                                'sun': 'Su',\r\n                                'mon': 'Mo',\r\n                                'tue': 'Tu',\r\n                                'wed': 'We',\r\n                                'thu': 'Th',\r\n                                'fri': 'Fr',\r\n                                'sat': 'Sa'\r\n                            },\r\n                            'wide': {\r\n                                'sun': 'Sunday',\r\n                                'mon': 'Monday',\r\n                                'tue': 'Tuesday',\r\n                                'wed': 'Wednesday',\r\n                                'thu': 'Thursday',\r\n                                'fri': 'Friday',\r\n                                'sat': 'Saturday'\r\n                            }\r\n                        }\r\n                    },\r\n                    'dayPeriods': {\r\n                        'format': {\r\n                            'wide': {\r\n                                'am': 'AM',\r\n                                'pm': 'PM'\r\n                            }\r\n                        }\r\n                    },\r\n                    'eras': {\r\n                        'eraNames': {\r\n                            '0': 'Before Christ',\r\n                            '0-alt-variant': 'Before Common Era',\r\n                            '1': 'Anno Domini',\r\n                            '1-alt-variant': 'Common Era'\r\n                        },\r\n                        'eraAbbr': {\r\n                            '0': 'BC',\r\n                            '0-alt-variant': 'BCE',\r\n                            '1': 'AD',\r\n                            '1-alt-variant': 'CE'\r\n                        },\r\n                        'eraNarrow': {\r\n                            '0': 'B',\r\n                            '0-alt-variant': 'BCE',\r\n                            '1': 'A',\r\n                            '1-alt-variant': 'CE'\r\n                        }\r\n                    },\r\n                    'dateFormats': {\r\n                        'full': 'EEEE, MMMM d, y',\r\n                        'long': 'MMMM d, y',\r\n                        'medium': 'MMM d, y',\r\n                        'short': 'M/d/yy'\r\n                    },\r\n                    'timeFormats': {\r\n                        'full': 'h:mm:ss a zzzz',\r\n                        'long': 'h:mm:ss a z',\r\n                        'medium': 'h:mm:ss a',\r\n                        'short': 'h:mm a'\r\n                    },\r\n                    'dateTimeFormats': {\r\n                        'full': '{1} \\'at\\' {0}',\r\n                        'long': '{1} \\'at\\' {0}',\r\n                        'medium': '{1}, {0}',\r\n                        'short': '{1}, {0}',\r\n                        'availableFormats': {\r\n                            'd': 'd',\r\n                            'E': 'ccc',\r\n                            'Ed': 'd E',\r\n                            'Ehm': 'E h:mm a',\r\n                            'EHm': 'E HH:mm',\r\n                            'Ehms': 'E h:mm:ss a',\r\n                            'EHms': 'E HH:mm:ss',\r\n                            'Gy': 'y G',\r\n                            'GyMMM': 'MMM y G',\r\n                            'GyMMMd': 'MMM d, y G',\r\n                            'GyMMMEd': 'E, MMM d, y G',\r\n                            'h': 'h a',\r\n                            'H': 'HH',\r\n                            'hm': 'h:mm a',\r\n                            'Hm': 'HH:mm',\r\n                            'hms': 'h:mm:ss a',\r\n                            'Hms': 'HH:mm:ss',\r\n                            'hmsv': 'h:mm:ss a v',\r\n                            'Hmsv': 'HH:mm:ss v',\r\n                            'hmv': 'h:mm a v',\r\n                            'Hmv': 'HH:mm v',\r\n                            'M': 'L',\r\n                            'Md': 'M/d',\r\n                            'MEd': 'E, M/d',\r\n                            'MMM': 'LLL',\r\n                            'MMMd': 'MMM d',\r\n                            'MMMEd': 'E, MMM d',\r\n                            'MMMMd': 'MMMM d',\r\n                            'ms': 'mm:ss',\r\n                            'y': 'y',\r\n                            'yM': 'M/y',\r\n                            'yMd': 'M/d/y',\r\n                            'yMEd': 'E, M/d/y',\r\n                            'yMMM': 'MMM y',\r\n                            'yMMMd': 'MMM d, y',\r\n                            'yMMMEd': 'E, MMM d, y',\r\n                            'yMMMM': 'MMMM y'\r\n                        }\r\n                    }\r\n                },\r\n                'islamic': {\r\n                    'months': {\r\n                        'stand-alone': {\r\n                            'abbreviated': {\r\n                                '1': 'Muh.',\r\n                                '2': 'Saf.',\r\n                                '3': 'Rab. I',\r\n                                '4': 'Rab. II',\r\n                                '5': 'Jum. I',\r\n                                '6': 'Jum. II',\r\n                                '7': 'Raj.',\r\n                                '8': 'Sha.',\r\n                                '9': 'Ram.',\r\n                                '10': 'Shaw.',\r\n                                '11': 'Dhuʻl-Q.',\r\n                                '12': 'Dhuʻl-H.'\r\n                            },\r\n                            'narrow': {\r\n                                '1': '1',\r\n                                '2': '2',\r\n                                '3': '3',\r\n                                '4': '4',\r\n                                '5': '5',\r\n                                '6': '6',\r\n                                '7': '7',\r\n                                '8': '8',\r\n                                '9': '9',\r\n                                '10': '10',\r\n                                '11': '11',\r\n                                '12': '12'\r\n                            },\r\n                            'wide': {\r\n                                '1': 'Muharram',\r\n                                '2': 'Safar',\r\n                                '3': 'Rabiʻ I',\r\n                                '4': 'Rabiʻ II',\r\n                                '5': 'Jumada I',\r\n                                '6': 'Jumada II',\r\n                                '7': 'Rajab',\r\n                                '8': 'Shaʻban',\r\n                                '9': 'Ramadan',\r\n                                '10': 'Shawwal',\r\n                                '11': 'Dhuʻl-Qiʻdah',\r\n                                '12': 'Dhuʻl-Hijjah'\r\n                            }\r\n                        }\r\n                    },\r\n                    'days': {\r\n                        'stand-alone': {\r\n                            'abbreviated': {\r\n                                'sun': 'Sun',\r\n                                'mon': 'Mon',\r\n                                'tue': 'Tue',\r\n                                'wed': 'Wed',\r\n                                'thu': 'Thu',\r\n                                'fri': 'Fri',\r\n                                'sat': 'Sat'\r\n                            },\r\n                            'narrow': {\r\n                                'sun': 'S',\r\n                                'mon': 'M',\r\n                                'tue': 'T',\r\n                                'wed': 'W',\r\n                                'thu': 'T',\r\n                                'fri': 'F',\r\n                                'sat': 'S'\r\n                            },\r\n                            'short': {\r\n                                'sun': 'Su',\r\n                                'mon': 'Mo',\r\n                                'tue': 'Tu',\r\n                                'wed': 'We',\r\n                                'thu': 'Th',\r\n                                'fri': 'Fr',\r\n                                'sat': 'Sa'\r\n                            },\r\n                            'wide': {\r\n                                'sun': 'Sunday',\r\n                                'mon': 'Monday',\r\n                                'tue': 'Tuesday',\r\n                                'wed': 'Wednesday',\r\n                                'thu': 'Thursday',\r\n                                'fri': 'Friday',\r\n                                'sat': 'Saturday'\r\n                            }\r\n                        }\r\n                    },\r\n                    'dayPeriods': {\r\n                        'format': {\r\n                            'wide': {\r\n                                'am': 'AM',\r\n                                'pm': 'PM'\r\n                            }\r\n                        }\r\n                    },\r\n                    'eras': {\r\n                        'eraNames': {\r\n                            '0': 'AH'\r\n                        },\r\n                        'eraAbbr': {\r\n                            '0': 'AH'\r\n                        },\r\n                        'eraNarrow': {\r\n                            '0': 'AH'\r\n                        }\r\n                    },\r\n                    'dateFormats': {\r\n                        'full': 'EEEE, MMMM d, y G',\r\n                        'long': 'MMMM d, y G',\r\n                        'medium': 'MMM d, y G',\r\n                        'short': 'M/d/y GGGGG'\r\n                    },\r\n                    'timeFormats': {\r\n                        'full': 'h:mm:ss a zzzz',\r\n                        'long': 'h:mm:ss a z',\r\n                        'medium': 'h:mm:ss a',\r\n                        'short': 'h:mm a'\r\n                    },\r\n                    'dateTimeFormats': {\r\n                        'full': '{1} \\'at\\' {0}',\r\n                        'long': '{1} \\'at\\' {0}',\r\n                        'medium': '{1}, {0}',\r\n                        'short': '{1}, {0}',\r\n                        'availableFormats': {\r\n                            'd': 'd',\r\n                            'E': 'ccc',\r\n                            'Ed': 'd E',\r\n                            'Ehm': 'E h:mm a',\r\n                            'EHm': 'E HH:mm',\r\n                            'Ehms': 'E h:mm:ss a',\r\n                            'EHms': 'E HH:mm:ss',\r\n                            'Gy': 'y G',\r\n                            'GyMMM': 'MMM y G',\r\n                            'GyMMMd': 'MMM d, y G',\r\n                            'GyMMMEd': 'E, MMM d, y G',\r\n                            'h': 'h a',\r\n                            'H': 'HH',\r\n                            'hm': 'h:mm a',\r\n                            'Hm': 'HH:mm',\r\n                            'hms': 'h:mm:ss a',\r\n                            'Hms': 'HH:mm:ss',\r\n                            'M': 'L',\r\n                            'Md': 'M/d',\r\n                            'MEd': 'E, M/d',\r\n                            'MMM': 'LLL',\r\n                            'MMMd': 'MMM d',\r\n                            'MMMEd': 'E, MMM d',\r\n                            'MMMMd': 'MMMM d',\r\n                            'ms': 'mm:ss',\r\n                            'y': 'y G',\r\n                            'yyyy': 'y G',\r\n                            'yyyyM': 'M/y GGGGG',\r\n                            'yyyyMd': 'M/d/y GGGGG',\r\n                            'yyyyMEd': 'E, M/d/y GGGGG',\r\n                            'yyyyMMM': 'MMM y G',\r\n                            'yyyyMMMd': 'MMM d, y G',\r\n                            'yyyyMMMEd': 'E, MMM d, y G',\r\n                            'yyyyMMMM': 'MMMM y G',\r\n                            'yyyyQQQ': 'QQQ y G',\r\n                            'yyyyQQQQ': 'QQQQ y G'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            'timeZoneNames': {\r\n                'hourFormat': '+HH:mm;-HH:mm',\r\n                'gmtFormat': 'GMT{0}',\r\n                'gmtZeroFormat': 'GMT'\r\n            }\r\n        },\r\n        'numbers': {\r\n            'currencies': {\r\n                'USD': {\r\n                    'displayName': 'US Dollar',\r\n                    'symbol': '$',\r\n                    'symbol-alt-narrow': '$'\r\n                },\r\n                'EUR': {\r\n                    'displayName': 'Euro',\r\n                    'symbol': '€',\r\n                    'symbol-alt-narrow': '€'\r\n                },\r\n                'GBP': {\r\n                    'displayName': 'British Pound',\r\n                    'symbol-alt-narrow': '£'\r\n                }\r\n            },\r\n            'defaultNumberingSystem': 'latn',\r\n            'minimumGroupingDigits': '1',\r\n            'symbols-numberSystem-latn': {\r\n                'decimal': '.',\r\n                'group': ',',\r\n                'list': ';',\r\n                'percentSign': '%',\r\n                'plusSign': '+',\r\n                'minusSign': '-',\r\n                'exponential': 'E',\r\n                'superscriptingExponent': '×',\r\n                'perMille': '‰',\r\n                'infinity': '∞',\r\n                'nan': 'NaN',\r\n                'timeSeparator': ':'\r\n            },\r\n            'decimalFormats-numberSystem-latn': {\r\n                'standard': '#,##0.###'\r\n            },\r\n            'percentFormats-numberSystem-latn': {\r\n                'standard': '#,##0%'\r\n            },\r\n            'currencyFormats-numberSystem-latn': {\r\n                'standard': '¤#,##0.00',\r\n                'accounting': '¤#,##0.00;(¤#,##0.00)'\r\n            },\r\n            'scientificFormats-numberSystem-latn': {\r\n                'standard': '#E0'\r\n            }\r\n        }\r\n    };\r\n    IntlBase.blazorDefaultObject = {\r\n        'numbers': {\r\n            'mapper': {\r\n                '0': '0',\r\n                '1': '1',\r\n                '2': '2',\r\n                '3': '3',\r\n                '4': '4',\r\n                '5': '5',\r\n                '6': '6',\r\n                '7': '7',\r\n                '8': '8',\r\n                '9': '9'\r\n            },\r\n            'mapperDigits': '0123456789',\r\n            'numberSymbols': {\r\n                'decimal': '.',\r\n                'group': ',',\r\n                'plusSign': '+',\r\n                'minusSign': '-',\r\n                'percentSign': '%',\r\n                'nan': 'NaN',\r\n                'timeSeparator': ':',\r\n                'infinity': '∞'\r\n            },\r\n            'timeSeparator': ':',\r\n            'currencySymbol': '$',\r\n            'currencypData': {\r\n                'nlead': '$',\r\n                'nend': '',\r\n                'groupSeparator': ',',\r\n                'groupData': {\r\n                    'primary': 3\r\n                },\r\n                'maximumFraction': 2,\r\n                'minimumFraction': 2\r\n            },\r\n            'percentpData': {\r\n                'nlead': '',\r\n                'nend': '%',\r\n                'groupSeparator': ',',\r\n                'groupData': {\r\n                    'primary': 3\r\n                },\r\n                'maximumFraction': 2,\r\n                'minimumFraction': 2\r\n            },\r\n            'percentnData': {\r\n                'nlead': '-',\r\n                'nend': '%',\r\n                'groupSeparator': ',',\r\n                'groupData': {\r\n                    'primary': 3\r\n                },\r\n                'maximumFraction': 2,\r\n                'minimumFraction': 2\r\n            },\r\n            'currencynData': {\r\n                'nlead': '($',\r\n                'nend': ')',\r\n                'groupSeparator': ',',\r\n                'groupData': {\r\n                    'primary': 3\r\n                },\r\n                'maximumFraction': 2,\r\n                'minimumFraction': 2\r\n            },\r\n            'decimalnData': {\r\n                'nlead': '-',\r\n                'nend': '',\r\n                'groupData': {\r\n                    'primary': 3\r\n                },\r\n                'maximumFraction': 2,\r\n                'minimumFraction': 2\r\n            },\r\n            'decimalpData': {\r\n                'nlead': '',\r\n                'nend': '',\r\n                'groupData': {\r\n                    'primary': 3\r\n                },\r\n                'maximumFraction': 2,\r\n                'minimumFraction': 2\r\n            }\r\n        },\r\n        'dates': {\r\n            'dayPeriods': {\r\n                'am': 'AM',\r\n                'pm': 'PM'\r\n            },\r\n            'dateSeperator': '/',\r\n            'days': {\r\n                'abbreviated': {\r\n                    'sun': 'Sun',\r\n                    'mon': 'Mon',\r\n                    'tue': 'Tue',\r\n                    'wed': 'Wed',\r\n                    'thu': 'Thu',\r\n                    'fri': 'Fri',\r\n                    'sat': 'Sat'\r\n                },\r\n                'short': {\r\n                    'sun': 'Su',\r\n                    'mon': 'Mo',\r\n                    'tue': 'Tu',\r\n                    'wed': 'We',\r\n                    'thu': 'Th',\r\n                    'fri': 'Fr',\r\n                    'sat': 'Sa'\r\n                },\r\n                'wide': {\r\n                    'sun': 'Sunday',\r\n                    'mon': 'Monday',\r\n                    'tue': 'Tuesday',\r\n                    'wed': 'Wednesday',\r\n                    'thu': 'Thursday',\r\n                    'fri': 'Friday',\r\n                    'sat': 'Saturday'\r\n                }\r\n            },\r\n            'months': {\r\n                'abbreviated': {\r\n                    '1': 'Jan',\r\n                    '2': 'Feb',\r\n                    '3': 'Mar',\r\n                    '4': 'Apr',\r\n                    '5': 'May',\r\n                    '6': 'Jun',\r\n                    '7': 'Jul',\r\n                    '8': 'Aug',\r\n                    '9': 'Sep',\r\n                    '10': 'Oct',\r\n                    '11': 'Nov',\r\n                    '12': 'Dec'\r\n                },\r\n                'wide': {\r\n                    '1': 'January',\r\n                    '2': 'February',\r\n                    '3': 'March',\r\n                    '4': 'April',\r\n                    '5': 'May',\r\n                    '6': 'June',\r\n                    '7': 'July',\r\n                    '8': 'August',\r\n                    '9': 'September',\r\n                    '10': 'October',\r\n                    '11': 'November',\r\n                    '12': 'December'\r\n                }\r\n            },\r\n            'eras': {\r\n                '1': 'AD'\r\n            }\r\n        }\r\n    };\r\n    IntlBase.monthIndex = {\r\n        3: 'abbreviated',\r\n        4: 'wide',\r\n        5: 'narrow',\r\n        1: 'abbreviated'\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    IntlBase.month = 'months';\r\n    IntlBase.days = 'days';\r\n    /**\r\n     * Default numerber Object\r\n     */\r\n    IntlBase.patternMatcher = {\r\n        C: 'currency',\r\n        P: 'percent',\r\n        N: 'decimal',\r\n        A: 'currency',\r\n        E: 'scientific'\r\n    };\r\n    /**\r\n     * Returns the resultant pattern based on the skeleton, dateObject and the type provided\r\n     *\r\n     * @private\r\n     * @param {string} skeleton ?\r\n     * @param {Object} dateObject ?\r\n     * @param {string} type ?\r\n     * @param {boolean} isIslamic ?\r\n     * @param {string} blazorCulture ?\r\n     * @returns {string} ?\r\n     */\r\n    function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\r\n        var resPattern;\r\n        var iType = type || 'date';\r\n        if (blazorCulture) {\r\n            resPattern = compareBlazorDateFormats({ skeleton: skeleton }, blazorCulture).format ||\r\n                compareBlazorDateFormats({ skeleton: 'd' }, 'en-US').format;\r\n        }\r\n        else {\r\n            if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\r\n                resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\r\n                if (iType === 'dateTime') {\r\n                    var dPattern = getValue('dateFormats.' + skeleton, dateObject);\r\n                    var tPattern = getValue('timeFormats.' + skeleton, dateObject);\r\n                    resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\r\n                }\r\n            }\r\n            else {\r\n                resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\r\n            }\r\n            if (isUndefined(resPattern) && skeleton === 'yMd') {\r\n                resPattern = 'M/d/y';\r\n            }\r\n        }\r\n        return resPattern;\r\n    }\r\n    IntlBase.getResultantPattern = getResultantPattern;\r\n    /**\r\n     * Returns the dependable object for provided cldr data and culture\r\n     *\r\n     * @private\r\n     * @param {Object} cldr ?\r\n     * @param {string} culture ?\r\n     * @param {string} mode ?\r\n     * @param {boolean} isNumber ?\r\n     * @returns {any} ?\r\n     */\r\n    function getDependables(cldr, culture, mode, isNumber) {\r\n        var ret = {};\r\n        var calendartype = mode || 'gregorian';\r\n        ret.parserObject = parser.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\r\n        if (isNumber) {\r\n            ret.numericObject = getValue('numbers', ret.parserObject);\r\n        }\r\n        else {\r\n            var dateString = isBlazor() ? 'dates' : ('dates.calendars.' + calendartype);\r\n            ret.dateObject = getValue(dateString, ret.parserObject);\r\n        }\r\n        return ret;\r\n    }\r\n    IntlBase.getDependables = getDependables;\r\n    /**\r\n     * Returns the symbol pattern for provided parameters\r\n     *\r\n     * @private\r\n     * @param {string} type ?\r\n     * @param {string} numSystem ?\r\n     * @param {Object} obj ?\r\n     * @param {boolean} isAccount ?\r\n     * @returns {string} ?\r\n     */\r\n    function getSymbolPattern(type, numSystem, obj, isAccount) {\r\n        return getValue(type + 'Formats-numberSystem-' +\r\n            numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' +\r\n            numSystem + '.standard', obj) : '');\r\n    }\r\n    IntlBase.getSymbolPattern = getSymbolPattern;\r\n    /**\r\n     *\r\n     * @param {string} format ?\r\n     * @returns {string} ?\r\n     */\r\n    function ConvertDateToWeekFormat(format) {\r\n        var convertMapper = format.match(IntlBase.dateConverterMapper);\r\n        if (convertMapper && isBlazor()) {\r\n            var tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\r\n            return format.replace(IntlBase.dateConverterMapper, tempString);\r\n        }\r\n        return format;\r\n    }\r\n    IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\r\n    /**\r\n     *\r\n     * @param {DateFormatOptions} formatOptions ?\r\n     * @param {string} culture ?\r\n     * @returns {DateFormatOptions} ?\r\n     */\r\n    function compareBlazorDateFormats(formatOptions, culture) {\r\n        var format = formatOptions.format || formatOptions.skeleton;\r\n        var curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\r\n        if (!curFormatMapper) {\r\n            curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\r\n        }\r\n        if (curFormatMapper) {\r\n            curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\r\n            formatOptions.format = curFormatMapper.replace(/tt/, 'a');\r\n        }\r\n        return formatOptions;\r\n    }\r\n    IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\r\n    /**\r\n     * Returns proper numeric skeleton\r\n     *\r\n     * @private\r\n     * @param {string} skeleton ?\r\n     * @returns {any} ?\r\n     */\r\n    function getProperNumericSkeleton(skeleton) {\r\n        var matches = skeleton.match(IntlBase.formatRegex);\r\n        var ret = {};\r\n        var pattern = matches[1].toUpperCase();\r\n        ret.isAccount = (pattern === 'A');\r\n        ret.type = IntlBase.patternMatcher[\"\" + pattern];\r\n        if (skeleton.length > 1) {\r\n            ret.fractionDigits = parseInt(matches[2], 10);\r\n        }\r\n        return ret;\r\n    }\r\n    IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\r\n    /**\r\n     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\r\n     *\r\n     * @private\r\n     * @param {string} pattern ?\r\n     * @param {boolean} needFraction ?\r\n     * @param {string} cSymbol ?\r\n     * @param {boolean} fractionOnly ?\r\n     * @returns {any} ?\r\n     */\r\n    function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\r\n        var nData = fractionOnly ? {} : { nlead: '', nend: '' };\r\n        var match = pattern.match(IntlBase.customRegex);\r\n        if (match) {\r\n            if (!fractionOnly) {\r\n                nData.nlead = changeCurrencySymbol(match[1], cSymbol);\r\n                nData.nend = changeCurrencySymbol(match[10], cSymbol);\r\n                nData.groupPattern = match[4];\r\n            }\r\n            var fraction = match[7];\r\n            if (fraction && needFraction) {\r\n                var fmatch = fraction.match(fractionRegex);\r\n                if (!isNullOrUndefined(fmatch)) {\r\n                    nData.minimumFraction = fmatch.length;\r\n                }\r\n                else {\r\n                    nData.minimumFraction = 0;\r\n                }\r\n                nData.maximumFraction = fraction.length - 1;\r\n            }\r\n        }\r\n        return nData;\r\n    }\r\n    IntlBase.getFormatData = getFormatData;\r\n    /**\r\n     * Changes currency symbol\r\n     *\r\n     * @private\r\n     * @param {string} val ?\r\n     * @param {string} sym ?\r\n     * @returns {string} ?\r\n     */\r\n    function changeCurrencySymbol(val, sym) {\r\n        if (val) {\r\n            val = val.replace(IntlBase.defaultCurrency, sym);\r\n            return (sym === '') ? val.trim() : val;\r\n        }\r\n        return '';\r\n    }\r\n    IntlBase.changeCurrencySymbol = changeCurrencySymbol;\r\n    /**\r\n     * Returns currency symbol based on currency code ?\r\n     *\r\n     * @private\r\n     * @param {Object} numericObject ?\r\n     * @param {string} currencyCode ?\r\n     * @param {string} altSymbol ?\r\n     * @returns {string} ?\r\n     */\r\n    function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\r\n        var symbol = altSymbol ? ('.' + altSymbol) : '.symbol';\r\n        var getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) ||\r\n            getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\r\n        return getCurrency;\r\n    }\r\n    IntlBase.getCurrencySymbol = getCurrencySymbol;\r\n    /**\r\n     * Returns formatting options for custom number format\r\n     *\r\n     * @private\r\n     * @param {string} format ?\r\n     * @param {CommonOptions} dOptions ?\r\n     * @param {any} obj ?\r\n     * @returns {any} ?\r\n     */\r\n    function customFormat(format, dOptions, obj) {\r\n        var options = {};\r\n        var formatSplit = format.split(';');\r\n        var data = ['pData', 'nData', 'zeroData'];\r\n        for (var i = 0; i < formatSplit.length; i++) {\r\n            options[\"\" + data[parseInt(i.toString(), 10)]] = customNumberFormat(formatSplit[parseInt(i.toString(), 10)], dOptions, obj);\r\n        }\r\n        if (isNullOrUndefined(options.nData)) {\r\n            options.nData = extend({}, options.pData);\r\n            options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\r\n        }\r\n        return options;\r\n    }\r\n    IntlBase.customFormat = customFormat;\r\n    /**\r\n     * Returns custom formatting options\r\n     *\r\n     * @private\r\n     * @param {string} format ?\r\n     * @param {CommonOptions} dOptions ?\r\n     * @param {Object} numObject ?\r\n     * @returns {any} ?\r\n     */\r\n    function customNumberFormat(format, dOptions, numObject) {\r\n        var cOptions = { type: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 0 };\r\n        var pattern = format.match(IntlBase.customRegex);\r\n        if (isNullOrUndefined(pattern) || (pattern[5] === '' && format !== 'N/A')) {\r\n            cOptions.type = undefined;\r\n            return cOptions;\r\n        }\r\n        cOptions.nlead = pattern[1];\r\n        cOptions.nend = pattern[10];\r\n        var integerPart = pattern[6];\r\n        var spaceCapture = integerPart.match(/ $/g) ? true : false;\r\n        var spaceGrouping = integerPart.replace(/ $/g, '').indexOf(' ') !== -1;\r\n        cOptions.useGrouping = integerPart.indexOf(',') !== -1 || spaceGrouping;\r\n        integerPart = integerPart.replace(/,/g, '');\r\n        var fractionPart = pattern[7];\r\n        if (integerPart.indexOf('0') !== -1) {\r\n            cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\r\n        }\r\n        if (!isNullOrUndefined(fractionPart)) {\r\n            cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\r\n            cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\r\n            if (cOptions.minimumFractionDigits === -1) {\r\n                cOptions.minimumFractionDigits = 0;\r\n            }\r\n            if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\r\n                cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\r\n            }\r\n        }\r\n        if (!isNullOrUndefined(dOptions)) {\r\n            dOptions.isCustomFormat = true;\r\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\r\n            if (!cOptions.isCurrency) {\r\n                extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\r\n            }\r\n        }\r\n        else {\r\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\r\n        }\r\n        if (!isNullOrUndefined(numObject)) {\r\n            var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\r\n            if (cOptions.useGrouping) {\r\n                cOptions.groupSeparator = spaceGrouping ? ' ' : dOptions.numberMapper.numberSymbols[mapper[2]];\r\n                cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\r\n            }\r\n            cOptions.nlead = cOptions.nlead.replace(/'/g, '');\r\n            cOptions.nend = spaceCapture ? ' ' + cOptions.nend.replace(/'/g, '') : cOptions.nend.replace(/'/g, '');\r\n        }\r\n        return cOptions;\r\n    }\r\n    IntlBase.customNumberFormat = customNumberFormat;\r\n    /**\r\n     * Returns formatting options for currency or percent type\r\n     *\r\n     * @private\r\n     * @param {string[]} parts ?\r\n     * @param {string} actual ?\r\n     * @param {string} symbol ?\r\n     * @returns {any} ?\r\n     */\r\n    function isCurrencyPercent(parts, actual, symbol) {\r\n        var options = { nlead: parts[0], nend: parts[1] };\r\n        for (var i = 0; i < 2; i++) {\r\n            var part = parts[parseInt(i.toString(), 10)];\r\n            var loc = part.indexOf(actual);\r\n            if ((loc !== -1) && ((loc < part.indexOf('\\'')) || (loc > part.lastIndexOf('\\'')))) {\r\n                options[\"\" + typeMapper[parseInt(i.toString(), 10)]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\r\n                options[\"\" + typeMapper[\"\" + actual]] = true;\r\n                options.type = options.isCurrency ? 'currency' : 'percent';\r\n                break;\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n    IntlBase.isCurrencyPercent = isCurrencyPercent;\r\n    /**\r\n     * Returns culture based date separator\r\n     *\r\n     * @private\r\n     * @param {Object} dateObj ?\r\n     * @returns {string} ?\r\n     */\r\n    function getDateSeparator(dateObj) {\r\n        var value = (getValue('dateFormats.short', dateObj) || '').match(/[dM]([^dM])[dM]/i);\r\n        return value ? value[1] : '/';\r\n    }\r\n    IntlBase.getDateSeparator = getDateSeparator;\r\n    /**\r\n     * Returns Native Date Time pattern\r\n     *\r\n     * @private\r\n     * @param {string} culture ?\r\n     * @param {DateFormatOptions} options ?\r\n     * @param {Object} cldr ?\r\n     * @param {boolean} isExcelFormat ?\r\n     * @returns {string} ?\r\n     */\r\n    function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\r\n        var dependable = getDependables(cldr, culture, options.calendar);\r\n        if (isBlazor()) {\r\n            options = compareBlazorDateFormats(options, culture);\r\n        }\r\n        var actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\r\n        if (isExcelFormat) {\r\n            actualPattern = actualPattern.replace(patternRegex, function (pattern) {\r\n                return patternMatch[\"\" + pattern];\r\n            });\r\n            if (actualPattern.indexOf('z') !== -1) {\r\n                var tLength = actualPattern.match(/z/g).length;\r\n                var timeZonePattern = void 0;\r\n                var options_1 = { 'timeZone': {} };\r\n                options_1.numMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\r\n                options_1.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\r\n                var value = new Date();\r\n                var timezone = value.getTimezoneOffset();\r\n                var pattern = (tLength < 4) ? '+H;-H' : options_1.timeZone.hourFormat;\r\n                pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator);\r\n                if (timezone === 0) {\r\n                    timeZonePattern = options_1.timeZone.gmtZeroFormat;\r\n                }\r\n                else {\r\n                    timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\r\n                    timeZonePattern = options_1.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\r\n                }\r\n                actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\r\n            }\r\n            actualPattern = actualPattern.replace(/ $/, '');\r\n        }\r\n        return actualPattern;\r\n    }\r\n    IntlBase.getActualDateTimeFormat = getActualDateTimeFormat;\r\n    /**\r\n     *\r\n     * @param {string} actual ?\r\n     * @param {any} option ?\r\n     * @returns {any} ?\r\n     */\r\n    function processSymbol(actual, option) {\r\n        if (actual.indexOf(',') !== -1) {\r\n            var split = actual.split(',');\r\n            actual = (split[0] + getValue('numberMapper.numberSymbols.group', option) +\r\n                split[1].replace('.', getValue('numberMapper.numberSymbols.decimal', option)));\r\n        }\r\n        else {\r\n            actual = actual.replace('.', getValue('numberMapper.numberSymbols.decimal', option));\r\n        }\r\n        return actual;\r\n    }\r\n    IntlBase.processSymbol = processSymbol;\r\n    /**\r\n     * Returns Native Number pattern\r\n     *\r\n     * @private\r\n     * @param {string} culture ?\r\n     * @param {NumberFormatOptions} options ?\r\n     * @param {Object} cldr ?\r\n     * @param {boolean} isExcel ?\r\n     * @returns {string} ?\r\n     */\r\n    function getActualNumberFormat(culture, options, cldr, isExcel) {\r\n        var dependable = getDependables(cldr, culture, '', true);\r\n        var parseOptions = { custom: true };\r\n        var numrericObject = dependable.numericObject;\r\n        var minFrac;\r\n        var curObj = {};\r\n        var curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\r\n        var type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\r\n        var dOptions = {};\r\n        if (curMatch) {\r\n            dOptions.numberMapper = isBlazor() ?\r\n                extend({}, dependable.numericObject) :\r\n                parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\r\n            var curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) :\r\n                getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\r\n            var symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, (/a/i).test(options.format));\r\n            symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\r\n            var split = symbolPattern.split(';');\r\n            curObj.hasNegativePattern = isBlazor() ? true : (split.length > 1);\r\n            curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) :\r\n                getFormatData(split[1] || '-' + split[0], true, curCode);\r\n            curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) :\r\n                getFormatData(split[0], false, curCode);\r\n            if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\r\n                minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\r\n            }\r\n        }\r\n        var actualPattern;\r\n        if ((IntlBase.formatRegex.test(options.format)) || !(options.format)) {\r\n            extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\r\n            parseOptions.custom = false;\r\n            actualPattern = '###0';\r\n            if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\r\n                var defaultMinimum = 0;\r\n                if (parseOptions.fractionDigits) {\r\n                    options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\r\n                }\r\n                actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits ||\r\n                    options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\r\n            }\r\n            if (options.minimumIntegerDigits) {\r\n                actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\r\n            }\r\n            if (options.useGrouping) {\r\n                actualPattern = groupingPattern(actualPattern);\r\n            }\r\n            if (parseOptions.type === 'currency' || (parseOptions.type && isBlazor())) {\r\n                if (isBlazor() && parseOptions.type !== 'currency') {\r\n                    curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\r\n                    curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\r\n                }\r\n                var cPattern = actualPattern;\r\n                actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\r\n                if (curObj.hasNegativePattern || isBlazor()) {\r\n                    actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\r\n                }\r\n            }\r\n            if (parseOptions.type === 'percent' && !isBlazor()) {\r\n                actualPattern += ' %';\r\n            }\r\n        }\r\n        else {\r\n            actualPattern = options.format.replace(/'/g, '\"');\r\n        }\r\n        if (Object.keys(dOptions).length > 0) {\r\n            actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;\r\n        }\r\n        return actualPattern;\r\n    }\r\n    IntlBase.getActualNumberFormat = getActualNumberFormat;\r\n    /**\r\n     *\r\n     * @param {string} pattern ?\r\n     * @param {number} minDigits ?\r\n     * @param {number} maxDigits ?\r\n     * @returns {string} ?\r\n     */\r\n    function fractionDigitsPattern(pattern, minDigits, maxDigits) {\r\n        pattern += '.';\r\n        for (var a = 0; a < minDigits; a++) {\r\n            pattern += '0';\r\n        }\r\n        if (minDigits < maxDigits) {\r\n            var diff = maxDigits - minDigits;\r\n            for (var b = 0; b < diff; b++) {\r\n                pattern += '#';\r\n            }\r\n        }\r\n        return pattern;\r\n    }\r\n    IntlBase.fractionDigitsPattern = fractionDigitsPattern;\r\n    /**\r\n     *\r\n     * @param {string} pattern ?\r\n     * @param {number} digits ?\r\n     * @returns {string} ?\r\n     */\r\n    function minimumIntegerPattern(pattern, digits) {\r\n        var temp = pattern.split('.');\r\n        var integer = '';\r\n        for (var x = 0; x < digits; x++) {\r\n            integer += '0';\r\n        }\r\n        return temp[1] ? (integer + '.' + temp[1]) : integer;\r\n    }\r\n    IntlBase.minimumIntegerPattern = minimumIntegerPattern;\r\n    /**\r\n     *\r\n     * @param {string} pattern ?\r\n     * @returns {string} ?\r\n     */\r\n    function groupingPattern(pattern) {\r\n        var temp = pattern.split('.');\r\n        var integer = temp[0];\r\n        var no = 3 - integer.length % 3;\r\n        var hash = (no && no === 1) ? '#' : (no === 2 ? '##' : '');\r\n        integer = hash + integer;\r\n        pattern = '';\r\n        for (var x = integer.length - 1; x > 0; x = x - 3) {\r\n            pattern = ',' + integer[x - 2] + integer[x - 1] + integer[parseInt(x.toString(), 10)] + pattern;\r\n        }\r\n        pattern = pattern.slice(1);\r\n        return temp[1] ? (pattern + '.' + temp[1]) : pattern;\r\n    }\r\n    IntlBase.groupingPattern = groupingPattern;\r\n    /**\r\n     *\r\n     * @param {string} culture ?\r\n     * @param {Object} cldr ?\r\n     * @returns {number} ?\r\n     */\r\n    function getWeekData(culture, cldr) {\r\n        var firstDay = defaultFirstDay;\r\n        var mapper = getValue('supplemental.weekData.firstDay', cldr);\r\n        var iCulture = culture;\r\n        if ((/en-/).test(iCulture)) {\r\n            iCulture = iCulture.slice(3);\r\n        }\r\n        iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\r\n        if (mapper) {\r\n            firstDay = mapper[\"\" + iCulture] || mapper[iCulture.slice(0, 2)] || defaultFirstDay;\r\n        }\r\n        return firstDayMapper[\"\" + firstDay];\r\n    }\r\n    IntlBase.getWeekData = getWeekData;\r\n    /**\r\n     * @private\r\n     * @param {any} pData ?\r\n     * @param {string} aCurrency ?\r\n     * @param {string} rCurrency ?\r\n     * @returns {void} ?\r\n     */\r\n    function replaceBlazorCurrency(pData, aCurrency, rCurrency) {\r\n        var iCurrency = getBlazorCurrencySymbol(rCurrency);\r\n        if (aCurrency !== iCurrency) {\r\n            for (var _i = 0, pData_1 = pData; _i < pData_1.length; _i++) {\r\n                var data = pData_1[_i];\r\n                data.nend = data.nend.replace(aCurrency, iCurrency);\r\n                data.nlead = data.nlead.replace(aCurrency, iCurrency);\r\n            }\r\n        }\r\n    }\r\n    IntlBase.replaceBlazorCurrency = replaceBlazorCurrency;\r\n    /**\r\n     * @private\r\n     * @param {Date} date ?\r\n     * @returns {number} ?\r\n     */\r\n    function getWeekOfYear(date) {\r\n        var newYear = new Date(date.getFullYear(), 0, 1);\r\n        var day = newYear.getDay();\r\n        var weeknum;\r\n        day = (day >= 0 ? day : day + 7);\r\n        var daynum = Math.floor((date.getTime() - newYear.getTime() -\r\n            (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\r\n        if (day < 4) {\r\n            weeknum = Math.floor((daynum + day - 1) / 7) + 1;\r\n            if (weeknum > 52) {\r\n                var nYear = new Date(date.getFullYear() + 1, 0, 1);\r\n                var nday = nYear.getDay();\r\n                nday = nday >= 0 ? nday : nday + 7;\r\n                weeknum = nday < 4 ? 1 : 53;\r\n            }\r\n        }\r\n        else {\r\n            weeknum = Math.floor((daynum + day - 1) / 7);\r\n        }\r\n        return weeknum;\r\n    }\r\n    IntlBase.getWeekOfYear = getWeekOfYear;\r\n})(IntlBase || (IntlBase = {}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}