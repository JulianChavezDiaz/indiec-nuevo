{"ast":null,"code":"/**\r\n * PdfFont.ts class for EJ2-PDF\r\n */\nimport { PdfFontStyle } from './enum';\nimport { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfStringFormat } from './pdf-string-format';\nimport { PdfStringLayouter } from './string-layouter';\nimport { StringTokenizer } from './string-tokenizer';\n/**\r\n * Defines a particular format for text, including font face, size, and style attributes.\r\n * @private\r\n */\nvar PdfFont = /** @class */function () {\n  function PdfFont(size, style) {\n    /**\r\n     * `Style` of the font.\r\n     * @private\r\n     */\n    this.fontStyle = PdfFontStyle.Regular;\n    if (typeof size === 'number' && typeof style === 'undefined') {\n      this.fontSize = size;\n    } else {\n      this.fontSize = size;\n      this.setStyle(style);\n    }\n  }\n  Object.defineProperty(PdfFont.prototype, \"name\", {\n    //Properties\n    /**\r\n     * Gets the face name of this Font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.metrics.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"size\", {\n    /**\r\n     * Gets the size of this font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.fontSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"height\", {\n    /**\r\n     * Gets the height of the font in points.\r\n     * @private\r\n     */\n    get: function () {\n      return this.metrics.getHeight(null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"style\", {\n    /**\r\n     * Gets the style information for this font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.fontStyle;\n    },\n    set: function (value) {\n      this.fontStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"bold\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` is `bold`.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Bold) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"italic\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Italic) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"strikeout\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` is `strikeout`.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Strikeout) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"underline\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` is `underline`.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Underline) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"metrics\", {\n    /**\r\n     * Gets or sets the `metrics` for this font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.fontMetrics;\n    },\n    set: function (value) {\n      this.fontMetrics = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"element\", {\n    // /**\n    //  * Gets and Sets the font `internals`.\n    //  * @private\n    //  */\n    // public get fontInternal() : IPdfPrimitive {\n    //     return this.pdfFontInternals;\n    // }\n    // public set fontInternal(value : IPdfPrimitive) {\n    //     this.pdfFontInternals = value;\n    // }\n    //IPdfWrapper Members\n    /**\r\n     * Gets the `element` representing the font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfFontInternals;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\n    if (typeof text === 'string' && typeof arg2 === 'undefined') {\n      return this.measureString(text, null);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\n      var temparg2 = arg2;\n      var charactersFitted = 0;\n      var linesFilled = 0;\n      return this.measureString(text, temparg2, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\n      var temparg2 = arg2;\n      return this.measureString(text, 0, temparg2, arg3, arg4);\n      // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\n      var layoutArea = new SizeF(arg2, 0);\n      var temparg3 = arg3;\n      return this.measureString(text, layoutArea, temparg3, arg4, arg5);\n      // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else {\n      if (text == null) {\n        throw Error(\"ArgumentNullException(\\\"text\\\")\");\n      }\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));\n      // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\n      arg4 = text.length;\n      arg5 = result.empty ? 0 : result.lines.length;\n      return result.actualSize;\n    }\n  };\n  /* tslint:enable */\n  //IPdfCache Members\n  /**\r\n   * `Checks` whether the object is similar to another object.\r\n   * @private\r\n   */\n  PdfFont.prototype.equalsTo = function (obj) {\n    var result = this.equalsToFont(obj);\n    return result;\n  };\n  /**\r\n   * Returns `internals` of the object.\r\n   * @private\r\n   */\n  PdfFont.prototype.getInternals = function () {\n    return this.pdfFontInternals;\n  };\n  /**\r\n   * Sets `internals` to the object.\r\n   * @private\r\n   */\n  PdfFont.prototype.setInternals = function (internals) {\n    if (internals == null) {\n      throw new Error('ArgumentNullException:internals');\n    }\n    this.pdfFontInternals = internals;\n  };\n  /**\r\n   * Sets the `style` of the font.\r\n   * @private\r\n   */\n  PdfFont.prototype.setStyle = function (style) {\n    this.fontStyle = style;\n  };\n  /**\r\n   * Applies `settings` to the default line width.\r\n   * @private\r\n   */\n  PdfFont.prototype.applyFormatSettings = function (line, format, width) {\n    // if (line == null) {\n    //     throw new Error(`ArgumentNullException:line`);\n    // }\n    var realWidth = width;\n    if (format != null && width > 0) {\n      // Space among characters is not default.\n      if (format.characterSpacing !== 0) {\n        realWidth += (line.length - 1) * format.characterSpacing;\n      }\n      // Space among words is not default.\n      if (format.wordSpacing !== 0) {\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        realWidth += whitespacesCount * format.wordSpacing;\n      }\n    }\n    return realWidth;\n  };\n  //Constants\n  /**\r\n   * `Multiplier` of the symbol width.\r\n   * @default 0.001\r\n   * @private\r\n   */\n  PdfFont.charSizeMultiplier = 0.001;\n  /**\r\n   * `Synchronization` object.\r\n   * @private\r\n   */\n  PdfFont.syncObject = new Object();\n  return PdfFont;\n}();\nexport { PdfFont };","map":{"version":3,"names":["PdfFontStyle","SizeF","PdfStringFormat","PdfStringLayouter","StringTokenizer","PdfFont","size","style","fontStyle","Regular","fontSize","setStyle","Object","defineProperty","prototype","get","metrics","name","enumerable","configurable","getHeight","set","value","Bold","Italic","Strikeout","Underline","fontMetrics","pdfFontInternals","measureString","text","arg2","arg3","arg4","arg5","temparg2","charactersFitted","linesFilled","layoutArea","temparg3","Error","layouter","result","layout","length","empty","lines","actualSize","equalsTo","obj","equalsToFont","getInternals","setInternals","internals","applyFormatSettings","line","format","width","realWidth","characterSpacing","wordSpacing","symbols","spaces","whitespacesCount","getCharsCount","charSizeMultiplier","syncObject"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font.js"],"sourcesContent":["/**\r\n * PdfFont.ts class for EJ2-PDF\r\n */\r\nimport { PdfFontStyle } from './enum';\r\nimport { SizeF } from './../../drawing/pdf-drawing';\r\nimport { PdfStringFormat } from './pdf-string-format';\r\nimport { PdfStringLayouter } from './string-layouter';\r\nimport { StringTokenizer } from './string-tokenizer';\r\n/**\r\n * Defines a particular format for text, including font face, size, and style attributes.\r\n * @private\r\n */\r\nvar PdfFont = /** @class */ (function () {\r\n    function PdfFont(size, style) {\r\n        /**\r\n         * `Style` of the font.\r\n         * @private\r\n         */\r\n        this.fontStyle = PdfFontStyle.Regular;\r\n        if (typeof size === 'number' && typeof style === 'undefined') {\r\n            this.fontSize = size;\r\n        }\r\n        else {\r\n            this.fontSize = size;\r\n            this.setStyle(style);\r\n        }\r\n    }\r\n    Object.defineProperty(PdfFont.prototype, \"name\", {\r\n        //Properties\r\n        /**\r\n         * Gets the face name of this Font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.metrics.name;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"size\", {\r\n        /**\r\n         * Gets the size of this font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.fontSize;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"height\", {\r\n        /**\r\n         * Gets the height of the font in points.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.metrics.getHeight(null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"style\", {\r\n        /**\r\n         * Gets the style information for this font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.fontStyle;\r\n        },\r\n        set: function (value) {\r\n            this.fontStyle = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"bold\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` is `bold`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Bold) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"italic\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Italic) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"strikeout\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` is `strikeout`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Strikeout) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"underline\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` is `underline`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Underline) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"metrics\", {\r\n        /**\r\n         * Gets or sets the `metrics` for this font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.fontMetrics;\r\n        },\r\n        set: function (value) {\r\n            this.fontMetrics = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"element\", {\r\n        // /**\r\n        //  * Gets and Sets the font `internals`.\r\n        //  * @private\r\n        //  */\r\n        // public get fontInternal() : IPdfPrimitive {\r\n        //     return this.pdfFontInternals;\r\n        // }\r\n        // public set fontInternal(value : IPdfPrimitive) {\r\n        //     this.pdfFontInternals = value;\r\n        // }\r\n        //IPdfWrapper Members\r\n        /**\r\n         * Gets the `element` representing the font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfFontInternals;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\r\n        if (typeof text === 'string' && typeof arg2 === 'undefined') {\r\n            return this.measureString(text, null);\r\n        }\r\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\r\n            var temparg2 = arg2;\r\n            var charactersFitted = 0;\r\n            var linesFilled = 0;\r\n            return this.measureString(text, temparg2, charactersFitted, linesFilled);\r\n        }\r\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\r\n            var temparg2 = arg2;\r\n            return this.measureString(text, 0, temparg2, arg3, arg4);\r\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\r\n            //     return this.measureString(text, arg2, null);\r\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\r\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\r\n            //     let charactersFitted : number = 0;\r\n            //     let linesFilled : number = 0;\r\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\r\n        }\r\n        else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\r\n            var layoutArea = new SizeF(arg2, 0);\r\n            var temparg3 = arg3;\r\n            return this.measureString(text, layoutArea, temparg3, arg4, arg5);\r\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\r\n            //     return this.measureString(text, arg2, null);\r\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\r\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\r\n            //     let charactersFitted : number = 0;\r\n            //     let linesFilled : number = 0;\r\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\r\n        }\r\n        else {\r\n            if (text == null) {\r\n                throw Error(\"ArgumentNullException(\\\"text\\\")\");\r\n            }\r\n            var temparg2 = arg2;\r\n            var temparg3 = arg3;\r\n            var layouter = new PdfStringLayouter();\r\n            var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));\r\n            // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\r\n            arg4 = text.length;\r\n            arg5 = (result.empty) ? 0 : result.lines.length;\r\n            return result.actualSize;\r\n        }\r\n    };\r\n    /* tslint:enable */\r\n    //IPdfCache Members\r\n    /**\r\n     * `Checks` whether the object is similar to another object.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.equalsTo = function (obj) {\r\n        var result = this.equalsToFont(obj);\r\n        return result;\r\n    };\r\n    /**\r\n     * Returns `internals` of the object.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.getInternals = function () {\r\n        return this.pdfFontInternals;\r\n    };\r\n    /**\r\n     * Sets `internals` to the object.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.setInternals = function (internals) {\r\n        if (internals == null) {\r\n            throw new Error('ArgumentNullException:internals');\r\n        }\r\n        this.pdfFontInternals = internals;\r\n    };\r\n    /**\r\n     * Sets the `style` of the font.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.setStyle = function (style) {\r\n        this.fontStyle = style;\r\n    };\r\n    /**\r\n     * Applies `settings` to the default line width.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.applyFormatSettings = function (line, format, width) {\r\n        // if (line == null) {\r\n        //     throw new Error(`ArgumentNullException:line`);\r\n        // }\r\n        var realWidth = width;\r\n        if (format != null && width > 0) {\r\n            // Space among characters is not default.\r\n            if (format.characterSpacing !== 0) {\r\n                realWidth += (line.length - 1) * format.characterSpacing;\r\n            }\r\n            // Space among words is not default.\r\n            if (format.wordSpacing !== 0) {\r\n                var symbols = StringTokenizer.spaces;\r\n                var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\r\n                realWidth += whitespacesCount * format.wordSpacing;\r\n            }\r\n        }\r\n        return realWidth;\r\n    };\r\n    //Constants\r\n    /**\r\n     * `Multiplier` of the symbol width.\r\n     * @default 0.001\r\n     * @private\r\n     */\r\n    PdfFont.charSizeMultiplier = 0.001;\r\n    /**\r\n     * `Synchronization` object.\r\n     * @private\r\n     */\r\n    PdfFont.syncObject = new Object();\r\n    return PdfFont;\r\n}());\r\nexport { PdfFont };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}