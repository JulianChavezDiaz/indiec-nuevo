{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Series, Points } from '../series/chart-series';\nimport { findClipRect, RectOption } from '../../common/utils/helper';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\r\n * `Trendline` module is used to render 6 types of trendlines in chart.\r\n */\nvar Trendlines = /** @class */function () {\n  function Trendlines() {}\n  /**\r\n   * Initializes the series collection for the specified trendline in the chart.\r\n   *\r\n   * @param {Trendline} trendline - The trendline for which the series collection is initialized.\r\n   * @param {Chart} chart - The chart instance.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.initSeriesCollection = function (trendline, chart) {\n    var trendLineSeries = new Series(trendline, 'targetSeries', {}, true);\n    if (trendline.type === 'Linear' || trendline.type === 'MovingAverage') {\n      trendLineSeries.type = 'Line';\n    } else {\n      trendLineSeries.type = 'Spline';\n    }\n    this.setSeriesProperties(trendLineSeries, trendline, trendline.type, trendline.fill, trendline.width, chart);\n  };\n  /**\r\n   * Sets the properties for the specified series related to the specified trendline.\r\n   *\r\n   * @param {Series} series - The series to which properties are applied.\r\n   * @param {Trendline} trendline - The trendline associated with the series.\r\n   * @param {string} name - The name of the series.\r\n   * @param {string} fill - The fill color of the series.\r\n   * @param {number} width - The width of the series.\r\n   * @param {Chart} chart - The chart instance.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.setSeriesProperties = function (series, trendline, name, fill, width, chart) {\n    series.name = trendline.name;\n    series.xName = 'x';\n    series.yName = 'y';\n    series.fill = fill || 'blue';\n    series.width = width;\n    series.dashArray = trendline.dashArray;\n    series.clipRectElement = trendline.clipRectElement;\n    series.points = [];\n    series.enableTooltip = trendline.enableTooltip;\n    series.index = trendline.index;\n    series.sourceIndex = trendline.sourceIndex;\n    series.interior = series.fill;\n    series.animation = trendline.animation;\n    series.legendShape = 'HorizontalLine';\n    series.marker = trendline.marker;\n    series.category = 'TrendLine';\n    series.chart = chart;\n    series.xMin = Infinity;\n    series.xMax = -Infinity;\n    series.yMin = Infinity;\n    series.yMax = -Infinity;\n    series.xData = [];\n    series.yData = [];\n    trendline.targetSeries = series;\n    if (chart.isBlazor) {\n      trendline.targetSeries.border = {}; // To avoid console error in blazor\n      trendline.targetSeries.connector = {}; // To avoid console error in blazor\n    }\n  };\n  /**\r\n   * Creates elements for the specified trendline and adds them to the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Trendline} trendline - The trendline for which elements are created.\r\n   * @param {number} index - The index of the trendline.\r\n   * @param {Element} element - The parent element to which trendline elements are added.\r\n   * @param {Element} clipRectElement - The clip rect element associated with the chart.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.createTrendLineElements = function (chart, trendline, index, element, clipRectElement) {\n    trendline.trendLineElement = element;\n    trendline.targetSeries.clipRectElement = clipRectElement;\n    trendline.targetSeries.seriesElement = element;\n    if (chart.trendLineElements) {\n      chart.trendLineElements.appendChild(trendline.trendLineElement);\n    }\n  };\n  /**\r\n   * Retrieves the data point at the specified index from the series.\r\n   *\r\n   * @param {Object} x - The x-value of the data point.\r\n   * @param {Object} y - The y-value of the data point.\r\n   * @param {Series} series - The series from which to retrieve the data point.\r\n   * @param {number} index - The index of the data point in the series.\r\n   * @returns {Points} - The data point object.\r\n   */\n  Trendlines.prototype.getDataPoint = function (x, y, series, index) {\n    var trendPoint = new Points();\n    trendPoint.x = series.xAxis.valueType === 'DateTime' ? new Date(Number(x)) : x;\n    trendPoint.y = y;\n    trendPoint.xValue = Number(x);\n    trendPoint.color = series.fill;\n    trendPoint.index = index;\n    trendPoint.yValue = Number(y);\n    trendPoint.visible = true;\n    series.xMin = Math.min(series.xMin, trendPoint.xValue);\n    series.yMin = Math.min(series.yMin, trendPoint.yValue);\n    series.xMax = Math.max(series.xMax, trendPoint.xValue);\n    series.yMax = Math.max(series.yMax, trendPoint.yValue);\n    series.xData.push(trendPoint.xValue);\n    return trendPoint;\n  };\n  /**\r\n   * Finds the slope and intercept for the trendline.\r\n   *\r\n   * @param {number[]} xValues - The array of x-values.\r\n   * @param {number[]} yValues - The array of y-values.\r\n   * @param {Trendline} trendline - The trendline configuration.\r\n   * @param {Points[]} points - The data points for the trendline.\r\n   * @returns {SlopeIntercept} - The slope and intercept values.\r\n   */\n  Trendlines.prototype.findSlopeIntercept = function (xValues, yValues, trendline, points) {\n    var xAvg = 0;\n    var yAvg = 0;\n    var xyAvg = 0;\n    var xxAvg = 0;\n    var index = 0;\n    var slope = 0;\n    var intercept = 0;\n    while (index < points.length) {\n      // To fix trendline not rendered issue while Nan Value is provided for y values.\n      if (isNaN(yValues[index])) {\n        yValues[index] = (yValues[index - 1] + yValues[index + 1]) / 2;\n      }\n      xAvg += xValues[index];\n      yAvg += yValues[index];\n      xyAvg += xValues[index] * yValues[index];\n      xxAvg += xValues[index] * xValues[index];\n      index++;\n    }\n    var type = trendline.type;\n    if (trendline.intercept && (type === 'Linear' || type === 'Exponential')) {\n      intercept = trendline.intercept;\n      switch (type) {\n        case 'Linear':\n          slope = (xyAvg - trendline.intercept * xAvg) / xxAvg;\n          break;\n        case 'Exponential':\n          slope = (xyAvg - Math.log(Math.abs(trendline.intercept)) * xAvg) / xxAvg;\n          break;\n      }\n    } else {\n      slope = (points.length * xyAvg - xAvg * yAvg) / (points.length * xxAvg - xAvg * xAvg);\n      slope = type === 'Linear' ? slope : Math.abs(slope);\n      if (type === 'Exponential' || type === 'Power') {\n        intercept = Math.exp((yAvg - slope * xAvg) / points.length);\n      } else {\n        intercept = (yAvg - slope * xAvg) / points.length;\n      }\n    }\n    return {\n      slope: slope,\n      intercept: intercept\n    };\n  };\n  /**\r\n   * Initializes the data source for the trendline.\r\n   *\r\n   * @param {Trendline} trendline - The trendline configuration.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.initDataSource = function (trendline) {\n    var points = trendline.points;\n    if (points && points.length) {\n      //prepare data\n      var trendlineSeries = trendline.targetSeries;\n      switch (trendline.type) {\n        case 'Linear':\n          this.setLinearRange(points, trendline, trendlineSeries);\n          break;\n        case 'Exponential':\n          this.setExponentialRange(points, trendline, trendlineSeries);\n          break;\n        case 'MovingAverage':\n          this.setMovingAverageRange(points, trendline, trendlineSeries);\n          break;\n        case 'Polynomial':\n          this.setPolynomialRange(points, trendline, trendlineSeries);\n          break;\n        case 'Power':\n          this.setPowerRange(points, trendline, trendlineSeries);\n          break;\n        case 'Logarithmic':\n          this.setLogarithmicRange(points, trendline, trendlineSeries);\n          break;\n      }\n      if (trendline.type !== 'Linear' && trendline.type !== 'MovingAverage') {\n        trendlineSeries.chart.splineSeriesModule.findSplinePoint(trendlineSeries);\n      }\n    }\n  };\n  /**\r\n   * Sets the range for an exponential trendline.\r\n   *\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {Trendline} trendline - The exponential trendline configuration.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.setExponentialRange = function (points, trendline, series) {\n    var xValue = [];\n    var yValue = [];\n    var index = 0;\n    while (index < points.length) {\n      var point = points[index];\n      var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n      xValue.push(point.xValue);\n      yValue.push(yDataValue);\n      index++;\n    }\n    var slopeIntercept = this.findSlopeIntercept(xValue, yValue, trendline, points);\n    series.points = this.getExponentialPoints(trendline, points, xValue, yValue, series, slopeIntercept);\n  };\n  /**\r\n   * Sets the range for a logarithmic trendline.\r\n   *\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {Trendline} trendline - The logarithmic trendline configuration.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.setLogarithmicRange = function (points, trendline, series) {\n    var xLogValue = [];\n    var yLogValue = [];\n    var xPointsLgr = [];\n    var index = 0;\n    while (index < points.length) {\n      var point = points[index];\n      var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n      xPointsLgr.push(point.xValue);\n      xLogValue.push(xDataValue);\n      yLogValue.push(point.yValue);\n      index++;\n    }\n    var slopeIntercept = this.findSlopeIntercept(xLogValue, yLogValue, trendline, points);\n    series.points = this.getLogarithmicPoints(trendline, points, xPointsLgr, yLogValue, series, slopeIntercept);\n  };\n  /**\r\n   * Sets the range for a polynomial trendline.\r\n   *\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {Trendline} trendline - The polynomial trendline configuration.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.setPolynomialRange = function (points, trendline, series) {\n    var xPolyValues = [];\n    var yPolyValues = [];\n    var index = 0;\n    while (index < points.length) {\n      var point = points[index];\n      xPolyValues.push(point.xValue);\n      yPolyValues.push(point.yValue);\n      index++;\n    }\n    series.points = this.getPolynomialPoints(trendline, points, xPolyValues, yPolyValues, series);\n  };\n  /**\r\n   * Sets the range for a power trendline.\r\n   *\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {Trendline} trendline - The power trendline configuration.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.setPowerRange = function (points, trendline, series) {\n    var xValues = [];\n    var yValues = [];\n    var powerPoints = [];\n    var index = 0;\n    while (index < points.length) {\n      var point = points[index];\n      var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n      var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n      powerPoints.push(point.xValue);\n      xValues.push(xDataValue);\n      yValues.push(yDataValue);\n      index++;\n    }\n    var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n    series.points = this.getPowerPoints(trendline, points, powerPoints, yValues, series, slopeIntercept);\n  };\n  /**\r\n   * Sets the range for a linear trendline.\r\n   *\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {Trendline} trendline - The linear trendline configuration.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.setLinearRange = function (points, trendline, series) {\n    var xValues = [];\n    var yValues = [];\n    var index = 0;\n    while (index < points.length) {\n      var point = points[index];\n      xValues.push(point.xValue);\n      yValues.push(point.yValue);\n      index++;\n    }\n    var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n    series.points = this.getLinearPoints(trendline, points, xValues, yValues, series, slopeIntercept);\n  };\n  /**\r\n   * Sets the range for a moving average trendline.\r\n   *\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {Trendline} trendline - The moving average trendline configuration.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.setMovingAverageRange = function (points, trendline, series) {\n    var xValues = [];\n    var yValues = [];\n    var xAvgValues = [];\n    var index = 0;\n    while (index < points.length) {\n      var point = points[index];\n      xAvgValues.push(point.xValue);\n      xValues.push(index + 1);\n      yValues.push(point.yValue);\n      index++;\n    }\n    series.points = this.getMovingAveragePoints(trendline, points, xAvgValues, yValues, series);\n  };\n  /**\r\n   * Calculates the points for a logarithmic trendline.\r\n   *\r\n   * @param {Trendline} trendline - The logarithmic trendline configuration.\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {number[]} xValues - The x values of the data points.\r\n   * @param {number[]} yValues - The y values of the data points.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @param {SlopeIntercept} slopeInterceptLog - The slope and intercept of the logarithmic trendline.\r\n   * @returns {Points[]} - The calculated points for the logarithmic trendline.\r\n   */\n  Trendlines.prototype.getLogarithmicPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLog) {\n    var midPoint = Math.round(points.length / 2);\n    var pts = [];\n    var x1Log = xValues[0] - trendline.backwardForecast;\n    var x1 = x1Log ? Math.log(x1Log) : 0;\n    var y1Log = slopeInterceptLog.intercept + slopeInterceptLog.slope * x1;\n    var x2Log = xValues[midPoint - 1];\n    var x2 = x2Log ? Math.log(x2Log) : 0;\n    var y2Log = slopeInterceptLog.intercept + slopeInterceptLog.slope * x2;\n    var x3Log = xValues[xValues.length - 1] + trendline.forwardForecast;\n    var x3 = x3Log ? Math.log(x3Log) : 0;\n    var y3Log = slopeInterceptLog.intercept + slopeInterceptLog.slope * x3;\n    pts.push(this.getDataPoint(x1Log, y1Log, series, pts.length));\n    pts.push(this.getDataPoint(x2Log, y2Log, series, pts.length));\n    pts.push(this.getDataPoint(x3Log, y3Log, series, pts.length));\n    return pts;\n  };\n  /**\r\n   * Calculates the points for a power trendline.\r\n   *\r\n   * @param {Trendline} trendline - The power trendline configuration.\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {number[]} xValues - The x values of the data points.\r\n   * @param {number[]} yValues - The y values of the data points.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @param {SlopeIntercept} slopeInterceptPower - The slope and intercept of the power trendline.\r\n   * @returns {Points[]} - The calculated points for the power trendline.\r\n   */\n  Trendlines.prototype.getPowerPoints = function (trendline, points, xValues, yValues, series, slopeInterceptPower) {\n    var midPoint = Math.round(points.length / 2);\n    var pts = [];\n    var x1 = xValues[0] - trendline.backwardForecast;\n    x1 = x1 > -1 ? x1 : 0;\n    var y1 = slopeInterceptPower.intercept * Math.pow(x1, slopeInterceptPower.slope);\n    var x2 = xValues[midPoint - 1];\n    var y2 = slopeInterceptPower.intercept * Math.pow(x2, slopeInterceptPower.slope);\n    var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n    var y3 = slopeInterceptPower.intercept * Math.pow(x3, slopeInterceptPower.slope);\n    pts.push(this.getDataPoint(x1, y1, series, pts.length));\n    pts.push(this.getDataPoint(x2, y2, series, pts.length));\n    pts.push(this.getDataPoint(x3, y3, series, pts.length));\n    return pts;\n  };\n  /**\r\n   * Calculates the points for a polynomial trendline.\r\n   *\r\n   * @param {Trendline} trendline - The polynomial trendline configuration.\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {number[]} xValues - The x values of the data points.\r\n   * @param {number[]} yValues - The y values of the data points.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {Points[]} - The calculated points for the polynomial trendline.\r\n   */\n  Trendlines.prototype.getPolynomialPoints = function (trendline, points, xValues, yValues, series) {\n    var pts = [];\n    var polynomialOrder = points.length <= trendline.polynomialOrder ? points.length : trendline.polynomialOrder;\n    polynomialOrder = Math.max(2, polynomialOrder);\n    polynomialOrder = Math.min(6, polynomialOrder);\n    trendline.polynomialOrder = polynomialOrder;\n    trendline.polynomialSlopes = [];\n    trendline.polynomialSlopes.length = trendline.polynomialOrder + 1;\n    var index = 0;\n    while (index < xValues.length) {\n      var xVal = xValues[index];\n      var yVal = yValues[index];\n      var subIndex = 0;\n      while (subIndex <= trendline.polynomialOrder) {\n        if (!trendline.polynomialSlopes[subIndex]) {\n          trendline.polynomialSlopes[subIndex] = 0;\n        }\n        trendline.polynomialSlopes[subIndex] += Math.pow(xVal, subIndex) * yVal;\n        ++subIndex;\n      }\n      index++;\n    }\n    var numArray = [];\n    numArray.length = 1 + 2 * trendline.polynomialOrder;\n    var matrix = [];\n    matrix.length = trendline.polynomialOrder + 1;\n    var newIndex = 0;\n    while (newIndex < trendline.polynomialOrder + 1) {\n      matrix[newIndex] = [];\n      matrix[newIndex].length = 3;\n      newIndex++;\n    }\n    var nIndex = 0;\n    while (nIndex < xValues.length) {\n      var d = xValues[nIndex];\n      var num2 = 1.0;\n      var nIndex2 = 0;\n      while (nIndex2 < numArray.length) {\n        if (!numArray[nIndex2]) {\n          numArray[nIndex2] = 0;\n        }\n        numArray[nIndex2] += num2;\n        num2 *= d;\n        ++nIndex2;\n      }\n      ++nIndex;\n    }\n    var nnIndex = 0;\n    while (nnIndex <= trendline.polynomialOrder) {\n      var nnIndex2 = 0;\n      while (nnIndex2 <= trendline.polynomialOrder) {\n        matrix[nnIndex][nnIndex2] = numArray[nnIndex + nnIndex2];\n        ++nnIndex2;\n      }\n      ++nnIndex;\n    }\n    if (!this.gaussJordanElimination(matrix, trendline.polynomialSlopes)) {\n      trendline.polynomialSlopes = null;\n    }\n    pts = this.getPoints(trendline, points, xValues, series);\n    return pts;\n  };\n  /**\r\n   * Calculates the points for a moving average trendline.\r\n   *\r\n   * @param {Trendline} trendline - The moving average trendline configuration.\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {number[]} xValues - The x values of the data points.\r\n   * @param {number[]} yValues - The y values of the data points.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {Points[]} - The calculated points for the moving average trendline.\r\n   */\n  Trendlines.prototype.getMovingAveragePoints = function (trendline, points, xValues, yValues, series) {\n    var pts = [];\n    var period = trendline.period >= points.length ? points.length - 1 : trendline.period;\n    period = Math.max(2, period);\n    var index = 0;\n    var y;\n    var x;\n    var count;\n    var nullCount;\n    while (index < points.length - 1) {\n      y = count = nullCount = 0;\n      for (var j = index; count < period; j++) {\n        count++;\n        y += yValues[j];\n      }\n      y = period - nullCount < 0 ? null : y ? y / (period - nullCount) : y;\n      if (!isNullOrUndefined(y) && !isNaN(y)) {\n        x = xValues[period - 1 + index];\n        pts.push(this.getDataPoint(x, y, series, pts.length));\n      }\n      index++;\n    }\n    return pts;\n  };\n  /**\r\n   * Calculates the points for a linear trendline.\r\n   *\r\n   * @param {Trendline} trendline - The linear trendline configuration.\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {number[]} xValues - The x values of the data points.\r\n   * @param {number[]} yValues - The y values of the data points.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @param {SlopeIntercept} slopeInterceptLinear - The slope and intercept of the linear trendline.\r\n   * @returns {Points[]} - The calculated points for the linear trendline.\r\n   */\n  Trendlines.prototype.getLinearPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLinear) {\n    var pts = [];\n    var max = xValues.indexOf(Math.max.apply(null, xValues));\n    var min = xValues.indexOf(Math.min.apply(null, xValues));\n    var x1Linear = xValues[min] - trendline.backwardForecast;\n    var y1Linear = slopeInterceptLinear.slope * x1Linear + slopeInterceptLinear.intercept;\n    var x2Linear = xValues[max] + trendline.forwardForecast;\n    var y2Linear = slopeInterceptLinear.slope * x2Linear + slopeInterceptLinear.intercept;\n    pts.push(this.getDataPoint(x1Linear, y1Linear, series, pts.length));\n    pts.push(this.getDataPoint(x2Linear, y2Linear, series, pts.length));\n    return pts;\n  };\n  /**\r\n   * Calculates the points for an exponential trendline.\r\n   *\r\n   * @param {Trendline} trendline - The exponential trendline configuration.\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {number[]} xValues - The x values of the data points.\r\n   * @param {number[]} yValues - The y values of the data points.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @param {SlopeIntercept} slopeInterceptExp - The slope and intercept of the exponential trendline.\r\n   * @returns {Points[]} - The calculated points for the exponential trendline.\r\n   */\n  Trendlines.prototype.getExponentialPoints = function (trendline, points, xValues, yValues, series, slopeInterceptExp) {\n    var midPoint = Math.round(points.length / 2);\n    var ptsExp = [];\n    var x1 = xValues[0] - trendline.backwardForecast;\n    var y1 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x1);\n    var x2 = xValues[midPoint - 1];\n    var y2 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x2);\n    var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n    var y3 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x3);\n    ptsExp.push(this.getDataPoint(x1, y1, series, ptsExp.length));\n    ptsExp.push(this.getDataPoint(x2, y2, series, ptsExp.length));\n    ptsExp.push(this.getDataPoint(x3, y3, series, ptsExp.length));\n    return ptsExp;\n  };\n  /**\r\n   * Calculates the points for the specified type of trendline.\r\n   *\r\n   * @param {Trendline} trendline - The trendline configuration.\r\n   * @param {Points[]} points - The data points of the series.\r\n   * @param {number[]} xValues - The x values of the data points.\r\n   * @param {Series} series - The series to which the trendline belongs.\r\n   * @returns {Points[]} - The calculated points for the trendline.\r\n   */\n  Trendlines.prototype.getPoints = function (trendline, points, xValues, series) {\n    var polynomialSlopes = trendline.polynomialSlopes;\n    var pts = [];\n    var x1 = 1;\n    var index = 1;\n    var xValue;\n    var yValue;\n    // We have to sort the points in ascending order. Because, the data source of the series may be random order.\n    points.sort(function (a, b) {\n      return a.xValue - b.xValue;\n    });\n    xValues.sort(function (a, b) {\n      return a - b;\n    });\n    while (polynomialSlopes !== null && index <= polynomialSlopes.length) {\n      if (index === 1) {\n        xValue = xValues[0] - trendline.backwardForecast;\n        yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n        pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n      } else if (index === polynomialSlopes.length) {\n        xValue = xValues[points.length - 1] + trendline.forwardForecast;\n        yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n        pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n      } else {\n        x1 += (points.length + (series.xAxis.valueType === 'DateTime' ? index : trendline.forwardForecast)) / polynomialSlopes.length;\n        xValue = xValues[parseInt(x1.toString(), 10) - 1];\n        yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n        pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n      }\n      index++;\n    }\n    return pts;\n  };\n  /**\r\n   * Calculates the y value for the specified x value using polynomial regression.\r\n   *\r\n   * @param {number[]} slopes - The coefficients of the polynomial equation.\r\n   * @param {number} x - The x value for which to calculate the y value.\r\n   * @returns {number} - The calculated y value.\r\n   */\n  Trendlines.prototype.getPolynomialYValue = function (slopes, x) {\n    var sum = 0;\n    var index = 0;\n    while (index < slopes.length) {\n      sum += slopes[index] * Math.pow(x, index);\n      index++;\n    }\n    return sum;\n  };\n  /**\r\n   * Applies Gauss-Jordan elimination to solve a system of linear equations represented by a matrix.\r\n   * Updates the coefficients of the polynomial equation.\r\n   *\r\n   * @param {number[][]} matrix - The matrix representing the system of linear equations.\r\n   * @param {number[]} polynomialSlopes - The coefficients of the polynomial equation to be updated.\r\n   * @returns {boolean} - A boolean indicating whether the elimination process was successful.\r\n   */\n  Trendlines.prototype.gaussJordanElimination = function (matrix, polynomialSlopes) {\n    var length = matrix.length;\n    var numArray1 = [];\n    var numArray2 = [];\n    var numArray3 = [];\n    numArray1.length = length;\n    numArray2.length = length;\n    numArray3.length = length;\n    var index = 0;\n    while (index < length) {\n      numArray3[index] = 0;\n      ++index;\n    }\n    var index1 = 0;\n    while (index1 < length) {\n      var num1 = 0;\n      var index2 = 0;\n      var index3 = 0;\n      var index4 = 0;\n      while (index4 < length) {\n        if (numArray3[index4] !== 1) {\n          var index5 = 0;\n          while (index5 < length) {\n            if (numArray3[index5] === 0 && Math.abs(matrix[index4][index5]) >= num1) {\n              num1 = Math.abs(matrix[index4][index5]);\n              index2 = index4;\n              index3 = index5;\n            }\n            ++index5;\n          }\n        }\n        ++index4;\n      }\n      ++numArray3[index3];\n      if (index2 !== index3) {\n        var index4_1 = 0;\n        while (index4_1 < length) {\n          var num2 = matrix[index2][index4_1];\n          matrix[index2][index4_1] = matrix[index3][index4_1];\n          matrix[index3][index4_1] = num2;\n          ++index4_1;\n        }\n        var num3 = polynomialSlopes[index2];\n        polynomialSlopes[index2] = polynomialSlopes[index3];\n        polynomialSlopes[index3] = num3;\n      }\n      numArray2[index1] = index2;\n      numArray1[index1] = index3;\n      if (matrix[index3][index3] === 0.0) {\n        return false;\n      }\n      var num4 = 1.0 / matrix[index3][index3];\n      matrix[index3][index3] = 1.0;\n      var iindex4 = 0;\n      while (iindex4 < length) {\n        matrix[index3][iindex4] *= num4;\n        ++iindex4;\n      }\n      polynomialSlopes[index3] *= num4;\n      var iandex4 = 0;\n      while (iandex4 < length) {\n        if (iandex4 !== index3) {\n          var num2 = matrix[iandex4][index3];\n          matrix[iandex4][index3] = 0.0;\n          var index5 = 0;\n          while (index5 < length) {\n            matrix[iandex4][index5] -= matrix[index3][index5] * num2;\n            ++index5;\n          }\n          polynomialSlopes[iandex4] -= polynomialSlopes[index3] * num2;\n        }\n        ++iandex4;\n      }\n      ++index1;\n    }\n    var iindex1 = length - 1;\n    while (iindex1 >= 0) {\n      if (numArray2[iindex1] !== numArray1[iindex1]) {\n        var iindex2 = 0;\n        while (iindex2 < length) {\n          var num = matrix[iindex2][numArray2[iindex1]];\n          matrix[iindex2][numArray2[iindex1]] = matrix[iindex2][numArray1[iindex1]];\n          matrix[iindex2][numArray1[iindex1]] = num;\n          ++iindex2;\n        }\n      }\n      --iindex1;\n    }\n    return true;\n  };\n  /**\r\n   * Retrieves the elements required for rendering trendlines for a series in the chart.\r\n   *\r\n   * @param {Series} series - The series for which trendlines are to be rendered.\r\n   * @param {Chart} chart - The chart instance.\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.getTrendLineElements = function (series, chart) {\n    findClipRect(series);\n    var clipRect = series.clipRect;\n    var clipRectElement = chart.renderer.drawClipPath(new RectOption(chart.element.id + '_ChartTrendlineClipRect_' + series.index, 'transparent', {\n      width: 1,\n      color: 'Gray'\n    }, 1, {\n      x: 0,\n      y: 0,\n      width: clipRect.width,\n      height: clipRect.height\n    }));\n    var element = chart.renderer.createGroup({\n      'id': chart.element.id + 'TrendlineSeriesGroup' + series.index,\n      'transform': 'translate(' + clipRect.x + ',' + clipRect.y + ')',\n      'clip-path': 'url(#' + chart.element.id + '_ChartTrendlineClipRect_' + series.index + ')'\n    });\n    //defines the clip rect element\n    if (element) {\n      element.appendChild(clipRectElement);\n    }\n    for (var _i = 0, _a = series.trendlines; _i < _a.length; _i++) {\n      var trendline = _a[_i];\n      this.createTrendLineElements(chart, trendline, trendline.index, element, clipRectElement);\n    }\n  };\n  /**\r\n   * To destroy the trendline.\r\n   *\r\n   * @returns {void}\r\n   */\n  Trendlines.prototype.destroy = function () {\n    /**\r\n     * Destroys the Linear Trendline.\r\n     */\n  };\n  /**\r\n   * Get module name.\r\n   *\r\n   * @returns {string} - Returns the module name.\r\n   */\n  Trendlines.prototype.getModuleName = function () {\n    /**\r\n     * Returns the module name of the series.\r\n     */\n    return 'TrendLine';\n  };\n  return Trendlines;\n}();\nexport { Trendlines };","map":{"version":3,"names":["Series","Points","findClipRect","RectOption","isNullOrUndefined","Trendlines","prototype","initSeriesCollection","trendline","chart","trendLineSeries","type","setSeriesProperties","fill","width","series","name","xName","yName","dashArray","clipRectElement","points","enableTooltip","index","sourceIndex","interior","animation","legendShape","marker","category","xMin","Infinity","xMax","yMin","yMax","xData","yData","targetSeries","isBlazor","border","connector","createTrendLineElements","element","trendLineElement","seriesElement","trendLineElements","appendChild","getDataPoint","x","y","trendPoint","xAxis","valueType","Date","Number","xValue","color","yValue","visible","Math","min","max","push","findSlopeIntercept","xValues","yValues","xAvg","yAvg","xyAvg","xxAvg","slope","intercept","length","isNaN","log","abs","exp","initDataSource","trendlineSeries","setLinearRange","setExponentialRange","setMovingAverageRange","setPolynomialRange","setPowerRange","setLogarithmicRange","splineSeriesModule","findSplinePoint","point","yDataValue","slopeIntercept","getExponentialPoints","xLogValue","yLogValue","xPointsLgr","xDataValue","getLogarithmicPoints","xPolyValues","yPolyValues","getPolynomialPoints","powerPoints","getPowerPoints","getLinearPoints","xAvgValues","getMovingAveragePoints","slopeInterceptLog","midPoint","round","pts","x1Log","backwardForecast","x1","y1Log","x2Log","x2","y2Log","x3Log","forwardForecast","x3","y3Log","slopeInterceptPower","y1","pow","y2","y3","polynomialOrder","polynomialSlopes","xVal","yVal","subIndex","numArray","matrix","newIndex","nIndex","d","num2","nIndex2","nnIndex","nnIndex2","gaussJordanElimination","getPoints","period","count","nullCount","j","slopeInterceptLinear","indexOf","apply","x1Linear","y1Linear","x2Linear","y2Linear","slopeInterceptExp","ptsExp","sort","a","b","getPolynomialYValue","parseInt","toString","slopes","sum","numArray1","numArray2","numArray3","index1","num1","index2","index3","index4","index5","index4_1","num3","num4","iindex4","iandex4","iindex1","iindex2","num","getTrendLineElements","clipRect","renderer","drawClipPath","id","height","createGroup","_i","_a","trendlines","destroy","getModuleName"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/chart/trend-lines/trend-line.js"],"sourcesContent":["import { Series, Points } from '../series/chart-series';\r\nimport { findClipRect, RectOption } from '../../common/utils/helper';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\n/**\r\n * `Trendline` module is used to render 6 types of trendlines in chart.\r\n */\r\nvar Trendlines = /** @class */ (function () {\r\n    function Trendlines() {\r\n    }\r\n    /**\r\n     * Initializes the series collection for the specified trendline in the chart.\r\n     *\r\n     * @param {Trendline} trendline - The trendline for which the series collection is initialized.\r\n     * @param {Chart} chart - The chart instance.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.initSeriesCollection = function (trendline, chart) {\r\n        var trendLineSeries = new Series(trendline, 'targetSeries', {}, true);\r\n        if (trendline.type === 'Linear' || trendline.type === 'MovingAverage') {\r\n            trendLineSeries.type = 'Line';\r\n        }\r\n        else {\r\n            trendLineSeries.type = 'Spline';\r\n        }\r\n        this.setSeriesProperties(trendLineSeries, trendline, trendline.type, trendline.fill, trendline.width, chart);\r\n    };\r\n    /**\r\n     * Sets the properties for the specified series related to the specified trendline.\r\n     *\r\n     * @param {Series} series - The series to which properties are applied.\r\n     * @param {Trendline} trendline - The trendline associated with the series.\r\n     * @param {string} name - The name of the series.\r\n     * @param {string} fill - The fill color of the series.\r\n     * @param {number} width - The width of the series.\r\n     * @param {Chart} chart - The chart instance.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.setSeriesProperties = function (series, trendline, name, fill, width, chart) {\r\n        series.name = trendline.name;\r\n        series.xName = 'x';\r\n        series.yName = 'y';\r\n        series.fill = fill || 'blue';\r\n        series.width = width;\r\n        series.dashArray = trendline.dashArray;\r\n        series.clipRectElement = trendline.clipRectElement;\r\n        series.points = [];\r\n        series.enableTooltip = trendline.enableTooltip;\r\n        series.index = trendline.index;\r\n        series.sourceIndex = trendline.sourceIndex;\r\n        series.interior = series.fill;\r\n        series.animation = trendline.animation;\r\n        series.legendShape = 'HorizontalLine';\r\n        series.marker = trendline.marker;\r\n        series.category = 'TrendLine';\r\n        series.chart = chart;\r\n        series.xMin = Infinity;\r\n        series.xMax = -Infinity;\r\n        series.yMin = Infinity;\r\n        series.yMax = -Infinity;\r\n        series.xData = [];\r\n        series.yData = [];\r\n        trendline.targetSeries = series;\r\n        if (chart.isBlazor) {\r\n            trendline.targetSeries.border = {}; // To avoid console error in blazor\r\n            trendline.targetSeries.connector = {}; // To avoid console error in blazor\r\n        }\r\n    };\r\n    /**\r\n     * Creates elements for the specified trendline and adds them to the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Trendline} trendline - The trendline for which elements are created.\r\n     * @param {number} index - The index of the trendline.\r\n     * @param {Element} element - The parent element to which trendline elements are added.\r\n     * @param {Element} clipRectElement - The clip rect element associated with the chart.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.createTrendLineElements = function (chart, trendline, index, element, clipRectElement) {\r\n        trendline.trendLineElement = element;\r\n        trendline.targetSeries.clipRectElement = clipRectElement;\r\n        trendline.targetSeries.seriesElement = element;\r\n        if (chart.trendLineElements) {\r\n            chart.trendLineElements.appendChild(trendline.trendLineElement);\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves the data point at the specified index from the series.\r\n     *\r\n     * @param {Object} x - The x-value of the data point.\r\n     * @param {Object} y - The y-value of the data point.\r\n     * @param {Series} series - The series from which to retrieve the data point.\r\n     * @param {number} index - The index of the data point in the series.\r\n     * @returns {Points} - The data point object.\r\n     */\r\n    Trendlines.prototype.getDataPoint = function (x, y, series, index) {\r\n        var trendPoint = new Points();\r\n        trendPoint.x = series.xAxis.valueType === 'DateTime' ? new Date(Number(x)) : x;\r\n        trendPoint.y = y;\r\n        trendPoint.xValue = Number(x);\r\n        trendPoint.color = series.fill;\r\n        trendPoint.index = index;\r\n        trendPoint.yValue = Number(y);\r\n        trendPoint.visible = true;\r\n        series.xMin = Math.min(series.xMin, trendPoint.xValue);\r\n        series.yMin = Math.min(series.yMin, trendPoint.yValue);\r\n        series.xMax = Math.max(series.xMax, trendPoint.xValue);\r\n        series.yMax = Math.max(series.yMax, trendPoint.yValue);\r\n        series.xData.push(trendPoint.xValue);\r\n        return trendPoint;\r\n    };\r\n    /**\r\n     * Finds the slope and intercept for the trendline.\r\n     *\r\n     * @param {number[]} xValues - The array of x-values.\r\n     * @param {number[]} yValues - The array of y-values.\r\n     * @param {Trendline} trendline - The trendline configuration.\r\n     * @param {Points[]} points - The data points for the trendline.\r\n     * @returns {SlopeIntercept} - The slope and intercept values.\r\n     */\r\n    Trendlines.prototype.findSlopeIntercept = function (xValues, yValues, trendline, points) {\r\n        var xAvg = 0;\r\n        var yAvg = 0;\r\n        var xyAvg = 0;\r\n        var xxAvg = 0;\r\n        var index = 0;\r\n        var slope = 0;\r\n        var intercept = 0;\r\n        while (index < points.length) {\r\n            // To fix trendline not rendered issue while Nan Value is provided for y values.\r\n            if (isNaN(yValues[index])) {\r\n                yValues[index] = ((yValues[index - 1] + yValues[index + 1]) / 2);\r\n            }\r\n            xAvg += xValues[index];\r\n            yAvg += yValues[index];\r\n            xyAvg += xValues[index] * yValues[index];\r\n            xxAvg += xValues[index] * xValues[index];\r\n            index++;\r\n        }\r\n        var type = trendline.type;\r\n        if (trendline.intercept && (type === 'Linear' || type === 'Exponential')) {\r\n            intercept = trendline.intercept;\r\n            switch (type) {\r\n                case 'Linear':\r\n                    slope = ((xyAvg) - (trendline.intercept * xAvg)) / xxAvg;\r\n                    break;\r\n                case 'Exponential':\r\n                    slope = ((xyAvg) - (Math.log(Math.abs(trendline.intercept)) * xAvg)) / xxAvg;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            slope = ((points.length * xyAvg) - (xAvg * yAvg)) / ((points.length * xxAvg) - (xAvg * xAvg));\r\n            slope = (type === 'Linear' ? slope : Math.abs(slope));\r\n            if (type === 'Exponential' || type === 'Power') {\r\n                intercept = Math.exp((yAvg - (slope * xAvg)) / points.length);\r\n            }\r\n            else {\r\n                intercept = (yAvg - (slope * xAvg)) / points.length;\r\n            }\r\n        }\r\n        return { slope: slope, intercept: intercept };\r\n    };\r\n    /**\r\n     * Initializes the data source for the trendline.\r\n     *\r\n     * @param {Trendline} trendline - The trendline configuration.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.initDataSource = function (trendline) {\r\n        var points = trendline.points;\r\n        if (points && points.length) {\r\n            //prepare data\r\n            var trendlineSeries = trendline.targetSeries;\r\n            switch (trendline.type) {\r\n                case 'Linear':\r\n                    this.setLinearRange(points, trendline, trendlineSeries);\r\n                    break;\r\n                case 'Exponential':\r\n                    this.setExponentialRange(points, trendline, trendlineSeries);\r\n                    break;\r\n                case 'MovingAverage':\r\n                    this.setMovingAverageRange(points, trendline, trendlineSeries);\r\n                    break;\r\n                case 'Polynomial':\r\n                    this.setPolynomialRange(points, trendline, trendlineSeries);\r\n                    break;\r\n                case 'Power':\r\n                    this.setPowerRange(points, trendline, trendlineSeries);\r\n                    break;\r\n                case 'Logarithmic':\r\n                    this.setLogarithmicRange(points, trendline, trendlineSeries);\r\n                    break;\r\n            }\r\n            if (trendline.type !== 'Linear' && trendline.type !== 'MovingAverage') {\r\n                trendlineSeries.chart.splineSeriesModule.findSplinePoint(trendlineSeries);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the range for an exponential trendline.\r\n     *\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {Trendline} trendline - The exponential trendline configuration.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.setExponentialRange = function (points, trendline, series) {\r\n        var xValue = [];\r\n        var yValue = [];\r\n        var index = 0;\r\n        while (index < points.length) {\r\n            var point = points[index];\r\n            var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\r\n            xValue.push(point.xValue);\r\n            yValue.push(yDataValue);\r\n            index++;\r\n        }\r\n        var slopeIntercept = this.findSlopeIntercept(xValue, yValue, trendline, points);\r\n        series.points = this.getExponentialPoints(trendline, points, xValue, yValue, series, slopeIntercept);\r\n    };\r\n    /**\r\n     * Sets the range for a logarithmic trendline.\r\n     *\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {Trendline} trendline - The logarithmic trendline configuration.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.setLogarithmicRange = function (points, trendline, series) {\r\n        var xLogValue = [];\r\n        var yLogValue = [];\r\n        var xPointsLgr = [];\r\n        var index = 0;\r\n        while (index < points.length) {\r\n            var point = points[index];\r\n            var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\r\n            xPointsLgr.push(point.xValue);\r\n            xLogValue.push(xDataValue);\r\n            yLogValue.push(point.yValue);\r\n            index++;\r\n        }\r\n        var slopeIntercept = this.findSlopeIntercept(xLogValue, yLogValue, trendline, points);\r\n        series.points = this.getLogarithmicPoints(trendline, points, xPointsLgr, yLogValue, series, slopeIntercept);\r\n    };\r\n    /**\r\n     * Sets the range for a polynomial trendline.\r\n     *\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {Trendline} trendline - The polynomial trendline configuration.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.setPolynomialRange = function (points, trendline, series) {\r\n        var xPolyValues = [];\r\n        var yPolyValues = [];\r\n        var index = 0;\r\n        while (index < points.length) {\r\n            var point = points[index];\r\n            xPolyValues.push(point.xValue);\r\n            yPolyValues.push(point.yValue);\r\n            index++;\r\n        }\r\n        series.points = this.getPolynomialPoints(trendline, points, xPolyValues, yPolyValues, series);\r\n    };\r\n    /**\r\n     * Sets the range for a power trendline.\r\n     *\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {Trendline} trendline - The power trendline configuration.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.setPowerRange = function (points, trendline, series) {\r\n        var xValues = [];\r\n        var yValues = [];\r\n        var powerPoints = [];\r\n        var index = 0;\r\n        while (index < points.length) {\r\n            var point = points[index];\r\n            var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\r\n            var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\r\n            powerPoints.push(point.xValue);\r\n            xValues.push(xDataValue);\r\n            yValues.push(yDataValue);\r\n            index++;\r\n        }\r\n        var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\r\n        series.points = this.getPowerPoints(trendline, points, powerPoints, yValues, series, slopeIntercept);\r\n    };\r\n    /**\r\n     * Sets the range for a linear trendline.\r\n     *\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {Trendline} trendline - The linear trendline configuration.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.setLinearRange = function (points, trendline, series) {\r\n        var xValues = [];\r\n        var yValues = [];\r\n        var index = 0;\r\n        while (index < points.length) {\r\n            var point = points[index];\r\n            xValues.push(point.xValue);\r\n            yValues.push(point.yValue);\r\n            index++;\r\n        }\r\n        var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\r\n        series.points = this.getLinearPoints(trendline, points, xValues, yValues, series, slopeIntercept);\r\n    };\r\n    /**\r\n     * Sets the range for a moving average trendline.\r\n     *\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {Trendline} trendline - The moving average trendline configuration.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.setMovingAverageRange = function (points, trendline, series) {\r\n        var xValues = [];\r\n        var yValues = [];\r\n        var xAvgValues = [];\r\n        var index = 0;\r\n        while (index < points.length) {\r\n            var point = points[index];\r\n            xAvgValues.push(point.xValue);\r\n            xValues.push(index + 1);\r\n            yValues.push(point.yValue);\r\n            index++;\r\n        }\r\n        series.points = this.getMovingAveragePoints(trendline, points, xAvgValues, yValues, series);\r\n    };\r\n    /**\r\n     * Calculates the points for a logarithmic trendline.\r\n     *\r\n     * @param {Trendline} trendline - The logarithmic trendline configuration.\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {number[]} xValues - The x values of the data points.\r\n     * @param {number[]} yValues - The y values of the data points.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @param {SlopeIntercept} slopeInterceptLog - The slope and intercept of the logarithmic trendline.\r\n     * @returns {Points[]} - The calculated points for the logarithmic trendline.\r\n     */\r\n    Trendlines.prototype.getLogarithmicPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLog) {\r\n        var midPoint = Math.round((points.length / 2));\r\n        var pts = [];\r\n        var x1Log = xValues[0] - trendline.backwardForecast;\r\n        var x1 = x1Log ? Math.log(x1Log) : 0;\r\n        var y1Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x1);\r\n        var x2Log = xValues[midPoint - 1];\r\n        var x2 = x2Log ? Math.log(x2Log) : 0;\r\n        var y2Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x2);\r\n        var x3Log = xValues[xValues.length - 1] + trendline.forwardForecast;\r\n        var x3 = x3Log ? Math.log(x3Log) : 0;\r\n        var y3Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x3);\r\n        pts.push(this.getDataPoint(x1Log, y1Log, series, pts.length));\r\n        pts.push(this.getDataPoint(x2Log, y2Log, series, pts.length));\r\n        pts.push(this.getDataPoint(x3Log, y3Log, series, pts.length));\r\n        return pts;\r\n    };\r\n    /**\r\n     * Calculates the points for a power trendline.\r\n     *\r\n     * @param {Trendline} trendline - The power trendline configuration.\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {number[]} xValues - The x values of the data points.\r\n     * @param {number[]} yValues - The y values of the data points.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @param {SlopeIntercept} slopeInterceptPower - The slope and intercept of the power trendline.\r\n     * @returns {Points[]} - The calculated points for the power trendline.\r\n     */\r\n    Trendlines.prototype.getPowerPoints = function (trendline, points, xValues, yValues, series, slopeInterceptPower) {\r\n        var midPoint = Math.round((points.length / 2));\r\n        var pts = [];\r\n        var x1 = xValues[0] - trendline.backwardForecast;\r\n        x1 = x1 > -1 ? x1 : 0;\r\n        var y1 = slopeInterceptPower.intercept * Math.pow(x1, slopeInterceptPower.slope);\r\n        var x2 = xValues[midPoint - 1];\r\n        var y2 = slopeInterceptPower.intercept * Math.pow(x2, slopeInterceptPower.slope);\r\n        var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\r\n        var y3 = slopeInterceptPower.intercept * Math.pow(x3, slopeInterceptPower.slope);\r\n        pts.push(this.getDataPoint(x1, y1, series, pts.length));\r\n        pts.push(this.getDataPoint(x2, y2, series, pts.length));\r\n        pts.push(this.getDataPoint(x3, y3, series, pts.length));\r\n        return pts;\r\n    };\r\n    /**\r\n     * Calculates the points for a polynomial trendline.\r\n     *\r\n     * @param {Trendline} trendline - The polynomial trendline configuration.\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {number[]} xValues - The x values of the data points.\r\n     * @param {number[]} yValues - The y values of the data points.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {Points[]} - The calculated points for the polynomial trendline.\r\n     */\r\n    Trendlines.prototype.getPolynomialPoints = function (trendline, points, xValues, yValues, series) {\r\n        var pts = [];\r\n        var polynomialOrder = points.length <= trendline.polynomialOrder ? points.length : trendline.polynomialOrder;\r\n        polynomialOrder = Math.max(2, polynomialOrder);\r\n        polynomialOrder = Math.min(6, polynomialOrder);\r\n        trendline.polynomialOrder = polynomialOrder;\r\n        trendline.polynomialSlopes = [];\r\n        trendline.polynomialSlopes.length = trendline.polynomialOrder + 1;\r\n        var index = 0;\r\n        while (index < xValues.length) {\r\n            var xVal = xValues[index];\r\n            var yVal = yValues[index];\r\n            var subIndex = 0;\r\n            while (subIndex <= trendline.polynomialOrder) {\r\n                if (!trendline.polynomialSlopes[subIndex]) {\r\n                    trendline.polynomialSlopes[subIndex] = 0;\r\n                }\r\n                trendline.polynomialSlopes[subIndex] += Math.pow(xVal, subIndex) * yVal;\r\n                ++subIndex;\r\n            }\r\n            index++;\r\n        }\r\n        var numArray = [];\r\n        numArray.length = 1 + 2 * trendline.polynomialOrder;\r\n        var matrix = [];\r\n        matrix.length = trendline.polynomialOrder + 1;\r\n        var newIndex = 0;\r\n        while (newIndex < (trendline.polynomialOrder + 1)) {\r\n            matrix[newIndex] = [];\r\n            matrix[newIndex].length = 3;\r\n            newIndex++;\r\n        }\r\n        var nIndex = 0;\r\n        while (nIndex < xValues.length) {\r\n            var d = xValues[nIndex];\r\n            var num2 = 1.0;\r\n            var nIndex2 = 0;\r\n            while (nIndex2 < numArray.length) {\r\n                if (!numArray[nIndex2]) {\r\n                    numArray[nIndex2] = 0;\r\n                }\r\n                numArray[nIndex2] += num2;\r\n                num2 *= d;\r\n                ++nIndex2;\r\n            }\r\n            ++nIndex;\r\n        }\r\n        var nnIndex = 0;\r\n        while (nnIndex <= trendline.polynomialOrder) {\r\n            var nnIndex2 = 0;\r\n            while (nnIndex2 <= trendline.polynomialOrder) {\r\n                matrix[nnIndex][nnIndex2] = numArray[nnIndex + nnIndex2];\r\n                ++nnIndex2;\r\n            }\r\n            ++nnIndex;\r\n        }\r\n        if (!this.gaussJordanElimination(matrix, trendline.polynomialSlopes)) {\r\n            trendline.polynomialSlopes = null;\r\n        }\r\n        pts = this.getPoints(trendline, points, xValues, series);\r\n        return pts;\r\n    };\r\n    /**\r\n     * Calculates the points for a moving average trendline.\r\n     *\r\n     * @param {Trendline} trendline - The moving average trendline configuration.\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {number[]} xValues - The x values of the data points.\r\n     * @param {number[]} yValues - The y values of the data points.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {Points[]} - The calculated points for the moving average trendline.\r\n     */\r\n    Trendlines.prototype.getMovingAveragePoints = function (trendline, points, xValues, yValues, series) {\r\n        var pts = [];\r\n        var period = trendline.period >= points.length ? points.length - 1 : trendline.period;\r\n        period = Math.max(2, period);\r\n        var index = 0;\r\n        var y;\r\n        var x;\r\n        var count;\r\n        var nullCount;\r\n        while (index < points.length - 1) {\r\n            y = count = nullCount = 0;\r\n            for (var j = index; count < period; j++) {\r\n                count++;\r\n                y += yValues[j];\r\n            }\r\n            y = period - nullCount < 0 ? null : y ? y / (period - nullCount) : y;\r\n            if (!isNullOrUndefined(y) && !isNaN(y)) {\r\n                x = xValues[period - 1 + index];\r\n                pts.push(this.getDataPoint(x, y, series, pts.length));\r\n            }\r\n            index++;\r\n        }\r\n        return pts;\r\n    };\r\n    /**\r\n     * Calculates the points for a linear trendline.\r\n     *\r\n     * @param {Trendline} trendline - The linear trendline configuration.\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {number[]} xValues - The x values of the data points.\r\n     * @param {number[]} yValues - The y values of the data points.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @param {SlopeIntercept} slopeInterceptLinear - The slope and intercept of the linear trendline.\r\n     * @returns {Points[]} - The calculated points for the linear trendline.\r\n     */\r\n    Trendlines.prototype.getLinearPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLinear) {\r\n        var pts = [];\r\n        var max = xValues.indexOf(Math.max.apply(null, xValues));\r\n        var min = xValues.indexOf(Math.min.apply(null, xValues));\r\n        var x1Linear = xValues[min] - trendline.backwardForecast;\r\n        var y1Linear = slopeInterceptLinear.slope * x1Linear + slopeInterceptLinear.intercept;\r\n        var x2Linear = xValues[max] + trendline.forwardForecast;\r\n        var y2Linear = slopeInterceptLinear.slope * x2Linear + slopeInterceptLinear.intercept;\r\n        pts.push(this.getDataPoint(x1Linear, y1Linear, series, pts.length));\r\n        pts.push(this.getDataPoint(x2Linear, y2Linear, series, pts.length));\r\n        return pts;\r\n    };\r\n    /**\r\n     * Calculates the points for an exponential trendline.\r\n     *\r\n     * @param {Trendline} trendline - The exponential trendline configuration.\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {number[]} xValues - The x values of the data points.\r\n     * @param {number[]} yValues - The y values of the data points.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @param {SlopeIntercept} slopeInterceptExp - The slope and intercept of the exponential trendline.\r\n     * @returns {Points[]} - The calculated points for the exponential trendline.\r\n     */\r\n    Trendlines.prototype.getExponentialPoints = function (trendline, points, xValues, yValues, series, slopeInterceptExp) {\r\n        var midPoint = Math.round((points.length / 2));\r\n        var ptsExp = [];\r\n        var x1 = xValues[0] - trendline.backwardForecast;\r\n        var y1 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x1);\r\n        var x2 = xValues[midPoint - 1];\r\n        var y2 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x2);\r\n        var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\r\n        var y3 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x3);\r\n        ptsExp.push(this.getDataPoint(x1, y1, series, ptsExp.length));\r\n        ptsExp.push(this.getDataPoint(x2, y2, series, ptsExp.length));\r\n        ptsExp.push(this.getDataPoint(x3, y3, series, ptsExp.length));\r\n        return ptsExp;\r\n    };\r\n    /**\r\n     * Calculates the points for the specified type of trendline.\r\n     *\r\n     * @param {Trendline} trendline - The trendline configuration.\r\n     * @param {Points[]} points - The data points of the series.\r\n     * @param {number[]} xValues - The x values of the data points.\r\n     * @param {Series} series - The series to which the trendline belongs.\r\n     * @returns {Points[]} - The calculated points for the trendline.\r\n     */\r\n    Trendlines.prototype.getPoints = function (trendline, points, xValues, series) {\r\n        var polynomialSlopes = trendline.polynomialSlopes;\r\n        var pts = [];\r\n        var x1 = 1;\r\n        var index = 1;\r\n        var xValue;\r\n        var yValue;\r\n        // We have to sort the points in ascending order. Because, the data source of the series may be random order.\r\n        points.sort(function (a, b) { return a.xValue - b.xValue; });\r\n        xValues.sort(function (a, b) { return a - b; });\r\n        while (polynomialSlopes !== null && index <= polynomialSlopes.length) {\r\n            if (index === 1) {\r\n                xValue = xValues[0] - trendline.backwardForecast;\r\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\r\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\r\n            }\r\n            else if (index === polynomialSlopes.length) {\r\n                xValue = xValues[points.length - 1] + trendline.forwardForecast;\r\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\r\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\r\n            }\r\n            else {\r\n                x1 += (points.length + (series.xAxis.valueType === 'DateTime' ? index : trendline.forwardForecast)) / polynomialSlopes.length;\r\n                xValue = xValues[parseInt(x1.toString(), 10) - 1];\r\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\r\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\r\n            }\r\n            index++;\r\n        }\r\n        return pts;\r\n    };\r\n    /**\r\n     * Calculates the y value for the specified x value using polynomial regression.\r\n     *\r\n     * @param {number[]} slopes - The coefficients of the polynomial equation.\r\n     * @param {number} x - The x value for which to calculate the y value.\r\n     * @returns {number} - The calculated y value.\r\n     */\r\n    Trendlines.prototype.getPolynomialYValue = function (slopes, x) {\r\n        var sum = 0;\r\n        var index = 0;\r\n        while (index < slopes.length) {\r\n            sum += slopes[index] * Math.pow(x, index);\r\n            index++;\r\n        }\r\n        return sum;\r\n    };\r\n    /**\r\n     * Applies Gauss-Jordan elimination to solve a system of linear equations represented by a matrix.\r\n     * Updates the coefficients of the polynomial equation.\r\n     *\r\n     * @param {number[][]} matrix - The matrix representing the system of linear equations.\r\n     * @param {number[]} polynomialSlopes - The coefficients of the polynomial equation to be updated.\r\n     * @returns {boolean} - A boolean indicating whether the elimination process was successful.\r\n     */\r\n    Trendlines.prototype.gaussJordanElimination = function (matrix, polynomialSlopes) {\r\n        var length = matrix.length;\r\n        var numArray1 = [];\r\n        var numArray2 = [];\r\n        var numArray3 = [];\r\n        numArray1.length = length;\r\n        numArray2.length = length;\r\n        numArray3.length = length;\r\n        var index = 0;\r\n        while (index < length) {\r\n            numArray3[index] = 0;\r\n            ++index;\r\n        }\r\n        var index1 = 0;\r\n        while (index1 < length) {\r\n            var num1 = 0;\r\n            var index2 = 0;\r\n            var index3 = 0;\r\n            var index4 = 0;\r\n            while (index4 < length) {\r\n                if (numArray3[index4] !== 1) {\r\n                    var index5 = 0;\r\n                    while (index5 < length) {\r\n                        if (numArray3[index5] === 0 && Math.abs(matrix[index4][index5]) >= num1) {\r\n                            num1 = Math.abs(matrix[index4][index5]);\r\n                            index2 = index4;\r\n                            index3 = index5;\r\n                        }\r\n                        ++index5;\r\n                    }\r\n                }\r\n                ++index4;\r\n            }\r\n            ++numArray3[index3];\r\n            if (index2 !== index3) {\r\n                var index4_1 = 0;\r\n                while (index4_1 < length) {\r\n                    var num2 = matrix[index2][index4_1];\r\n                    matrix[index2][index4_1] = matrix[index3][index4_1];\r\n                    matrix[index3][index4_1] = num2;\r\n                    ++index4_1;\r\n                }\r\n                var num3 = polynomialSlopes[index2];\r\n                polynomialSlopes[index2] = polynomialSlopes[index3];\r\n                polynomialSlopes[index3] = num3;\r\n            }\r\n            numArray2[index1] = index2;\r\n            numArray1[index1] = index3;\r\n            if (matrix[index3][index3] === 0.0) {\r\n                return false;\r\n            }\r\n            var num4 = 1.0 / matrix[index3][index3];\r\n            matrix[index3][index3] = 1.0;\r\n            var iindex4 = 0;\r\n            while (iindex4 < length) {\r\n                matrix[index3][iindex4] *= num4;\r\n                ++iindex4;\r\n            }\r\n            polynomialSlopes[index3] *= num4;\r\n            var iandex4 = 0;\r\n            while (iandex4 < length) {\r\n                if (iandex4 !== index3) {\r\n                    var num2 = matrix[iandex4][index3];\r\n                    matrix[iandex4][index3] = 0.0;\r\n                    var index5 = 0;\r\n                    while (index5 < length) {\r\n                        matrix[iandex4][index5] -= matrix[index3][index5] * num2;\r\n                        ++index5;\r\n                    }\r\n                    polynomialSlopes[iandex4] -= polynomialSlopes[index3] * num2;\r\n                }\r\n                ++iandex4;\r\n            }\r\n            ++index1;\r\n        }\r\n        var iindex1 = length - 1;\r\n        while (iindex1 >= 0) {\r\n            if (numArray2[iindex1] !== numArray1[iindex1]) {\r\n                var iindex2 = 0;\r\n                while (iindex2 < length) {\r\n                    var num = matrix[iindex2][numArray2[iindex1]];\r\n                    matrix[iindex2][numArray2[iindex1]] = matrix[iindex2][numArray1[iindex1]];\r\n                    matrix[iindex2][numArray1[iindex1]] = num;\r\n                    ++iindex2;\r\n                }\r\n            }\r\n            --iindex1;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Retrieves the elements required for rendering trendlines for a series in the chart.\r\n     *\r\n     * @param {Series} series - The series for which trendlines are to be rendered.\r\n     * @param {Chart} chart - The chart instance.\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.getTrendLineElements = function (series, chart) {\r\n        findClipRect(series);\r\n        var clipRect = series.clipRect;\r\n        var clipRectElement = chart.renderer.drawClipPath(new RectOption(chart.element.id + '_ChartTrendlineClipRect_' + series.index, 'transparent', { width: 1, color: 'Gray' }, 1, {\r\n            x: 0, y: 0, width: clipRect.width,\r\n            height: clipRect.height\r\n        }));\r\n        var element = chart.renderer.createGroup({\r\n            'id': chart.element.id + 'TrendlineSeriesGroup' + series.index,\r\n            'transform': 'translate(' + clipRect.x + ',' + clipRect.y + ')',\r\n            'clip-path': 'url(#' + chart.element.id + '_ChartTrendlineClipRect_' + series.index + ')'\r\n        });\r\n        //defines the clip rect element\r\n        if (element) {\r\n            element.appendChild(clipRectElement);\r\n        }\r\n        for (var _i = 0, _a = series.trendlines; _i < _a.length; _i++) {\r\n            var trendline = _a[_i];\r\n            this.createTrendLineElements(chart, trendline, trendline.index, element, clipRectElement);\r\n        }\r\n    };\r\n    /**\r\n     * To destroy the trendline.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    Trendlines.prototype.destroy = function () {\r\n        /**\r\n         * Destroys the Linear Trendline.\r\n         */\r\n    };\r\n    /**\r\n     * Get module name.\r\n     *\r\n     * @returns {string} - Returns the module name.\r\n     */\r\n    Trendlines.prototype.getModuleName = function () {\r\n        /**\r\n         * Returns the module name of the series.\r\n         */\r\n        return 'TrendLine';\r\n    };\r\n    return Trendlines;\r\n}());\r\nexport { Trendlines };\r\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,MAAM,QAAQ,wBAAwB;AACvD,SAASC,YAAY,EAAEC,UAAU,QAAQ,2BAA2B;AACpE,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC,SAASA,UAAUA,CAAA,EAAG,CACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIA,UAAU,CAACC,SAAS,CAACC,oBAAoB,GAAG,UAAUC,SAAS,EAAEC,KAAK,EAAE;IACpE,IAAIC,eAAe,GAAG,IAAIV,MAAM,CAACQ,SAAS,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;IACrE,IAAIA,SAAS,CAACG,IAAI,KAAK,QAAQ,IAAIH,SAAS,CAACG,IAAI,KAAK,eAAe,EAAE;MACnED,eAAe,CAACC,IAAI,GAAG,MAAM;IACjC,CAAC,MACI;MACDD,eAAe,CAACC,IAAI,GAAG,QAAQ;IACnC;IACA,IAAI,CAACC,mBAAmB,CAACF,eAAe,EAAEF,SAAS,EAAEA,SAAS,CAACG,IAAI,EAAEH,SAAS,CAACK,IAAI,EAAEL,SAAS,CAACM,KAAK,EAAEL,KAAK,CAAC;EAChH,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,UAAU,CAACC,SAAS,CAACM,mBAAmB,GAAG,UAAUG,MAAM,EAAEP,SAAS,EAAEQ,IAAI,EAAEH,IAAI,EAAEC,KAAK,EAAEL,KAAK,EAAE;IAC9FM,MAAM,CAACC,IAAI,GAAGR,SAAS,CAACQ,IAAI;IAC5BD,MAAM,CAACE,KAAK,GAAG,GAAG;IAClBF,MAAM,CAACG,KAAK,GAAG,GAAG;IAClBH,MAAM,CAACF,IAAI,GAAGA,IAAI,IAAI,MAAM;IAC5BE,MAAM,CAACD,KAAK,GAAGA,KAAK;IACpBC,MAAM,CAACI,SAAS,GAAGX,SAAS,CAACW,SAAS;IACtCJ,MAAM,CAACK,eAAe,GAAGZ,SAAS,CAACY,eAAe;IAClDL,MAAM,CAACM,MAAM,GAAG,EAAE;IAClBN,MAAM,CAACO,aAAa,GAAGd,SAAS,CAACc,aAAa;IAC9CP,MAAM,CAACQ,KAAK,GAAGf,SAAS,CAACe,KAAK;IAC9BR,MAAM,CAACS,WAAW,GAAGhB,SAAS,CAACgB,WAAW;IAC1CT,MAAM,CAACU,QAAQ,GAAGV,MAAM,CAACF,IAAI;IAC7BE,MAAM,CAACW,SAAS,GAAGlB,SAAS,CAACkB,SAAS;IACtCX,MAAM,CAACY,WAAW,GAAG,gBAAgB;IACrCZ,MAAM,CAACa,MAAM,GAAGpB,SAAS,CAACoB,MAAM;IAChCb,MAAM,CAACc,QAAQ,GAAG,WAAW;IAC7Bd,MAAM,CAACN,KAAK,GAAGA,KAAK;IACpBM,MAAM,CAACe,IAAI,GAAGC,QAAQ;IACtBhB,MAAM,CAACiB,IAAI,GAAG,CAACD,QAAQ;IACvBhB,MAAM,CAACkB,IAAI,GAAGF,QAAQ;IACtBhB,MAAM,CAACmB,IAAI,GAAG,CAACH,QAAQ;IACvBhB,MAAM,CAACoB,KAAK,GAAG,EAAE;IACjBpB,MAAM,CAACqB,KAAK,GAAG,EAAE;IACjB5B,SAAS,CAAC6B,YAAY,GAAGtB,MAAM;IAC/B,IAAIN,KAAK,CAAC6B,QAAQ,EAAE;MAChB9B,SAAS,CAAC6B,YAAY,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;MACpC/B,SAAS,CAAC6B,YAAY,CAACG,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACInC,UAAU,CAACC,SAAS,CAACmC,uBAAuB,GAAG,UAAUhC,KAAK,EAAED,SAAS,EAAEe,KAAK,EAAEmB,OAAO,EAAEtB,eAAe,EAAE;IACxGZ,SAAS,CAACmC,gBAAgB,GAAGD,OAAO;IACpClC,SAAS,CAAC6B,YAAY,CAACjB,eAAe,GAAGA,eAAe;IACxDZ,SAAS,CAAC6B,YAAY,CAACO,aAAa,GAAGF,OAAO;IAC9C,IAAIjC,KAAK,CAACoC,iBAAiB,EAAE;MACzBpC,KAAK,CAACoC,iBAAiB,CAACC,WAAW,CAACtC,SAAS,CAACmC,gBAAgB,CAAC;IACnE;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItC,UAAU,CAACC,SAAS,CAACyC,YAAY,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAElC,MAAM,EAAEQ,KAAK,EAAE;IAC/D,IAAI2B,UAAU,GAAG,IAAIjD,MAAM,CAAC,CAAC;IAC7BiD,UAAU,CAACF,CAAC,GAAGjC,MAAM,CAACoC,KAAK,CAACC,SAAS,KAAK,UAAU,GAAG,IAAIC,IAAI,CAACC,MAAM,CAACN,CAAC,CAAC,CAAC,GAAGA,CAAC;IAC9EE,UAAU,CAACD,CAAC,GAAGA,CAAC;IAChBC,UAAU,CAACK,MAAM,GAAGD,MAAM,CAACN,CAAC,CAAC;IAC7BE,UAAU,CAACM,KAAK,GAAGzC,MAAM,CAACF,IAAI;IAC9BqC,UAAU,CAAC3B,KAAK,GAAGA,KAAK;IACxB2B,UAAU,CAACO,MAAM,GAAGH,MAAM,CAACL,CAAC,CAAC;IAC7BC,UAAU,CAACQ,OAAO,GAAG,IAAI;IACzB3C,MAAM,CAACe,IAAI,GAAG6B,IAAI,CAACC,GAAG,CAAC7C,MAAM,CAACe,IAAI,EAAEoB,UAAU,CAACK,MAAM,CAAC;IACtDxC,MAAM,CAACkB,IAAI,GAAG0B,IAAI,CAACC,GAAG,CAAC7C,MAAM,CAACkB,IAAI,EAAEiB,UAAU,CAACO,MAAM,CAAC;IACtD1C,MAAM,CAACiB,IAAI,GAAG2B,IAAI,CAACE,GAAG,CAAC9C,MAAM,CAACiB,IAAI,EAAEkB,UAAU,CAACK,MAAM,CAAC;IACtDxC,MAAM,CAACmB,IAAI,GAAGyB,IAAI,CAACE,GAAG,CAAC9C,MAAM,CAACmB,IAAI,EAAEgB,UAAU,CAACO,MAAM,CAAC;IACtD1C,MAAM,CAACoB,KAAK,CAAC2B,IAAI,CAACZ,UAAU,CAACK,MAAM,CAAC;IACpC,OAAOL,UAAU;EACrB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI7C,UAAU,CAACC,SAAS,CAACyD,kBAAkB,GAAG,UAAUC,OAAO,EAAEC,OAAO,EAAEzD,SAAS,EAAEa,MAAM,EAAE;IACrF,IAAI6C,IAAI,GAAG,CAAC;IACZ,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,KAAK,GAAG,CAAC;IACb,IAAI9C,KAAK,GAAG,CAAC;IACb,IAAI+C,KAAK,GAAG,CAAC;IACb,IAAIC,SAAS,GAAG,CAAC;IACjB,OAAOhD,KAAK,GAAGF,MAAM,CAACmD,MAAM,EAAE;MAC1B;MACA,IAAIC,KAAK,CAACR,OAAO,CAAC1C,KAAK,CAAC,CAAC,EAAE;QACvB0C,OAAO,CAAC1C,KAAK,CAAC,GAAI,CAAC0C,OAAO,CAAC1C,KAAK,GAAG,CAAC,CAAC,GAAG0C,OAAO,CAAC1C,KAAK,GAAG,CAAC,CAAC,IAAI,CAAE;MACpE;MACA2C,IAAI,IAAIF,OAAO,CAACzC,KAAK,CAAC;MACtB4C,IAAI,IAAIF,OAAO,CAAC1C,KAAK,CAAC;MACtB6C,KAAK,IAAIJ,OAAO,CAACzC,KAAK,CAAC,GAAG0C,OAAO,CAAC1C,KAAK,CAAC;MACxC8C,KAAK,IAAIL,OAAO,CAACzC,KAAK,CAAC,GAAGyC,OAAO,CAACzC,KAAK,CAAC;MACxCA,KAAK,EAAE;IACX;IACA,IAAIZ,IAAI,GAAGH,SAAS,CAACG,IAAI;IACzB,IAAIH,SAAS,CAAC+D,SAAS,KAAK5D,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,aAAa,CAAC,EAAE;MACtE4D,SAAS,GAAG/D,SAAS,CAAC+D,SAAS;MAC/B,QAAQ5D,IAAI;QACR,KAAK,QAAQ;UACT2D,KAAK,GAAG,CAAEF,KAAK,GAAK5D,SAAS,CAAC+D,SAAS,GAAGL,IAAK,IAAIG,KAAK;UACxD;QACJ,KAAK,aAAa;UACdC,KAAK,GAAG,CAAEF,KAAK,GAAKT,IAAI,CAACe,GAAG,CAACf,IAAI,CAACgB,GAAG,CAACnE,SAAS,CAAC+D,SAAS,CAAC,CAAC,GAAGL,IAAK,IAAIG,KAAK;UAC5E;MACR;IACJ,CAAC,MACI;MACDC,KAAK,GAAG,CAAEjD,MAAM,CAACmD,MAAM,GAAGJ,KAAK,GAAKF,IAAI,GAAGC,IAAK,KAAM9C,MAAM,CAACmD,MAAM,GAAGH,KAAK,GAAKH,IAAI,GAAGA,IAAK,CAAC;MAC7FI,KAAK,GAAI3D,IAAI,KAAK,QAAQ,GAAG2D,KAAK,GAAGX,IAAI,CAACgB,GAAG,CAACL,KAAK,CAAE;MACrD,IAAI3D,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,OAAO,EAAE;QAC5C4D,SAAS,GAAGZ,IAAI,CAACiB,GAAG,CAAC,CAACT,IAAI,GAAIG,KAAK,GAAGJ,IAAK,IAAI7C,MAAM,CAACmD,MAAM,CAAC;MACjE,CAAC,MACI;QACDD,SAAS,GAAG,CAACJ,IAAI,GAAIG,KAAK,GAAGJ,IAAK,IAAI7C,MAAM,CAACmD,MAAM;MACvD;IACJ;IACA,OAAO;MAAEF,KAAK,EAAEA,KAAK;MAAEC,SAAS,EAAEA;IAAU,CAAC;EACjD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIlE,UAAU,CAACC,SAAS,CAACuE,cAAc,GAAG,UAAUrE,SAAS,EAAE;IACvD,IAAIa,MAAM,GAAGb,SAAS,CAACa,MAAM;IAC7B,IAAIA,MAAM,IAAIA,MAAM,CAACmD,MAAM,EAAE;MACzB;MACA,IAAIM,eAAe,GAAGtE,SAAS,CAAC6B,YAAY;MAC5C,QAAQ7B,SAAS,CAACG,IAAI;QAClB,KAAK,QAAQ;UACT,IAAI,CAACoE,cAAc,CAAC1D,MAAM,EAAEb,SAAS,EAAEsE,eAAe,CAAC;UACvD;QACJ,KAAK,aAAa;UACd,IAAI,CAACE,mBAAmB,CAAC3D,MAAM,EAAEb,SAAS,EAAEsE,eAAe,CAAC;UAC5D;QACJ,KAAK,eAAe;UAChB,IAAI,CAACG,qBAAqB,CAAC5D,MAAM,EAAEb,SAAS,EAAEsE,eAAe,CAAC;UAC9D;QACJ,KAAK,YAAY;UACb,IAAI,CAACI,kBAAkB,CAAC7D,MAAM,EAAEb,SAAS,EAAEsE,eAAe,CAAC;UAC3D;QACJ,KAAK,OAAO;UACR,IAAI,CAACK,aAAa,CAAC9D,MAAM,EAAEb,SAAS,EAAEsE,eAAe,CAAC;UACtD;QACJ,KAAK,aAAa;UACd,IAAI,CAACM,mBAAmB,CAAC/D,MAAM,EAAEb,SAAS,EAAEsE,eAAe,CAAC;UAC5D;MACR;MACA,IAAItE,SAAS,CAACG,IAAI,KAAK,QAAQ,IAAIH,SAAS,CAACG,IAAI,KAAK,eAAe,EAAE;QACnEmE,eAAe,CAACrE,KAAK,CAAC4E,kBAAkB,CAACC,eAAe,CAACR,eAAe,CAAC;MAC7E;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIzE,UAAU,CAACC,SAAS,CAAC0E,mBAAmB,GAAG,UAAU3D,MAAM,EAAEb,SAAS,EAAEO,MAAM,EAAE;IAC5E,IAAIwC,MAAM,GAAG,EAAE;IACf,IAAIE,MAAM,GAAG,EAAE;IACf,IAAIlC,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGF,MAAM,CAACmD,MAAM,EAAE;MAC1B,IAAIe,KAAK,GAAGlE,MAAM,CAACE,KAAK,CAAC;MACzB,IAAIiE,UAAU,GAAGD,KAAK,CAAC9B,MAAM,GAAGE,IAAI,CAACe,GAAG,CAACa,KAAK,CAAC9B,MAAM,CAAC,GAAG,CAAC;MAC1DF,MAAM,CAACO,IAAI,CAACyB,KAAK,CAAChC,MAAM,CAAC;MACzBE,MAAM,CAACK,IAAI,CAAC0B,UAAU,CAAC;MACvBjE,KAAK,EAAE;IACX;IACA,IAAIkE,cAAc,GAAG,IAAI,CAAC1B,kBAAkB,CAACR,MAAM,EAAEE,MAAM,EAAEjD,SAAS,EAAEa,MAAM,CAAC;IAC/EN,MAAM,CAACM,MAAM,GAAG,IAAI,CAACqE,oBAAoB,CAAClF,SAAS,EAAEa,MAAM,EAAEkC,MAAM,EAAEE,MAAM,EAAE1C,MAAM,EAAE0E,cAAc,CAAC;EACxG,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIpF,UAAU,CAACC,SAAS,CAAC8E,mBAAmB,GAAG,UAAU/D,MAAM,EAAEb,SAAS,EAAEO,MAAM,EAAE;IAC5E,IAAI4E,SAAS,GAAG,EAAE;IAClB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAItE,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGF,MAAM,CAACmD,MAAM,EAAE;MAC1B,IAAIe,KAAK,GAAGlE,MAAM,CAACE,KAAK,CAAC;MACzB,IAAIuE,UAAU,GAAGP,KAAK,CAAChC,MAAM,GAAGI,IAAI,CAACe,GAAG,CAACa,KAAK,CAAChC,MAAM,CAAC,GAAG,CAAC;MAC1DsC,UAAU,CAAC/B,IAAI,CAACyB,KAAK,CAAChC,MAAM,CAAC;MAC7BoC,SAAS,CAAC7B,IAAI,CAACgC,UAAU,CAAC;MAC1BF,SAAS,CAAC9B,IAAI,CAACyB,KAAK,CAAC9B,MAAM,CAAC;MAC5BlC,KAAK,EAAE;IACX;IACA,IAAIkE,cAAc,GAAG,IAAI,CAAC1B,kBAAkB,CAAC4B,SAAS,EAAEC,SAAS,EAAEpF,SAAS,EAAEa,MAAM,CAAC;IACrFN,MAAM,CAACM,MAAM,GAAG,IAAI,CAAC0E,oBAAoB,CAACvF,SAAS,EAAEa,MAAM,EAAEwE,UAAU,EAAED,SAAS,EAAE7E,MAAM,EAAE0E,cAAc,CAAC;EAC/G,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIpF,UAAU,CAACC,SAAS,CAAC4E,kBAAkB,GAAG,UAAU7D,MAAM,EAAEb,SAAS,EAAEO,MAAM,EAAE;IAC3E,IAAIiF,WAAW,GAAG,EAAE;IACpB,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAI1E,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGF,MAAM,CAACmD,MAAM,EAAE;MAC1B,IAAIe,KAAK,GAAGlE,MAAM,CAACE,KAAK,CAAC;MACzByE,WAAW,CAAClC,IAAI,CAACyB,KAAK,CAAChC,MAAM,CAAC;MAC9B0C,WAAW,CAACnC,IAAI,CAACyB,KAAK,CAAC9B,MAAM,CAAC;MAC9BlC,KAAK,EAAE;IACX;IACAR,MAAM,CAACM,MAAM,GAAG,IAAI,CAAC6E,mBAAmB,CAAC1F,SAAS,EAAEa,MAAM,EAAE2E,WAAW,EAAEC,WAAW,EAAElF,MAAM,CAAC;EACjG,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIV,UAAU,CAACC,SAAS,CAAC6E,aAAa,GAAG,UAAU9D,MAAM,EAAEb,SAAS,EAAEO,MAAM,EAAE;IACtE,IAAIiD,OAAO,GAAG,EAAE;IAChB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIkC,WAAW,GAAG,EAAE;IACpB,IAAI5E,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGF,MAAM,CAACmD,MAAM,EAAE;MAC1B,IAAIe,KAAK,GAAGlE,MAAM,CAACE,KAAK,CAAC;MACzB,IAAIuE,UAAU,GAAGP,KAAK,CAAChC,MAAM,GAAGI,IAAI,CAACe,GAAG,CAACa,KAAK,CAAChC,MAAM,CAAC,GAAG,CAAC;MAC1D,IAAIiC,UAAU,GAAGD,KAAK,CAAC9B,MAAM,GAAGE,IAAI,CAACe,GAAG,CAACa,KAAK,CAAC9B,MAAM,CAAC,GAAG,CAAC;MAC1D0C,WAAW,CAACrC,IAAI,CAACyB,KAAK,CAAChC,MAAM,CAAC;MAC9BS,OAAO,CAACF,IAAI,CAACgC,UAAU,CAAC;MACxB7B,OAAO,CAACH,IAAI,CAAC0B,UAAU,CAAC;MACxBjE,KAAK,EAAE;IACX;IACA,IAAIkE,cAAc,GAAG,IAAI,CAAC1B,kBAAkB,CAACC,OAAO,EAAEC,OAAO,EAAEzD,SAAS,EAAEa,MAAM,CAAC;IACjFN,MAAM,CAACM,MAAM,GAAG,IAAI,CAAC+E,cAAc,CAAC5F,SAAS,EAAEa,MAAM,EAAE8E,WAAW,EAAElC,OAAO,EAAElD,MAAM,EAAE0E,cAAc,CAAC;EACxG,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIpF,UAAU,CAACC,SAAS,CAACyE,cAAc,GAAG,UAAU1D,MAAM,EAAEb,SAAS,EAAEO,MAAM,EAAE;IACvE,IAAIiD,OAAO,GAAG,EAAE;IAChB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAI1C,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGF,MAAM,CAACmD,MAAM,EAAE;MAC1B,IAAIe,KAAK,GAAGlE,MAAM,CAACE,KAAK,CAAC;MACzByC,OAAO,CAACF,IAAI,CAACyB,KAAK,CAAChC,MAAM,CAAC;MAC1BU,OAAO,CAACH,IAAI,CAACyB,KAAK,CAAC9B,MAAM,CAAC;MAC1BlC,KAAK,EAAE;IACX;IACA,IAAIkE,cAAc,GAAG,IAAI,CAAC1B,kBAAkB,CAACC,OAAO,EAAEC,OAAO,EAAEzD,SAAS,EAAEa,MAAM,CAAC;IACjFN,MAAM,CAACM,MAAM,GAAG,IAAI,CAACgF,eAAe,CAAC7F,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEC,OAAO,EAAElD,MAAM,EAAE0E,cAAc,CAAC;EACrG,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIpF,UAAU,CAACC,SAAS,CAAC2E,qBAAqB,GAAG,UAAU5D,MAAM,EAAEb,SAAS,EAAEO,MAAM,EAAE;IAC9E,IAAIiD,OAAO,GAAG,EAAE;IAChB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIqC,UAAU,GAAG,EAAE;IACnB,IAAI/E,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGF,MAAM,CAACmD,MAAM,EAAE;MAC1B,IAAIe,KAAK,GAAGlE,MAAM,CAACE,KAAK,CAAC;MACzB+E,UAAU,CAACxC,IAAI,CAACyB,KAAK,CAAChC,MAAM,CAAC;MAC7BS,OAAO,CAACF,IAAI,CAACvC,KAAK,GAAG,CAAC,CAAC;MACvB0C,OAAO,CAACH,IAAI,CAACyB,KAAK,CAAC9B,MAAM,CAAC;MAC1BlC,KAAK,EAAE;IACX;IACAR,MAAM,CAACM,MAAM,GAAG,IAAI,CAACkF,sBAAsB,CAAC/F,SAAS,EAAEa,MAAM,EAAEiF,UAAU,EAAErC,OAAO,EAAElD,MAAM,CAAC;EAC/F,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIV,UAAU,CAACC,SAAS,CAACyF,oBAAoB,GAAG,UAAUvF,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEC,OAAO,EAAElD,MAAM,EAAEyF,iBAAiB,EAAE;IAClH,IAAIC,QAAQ,GAAG9C,IAAI,CAAC+C,KAAK,CAAErF,MAAM,CAACmD,MAAM,GAAG,CAAE,CAAC;IAC9C,IAAImC,GAAG,GAAG,EAAE;IACZ,IAAIC,KAAK,GAAG5C,OAAO,CAAC,CAAC,CAAC,GAAGxD,SAAS,CAACqG,gBAAgB;IACnD,IAAIC,EAAE,GAAGF,KAAK,GAAGjD,IAAI,CAACe,GAAG,CAACkC,KAAK,CAAC,GAAG,CAAC;IACpC,IAAIG,KAAK,GAAGP,iBAAiB,CAACjC,SAAS,GAAIiC,iBAAiB,CAAClC,KAAK,GAAGwC,EAAG;IACxE,IAAIE,KAAK,GAAGhD,OAAO,CAACyC,QAAQ,GAAG,CAAC,CAAC;IACjC,IAAIQ,EAAE,GAAGD,KAAK,GAAGrD,IAAI,CAACe,GAAG,CAACsC,KAAK,CAAC,GAAG,CAAC;IACpC,IAAIE,KAAK,GAAGV,iBAAiB,CAACjC,SAAS,GAAIiC,iBAAiB,CAAClC,KAAK,GAAG2C,EAAG;IACxE,IAAIE,KAAK,GAAGnD,OAAO,CAACA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC,GAAGhE,SAAS,CAAC4G,eAAe;IACnE,IAAIC,EAAE,GAAGF,KAAK,GAAGxD,IAAI,CAACe,GAAG,CAACyC,KAAK,CAAC,GAAG,CAAC;IACpC,IAAIG,KAAK,GAAGd,iBAAiB,CAACjC,SAAS,GAAIiC,iBAAiB,CAAClC,KAAK,GAAG+C,EAAG;IACxEV,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAAC6D,KAAK,EAAEG,KAAK,EAAEhG,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IAC7DmC,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACiE,KAAK,EAAEE,KAAK,EAAEnG,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IAC7DmC,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACoE,KAAK,EAAEG,KAAK,EAAEvG,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IAC7D,OAAOmC,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItG,UAAU,CAACC,SAAS,CAAC8F,cAAc,GAAG,UAAU5F,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEC,OAAO,EAAElD,MAAM,EAAEwG,mBAAmB,EAAE;IAC9G,IAAId,QAAQ,GAAG9C,IAAI,CAAC+C,KAAK,CAAErF,MAAM,CAACmD,MAAM,GAAG,CAAE,CAAC;IAC9C,IAAImC,GAAG,GAAG,EAAE;IACZ,IAAIG,EAAE,GAAG9C,OAAO,CAAC,CAAC,CAAC,GAAGxD,SAAS,CAACqG,gBAAgB;IAChDC,EAAE,GAAGA,EAAE,GAAG,CAAC,CAAC,GAAGA,EAAE,GAAG,CAAC;IACrB,IAAIU,EAAE,GAAGD,mBAAmB,CAAChD,SAAS,GAAGZ,IAAI,CAAC8D,GAAG,CAACX,EAAE,EAAES,mBAAmB,CAACjD,KAAK,CAAC;IAChF,IAAI2C,EAAE,GAAGjD,OAAO,CAACyC,QAAQ,GAAG,CAAC,CAAC;IAC9B,IAAIiB,EAAE,GAAGH,mBAAmB,CAAChD,SAAS,GAAGZ,IAAI,CAAC8D,GAAG,CAACR,EAAE,EAAEM,mBAAmB,CAACjD,KAAK,CAAC;IAChF,IAAI+C,EAAE,GAAGrD,OAAO,CAACA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC,GAAGhE,SAAS,CAAC4G,eAAe;IAChE,IAAIO,EAAE,GAAGJ,mBAAmB,CAAChD,SAAS,GAAGZ,IAAI,CAAC8D,GAAG,CAACJ,EAAE,EAAEE,mBAAmB,CAACjD,KAAK,CAAC;IAChFqC,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAAC+D,EAAE,EAAEU,EAAE,EAAEzG,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IACvDmC,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACkE,EAAE,EAAES,EAAE,EAAE3G,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IACvDmC,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACsE,EAAE,EAAEM,EAAE,EAAE5G,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IACvD,OAAOmC,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItG,UAAU,CAACC,SAAS,CAAC4F,mBAAmB,GAAG,UAAU1F,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEC,OAAO,EAAElD,MAAM,EAAE;IAC9F,IAAI4F,GAAG,GAAG,EAAE;IACZ,IAAIiB,eAAe,GAAGvG,MAAM,CAACmD,MAAM,IAAIhE,SAAS,CAACoH,eAAe,GAAGvG,MAAM,CAACmD,MAAM,GAAGhE,SAAS,CAACoH,eAAe;IAC5GA,eAAe,GAAGjE,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE+D,eAAe,CAAC;IAC9CA,eAAe,GAAGjE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgE,eAAe,CAAC;IAC9CpH,SAAS,CAACoH,eAAe,GAAGA,eAAe;IAC3CpH,SAAS,CAACqH,gBAAgB,GAAG,EAAE;IAC/BrH,SAAS,CAACqH,gBAAgB,CAACrD,MAAM,GAAGhE,SAAS,CAACoH,eAAe,GAAG,CAAC;IACjE,IAAIrG,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGyC,OAAO,CAACQ,MAAM,EAAE;MAC3B,IAAIsD,IAAI,GAAG9D,OAAO,CAACzC,KAAK,CAAC;MACzB,IAAIwG,IAAI,GAAG9D,OAAO,CAAC1C,KAAK,CAAC;MACzB,IAAIyG,QAAQ,GAAG,CAAC;MAChB,OAAOA,QAAQ,IAAIxH,SAAS,CAACoH,eAAe,EAAE;QAC1C,IAAI,CAACpH,SAAS,CAACqH,gBAAgB,CAACG,QAAQ,CAAC,EAAE;UACvCxH,SAAS,CAACqH,gBAAgB,CAACG,QAAQ,CAAC,GAAG,CAAC;QAC5C;QACAxH,SAAS,CAACqH,gBAAgB,CAACG,QAAQ,CAAC,IAAIrE,IAAI,CAAC8D,GAAG,CAACK,IAAI,EAAEE,QAAQ,CAAC,GAAGD,IAAI;QACvE,EAAEC,QAAQ;MACd;MACAzG,KAAK,EAAE;IACX;IACA,IAAI0G,QAAQ,GAAG,EAAE;IACjBA,QAAQ,CAACzD,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGhE,SAAS,CAACoH,eAAe;IACnD,IAAIM,MAAM,GAAG,EAAE;IACfA,MAAM,CAAC1D,MAAM,GAAGhE,SAAS,CAACoH,eAAe,GAAG,CAAC;IAC7C,IAAIO,QAAQ,GAAG,CAAC;IAChB,OAAOA,QAAQ,GAAI3H,SAAS,CAACoH,eAAe,GAAG,CAAE,EAAE;MAC/CM,MAAM,CAACC,QAAQ,CAAC,GAAG,EAAE;MACrBD,MAAM,CAACC,QAAQ,CAAC,CAAC3D,MAAM,GAAG,CAAC;MAC3B2D,QAAQ,EAAE;IACd;IACA,IAAIC,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAGpE,OAAO,CAACQ,MAAM,EAAE;MAC5B,IAAI6D,CAAC,GAAGrE,OAAO,CAACoE,MAAM,CAAC;MACvB,IAAIE,IAAI,GAAG,GAAG;MACd,IAAIC,OAAO,GAAG,CAAC;MACf,OAAOA,OAAO,GAAGN,QAAQ,CAACzD,MAAM,EAAE;QAC9B,IAAI,CAACyD,QAAQ,CAACM,OAAO,CAAC,EAAE;UACpBN,QAAQ,CAACM,OAAO,CAAC,GAAG,CAAC;QACzB;QACAN,QAAQ,CAACM,OAAO,CAAC,IAAID,IAAI;QACzBA,IAAI,IAAID,CAAC;QACT,EAAEE,OAAO;MACb;MACA,EAAEH,MAAM;IACZ;IACA,IAAII,OAAO,GAAG,CAAC;IACf,OAAOA,OAAO,IAAIhI,SAAS,CAACoH,eAAe,EAAE;MACzC,IAAIa,QAAQ,GAAG,CAAC;MAChB,OAAOA,QAAQ,IAAIjI,SAAS,CAACoH,eAAe,EAAE;QAC1CM,MAAM,CAACM,OAAO,CAAC,CAACC,QAAQ,CAAC,GAAGR,QAAQ,CAACO,OAAO,GAAGC,QAAQ,CAAC;QACxD,EAAEA,QAAQ;MACd;MACA,EAAED,OAAO;IACb;IACA,IAAI,CAAC,IAAI,CAACE,sBAAsB,CAACR,MAAM,EAAE1H,SAAS,CAACqH,gBAAgB,CAAC,EAAE;MAClErH,SAAS,CAACqH,gBAAgB,GAAG,IAAI;IACrC;IACAlB,GAAG,GAAG,IAAI,CAACgC,SAAS,CAACnI,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEjD,MAAM,CAAC;IACxD,OAAO4F,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItG,UAAU,CAACC,SAAS,CAACiG,sBAAsB,GAAG,UAAU/F,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEC,OAAO,EAAElD,MAAM,EAAE;IACjG,IAAI4F,GAAG,GAAG,EAAE;IACZ,IAAIiC,MAAM,GAAGpI,SAAS,CAACoI,MAAM,IAAIvH,MAAM,CAACmD,MAAM,GAAGnD,MAAM,CAACmD,MAAM,GAAG,CAAC,GAAGhE,SAAS,CAACoI,MAAM;IACrFA,MAAM,GAAGjF,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE+E,MAAM,CAAC;IAC5B,IAAIrH,KAAK,GAAG,CAAC;IACb,IAAI0B,CAAC;IACL,IAAID,CAAC;IACL,IAAI6F,KAAK;IACT,IAAIC,SAAS;IACb,OAAOvH,KAAK,GAAGF,MAAM,CAACmD,MAAM,GAAG,CAAC,EAAE;MAC9BvB,CAAC,GAAG4F,KAAK,GAAGC,SAAS,GAAG,CAAC;MACzB,KAAK,IAAIC,CAAC,GAAGxH,KAAK,EAAEsH,KAAK,GAAGD,MAAM,EAAEG,CAAC,EAAE,EAAE;QACrCF,KAAK,EAAE;QACP5F,CAAC,IAAIgB,OAAO,CAAC8E,CAAC,CAAC;MACnB;MACA9F,CAAC,GAAG2F,MAAM,GAAGE,SAAS,GAAG,CAAC,GAAG,IAAI,GAAG7F,CAAC,GAAGA,CAAC,IAAI2F,MAAM,GAAGE,SAAS,CAAC,GAAG7F,CAAC;MACpE,IAAI,CAAC7C,iBAAiB,CAAC6C,CAAC,CAAC,IAAI,CAACwB,KAAK,CAACxB,CAAC,CAAC,EAAE;QACpCD,CAAC,GAAGgB,OAAO,CAAC4E,MAAM,GAAG,CAAC,GAAGrH,KAAK,CAAC;QAC/BoF,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACC,CAAC,EAAEC,CAAC,EAAElC,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;MACzD;MACAjD,KAAK,EAAE;IACX;IACA,OAAOoF,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItG,UAAU,CAACC,SAAS,CAAC+F,eAAe,GAAG,UAAU7F,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEC,OAAO,EAAElD,MAAM,EAAEiI,oBAAoB,EAAE;IAChH,IAAIrC,GAAG,GAAG,EAAE;IACZ,IAAI9C,GAAG,GAAGG,OAAO,CAACiF,OAAO,CAACtF,IAAI,CAACE,GAAG,CAACqF,KAAK,CAAC,IAAI,EAAElF,OAAO,CAAC,CAAC;IACxD,IAAIJ,GAAG,GAAGI,OAAO,CAACiF,OAAO,CAACtF,IAAI,CAACC,GAAG,CAACsF,KAAK,CAAC,IAAI,EAAElF,OAAO,CAAC,CAAC;IACxD,IAAImF,QAAQ,GAAGnF,OAAO,CAACJ,GAAG,CAAC,GAAGpD,SAAS,CAACqG,gBAAgB;IACxD,IAAIuC,QAAQ,GAAGJ,oBAAoB,CAAC1E,KAAK,GAAG6E,QAAQ,GAAGH,oBAAoB,CAACzE,SAAS;IACrF,IAAI8E,QAAQ,GAAGrF,OAAO,CAACH,GAAG,CAAC,GAAGrD,SAAS,CAAC4G,eAAe;IACvD,IAAIkC,QAAQ,GAAGN,oBAAoB,CAAC1E,KAAK,GAAG+E,QAAQ,GAAGL,oBAAoB,CAACzE,SAAS;IACrFoC,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACoG,QAAQ,EAAEC,QAAQ,EAAErI,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IACnEmC,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACsG,QAAQ,EAAEC,QAAQ,EAAEvI,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;IACnE,OAAOmC,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItG,UAAU,CAACC,SAAS,CAACoF,oBAAoB,GAAG,UAAUlF,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEC,OAAO,EAAElD,MAAM,EAAEwI,iBAAiB,EAAE;IAClH,IAAI9C,QAAQ,GAAG9C,IAAI,CAAC+C,KAAK,CAAErF,MAAM,CAACmD,MAAM,GAAG,CAAE,CAAC;IAC9C,IAAIgF,MAAM,GAAG,EAAE;IACf,IAAI1C,EAAE,GAAG9C,OAAO,CAAC,CAAC,CAAC,GAAGxD,SAAS,CAACqG,gBAAgB;IAChD,IAAIW,EAAE,GAAG+B,iBAAiB,CAAChF,SAAS,GAAGZ,IAAI,CAACiB,GAAG,CAAC2E,iBAAiB,CAACjF,KAAK,GAAGwC,EAAE,CAAC;IAC7E,IAAIG,EAAE,GAAGjD,OAAO,CAACyC,QAAQ,GAAG,CAAC,CAAC;IAC9B,IAAIiB,EAAE,GAAG6B,iBAAiB,CAAChF,SAAS,GAAGZ,IAAI,CAACiB,GAAG,CAAC2E,iBAAiB,CAACjF,KAAK,GAAG2C,EAAE,CAAC;IAC7E,IAAII,EAAE,GAAGrD,OAAO,CAACA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC,GAAGhE,SAAS,CAAC4G,eAAe;IAChE,IAAIO,EAAE,GAAG4B,iBAAiB,CAAChF,SAAS,GAAGZ,IAAI,CAACiB,GAAG,CAAC2E,iBAAiB,CAACjF,KAAK,GAAG+C,EAAE,CAAC;IAC7EmC,MAAM,CAAC1F,IAAI,CAAC,IAAI,CAACf,YAAY,CAAC+D,EAAE,EAAEU,EAAE,EAAEzG,MAAM,EAAEyI,MAAM,CAAChF,MAAM,CAAC,CAAC;IAC7DgF,MAAM,CAAC1F,IAAI,CAAC,IAAI,CAACf,YAAY,CAACkE,EAAE,EAAES,EAAE,EAAE3G,MAAM,EAAEyI,MAAM,CAAChF,MAAM,CAAC,CAAC;IAC7DgF,MAAM,CAAC1F,IAAI,CAAC,IAAI,CAACf,YAAY,CAACsE,EAAE,EAAEM,EAAE,EAAE5G,MAAM,EAAEyI,MAAM,CAAChF,MAAM,CAAC,CAAC;IAC7D,OAAOgF,MAAM;EACjB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACInJ,UAAU,CAACC,SAAS,CAACqI,SAAS,GAAG,UAAUnI,SAAS,EAAEa,MAAM,EAAE2C,OAAO,EAAEjD,MAAM,EAAE;IAC3E,IAAI8G,gBAAgB,GAAGrH,SAAS,CAACqH,gBAAgB;IACjD,IAAIlB,GAAG,GAAG,EAAE;IACZ,IAAIG,EAAE,GAAG,CAAC;IACV,IAAIvF,KAAK,GAAG,CAAC;IACb,IAAIgC,MAAM;IACV,IAAIE,MAAM;IACV;IACApC,MAAM,CAACoI,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAOD,CAAC,CAACnG,MAAM,GAAGoG,CAAC,CAACpG,MAAM;IAAE,CAAC,CAAC;IAC5DS,OAAO,CAACyF,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAOD,CAAC,GAAGC,CAAC;IAAE,CAAC,CAAC;IAC/C,OAAO9B,gBAAgB,KAAK,IAAI,IAAItG,KAAK,IAAIsG,gBAAgB,CAACrD,MAAM,EAAE;MAClE,IAAIjD,KAAK,KAAK,CAAC,EAAE;QACbgC,MAAM,GAAGS,OAAO,CAAC,CAAC,CAAC,GAAGxD,SAAS,CAACqG,gBAAgB;QAChDpD,MAAM,GAAG,IAAI,CAACmG,mBAAmB,CAAC/B,gBAAgB,EAAEtE,MAAM,CAAC;QAC3DoD,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACQ,MAAM,EAAEE,MAAM,EAAE1C,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;MACnE,CAAC,MACI,IAAIjD,KAAK,KAAKsG,gBAAgB,CAACrD,MAAM,EAAE;QACxCjB,MAAM,GAAGS,OAAO,CAAC3C,MAAM,CAACmD,MAAM,GAAG,CAAC,CAAC,GAAGhE,SAAS,CAAC4G,eAAe;QAC/D3D,MAAM,GAAG,IAAI,CAACmG,mBAAmB,CAAC/B,gBAAgB,EAAEtE,MAAM,CAAC;QAC3DoD,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACQ,MAAM,EAAEE,MAAM,EAAE1C,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;MACnE,CAAC,MACI;QACDsC,EAAE,IAAI,CAACzF,MAAM,CAACmD,MAAM,IAAIzD,MAAM,CAACoC,KAAK,CAACC,SAAS,KAAK,UAAU,GAAG7B,KAAK,GAAGf,SAAS,CAAC4G,eAAe,CAAC,IAAIS,gBAAgB,CAACrD,MAAM;QAC7HjB,MAAM,GAAGS,OAAO,CAAC6F,QAAQ,CAAC/C,EAAE,CAACgD,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QACjDrG,MAAM,GAAG,IAAI,CAACmG,mBAAmB,CAAC/B,gBAAgB,EAAEtE,MAAM,CAAC;QAC3DoD,GAAG,CAAC7C,IAAI,CAAC,IAAI,CAACf,YAAY,CAACQ,MAAM,EAAEE,MAAM,EAAE1C,MAAM,EAAE4F,GAAG,CAACnC,MAAM,CAAC,CAAC;MACnE;MACAjD,KAAK,EAAE;IACX;IACA,OAAOoF,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACItG,UAAU,CAACC,SAAS,CAACsJ,mBAAmB,GAAG,UAAUG,MAAM,EAAE/G,CAAC,EAAE;IAC5D,IAAIgH,GAAG,GAAG,CAAC;IACX,IAAIzI,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGwI,MAAM,CAACvF,MAAM,EAAE;MAC1BwF,GAAG,IAAID,MAAM,CAACxI,KAAK,CAAC,GAAGoC,IAAI,CAAC8D,GAAG,CAACzE,CAAC,EAAEzB,KAAK,CAAC;MACzCA,KAAK,EAAE;IACX;IACA,OAAOyI,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI3J,UAAU,CAACC,SAAS,CAACoI,sBAAsB,GAAG,UAAUR,MAAM,EAAEL,gBAAgB,EAAE;IAC9E,IAAIrD,MAAM,GAAG0D,MAAM,CAAC1D,MAAM;IAC1B,IAAIyF,SAAS,GAAG,EAAE;IAClB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,SAAS,GAAG,EAAE;IAClBF,SAAS,CAACzF,MAAM,GAAGA,MAAM;IACzB0F,SAAS,CAAC1F,MAAM,GAAGA,MAAM;IACzB2F,SAAS,CAAC3F,MAAM,GAAGA,MAAM;IACzB,IAAIjD,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGiD,MAAM,EAAE;MACnB2F,SAAS,CAAC5I,KAAK,CAAC,GAAG,CAAC;MACpB,EAAEA,KAAK;IACX;IACA,IAAI6I,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAG5F,MAAM,EAAE;MACpB,IAAI6F,IAAI,GAAG,CAAC;MACZ,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIC,MAAM,GAAG,CAAC;MACd,OAAOA,MAAM,GAAGhG,MAAM,EAAE;QACpB,IAAI2F,SAAS,CAACK,MAAM,CAAC,KAAK,CAAC,EAAE;UACzB,IAAIC,MAAM,GAAG,CAAC;UACd,OAAOA,MAAM,GAAGjG,MAAM,EAAE;YACpB,IAAI2F,SAAS,CAACM,MAAM,CAAC,KAAK,CAAC,IAAI9G,IAAI,CAACgB,GAAG,CAACuD,MAAM,CAACsC,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC,IAAIJ,IAAI,EAAE;cACrEA,IAAI,GAAG1G,IAAI,CAACgB,GAAG,CAACuD,MAAM,CAACsC,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC;cACvCH,MAAM,GAAGE,MAAM;cACfD,MAAM,GAAGE,MAAM;YACnB;YACA,EAAEA,MAAM;UACZ;QACJ;QACA,EAAED,MAAM;MACZ;MACA,EAAEL,SAAS,CAACI,MAAM,CAAC;MACnB,IAAID,MAAM,KAAKC,MAAM,EAAE;QACnB,IAAIG,QAAQ,GAAG,CAAC;QAChB,OAAOA,QAAQ,GAAGlG,MAAM,EAAE;UACtB,IAAI8D,IAAI,GAAGJ,MAAM,CAACoC,MAAM,CAAC,CAACI,QAAQ,CAAC;UACnCxC,MAAM,CAACoC,MAAM,CAAC,CAACI,QAAQ,CAAC,GAAGxC,MAAM,CAACqC,MAAM,CAAC,CAACG,QAAQ,CAAC;UACnDxC,MAAM,CAACqC,MAAM,CAAC,CAACG,QAAQ,CAAC,GAAGpC,IAAI;UAC/B,EAAEoC,QAAQ;QACd;QACA,IAAIC,IAAI,GAAG9C,gBAAgB,CAACyC,MAAM,CAAC;QACnCzC,gBAAgB,CAACyC,MAAM,CAAC,GAAGzC,gBAAgB,CAAC0C,MAAM,CAAC;QACnD1C,gBAAgB,CAAC0C,MAAM,CAAC,GAAGI,IAAI;MACnC;MACAT,SAAS,CAACE,MAAM,CAAC,GAAGE,MAAM;MAC1BL,SAAS,CAACG,MAAM,CAAC,GAAGG,MAAM;MAC1B,IAAIrC,MAAM,CAACqC,MAAM,CAAC,CAACA,MAAM,CAAC,KAAK,GAAG,EAAE;QAChC,OAAO,KAAK;MAChB;MACA,IAAIK,IAAI,GAAG,GAAG,GAAG1C,MAAM,CAACqC,MAAM,CAAC,CAACA,MAAM,CAAC;MACvCrC,MAAM,CAACqC,MAAM,CAAC,CAACA,MAAM,CAAC,GAAG,GAAG;MAC5B,IAAIM,OAAO,GAAG,CAAC;MACf,OAAOA,OAAO,GAAGrG,MAAM,EAAE;QACrB0D,MAAM,CAACqC,MAAM,CAAC,CAACM,OAAO,CAAC,IAAID,IAAI;QAC/B,EAAEC,OAAO;MACb;MACAhD,gBAAgB,CAAC0C,MAAM,CAAC,IAAIK,IAAI;MAChC,IAAIE,OAAO,GAAG,CAAC;MACf,OAAOA,OAAO,GAAGtG,MAAM,EAAE;QACrB,IAAIsG,OAAO,KAAKP,MAAM,EAAE;UACpB,IAAIjC,IAAI,GAAGJ,MAAM,CAAC4C,OAAO,CAAC,CAACP,MAAM,CAAC;UAClCrC,MAAM,CAAC4C,OAAO,CAAC,CAACP,MAAM,CAAC,GAAG,GAAG;UAC7B,IAAIE,MAAM,GAAG,CAAC;UACd,OAAOA,MAAM,GAAGjG,MAAM,EAAE;YACpB0D,MAAM,CAAC4C,OAAO,CAAC,CAACL,MAAM,CAAC,IAAIvC,MAAM,CAACqC,MAAM,CAAC,CAACE,MAAM,CAAC,GAAGnC,IAAI;YACxD,EAAEmC,MAAM;UACZ;UACA5C,gBAAgB,CAACiD,OAAO,CAAC,IAAIjD,gBAAgB,CAAC0C,MAAM,CAAC,GAAGjC,IAAI;QAChE;QACA,EAAEwC,OAAO;MACb;MACA,EAAEV,MAAM;IACZ;IACA,IAAIW,OAAO,GAAGvG,MAAM,GAAG,CAAC;IACxB,OAAOuG,OAAO,IAAI,CAAC,EAAE;MACjB,IAAIb,SAAS,CAACa,OAAO,CAAC,KAAKd,SAAS,CAACc,OAAO,CAAC,EAAE;QAC3C,IAAIC,OAAO,GAAG,CAAC;QACf,OAAOA,OAAO,GAAGxG,MAAM,EAAE;UACrB,IAAIyG,GAAG,GAAG/C,MAAM,CAAC8C,OAAO,CAAC,CAACd,SAAS,CAACa,OAAO,CAAC,CAAC;UAC7C7C,MAAM,CAAC8C,OAAO,CAAC,CAACd,SAAS,CAACa,OAAO,CAAC,CAAC,GAAG7C,MAAM,CAAC8C,OAAO,CAAC,CAACf,SAAS,CAACc,OAAO,CAAC,CAAC;UACzE7C,MAAM,CAAC8C,OAAO,CAAC,CAACf,SAAS,CAACc,OAAO,CAAC,CAAC,GAAGE,GAAG;UACzC,EAAED,OAAO;QACb;MACJ;MACA,EAAED,OAAO;IACb;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI1K,UAAU,CAACC,SAAS,CAAC4K,oBAAoB,GAAG,UAAUnK,MAAM,EAAEN,KAAK,EAAE;IACjEP,YAAY,CAACa,MAAM,CAAC;IACpB,IAAIoK,QAAQ,GAAGpK,MAAM,CAACoK,QAAQ;IAC9B,IAAI/J,eAAe,GAAGX,KAAK,CAAC2K,QAAQ,CAACC,YAAY,CAAC,IAAIlL,UAAU,CAACM,KAAK,CAACiC,OAAO,CAAC4I,EAAE,GAAG,0BAA0B,GAAGvK,MAAM,CAACQ,KAAK,EAAE,aAAa,EAAE;MAAET,KAAK,EAAE,CAAC;MAAE0C,KAAK,EAAE;IAAO,CAAC,EAAE,CAAC,EAAE;MAC1KR,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEnC,KAAK,EAAEqK,QAAQ,CAACrK,KAAK;MACjCyK,MAAM,EAAEJ,QAAQ,CAACI;IACrB,CAAC,CAAC,CAAC;IACH,IAAI7I,OAAO,GAAGjC,KAAK,CAAC2K,QAAQ,CAACI,WAAW,CAAC;MACrC,IAAI,EAAE/K,KAAK,CAACiC,OAAO,CAAC4I,EAAE,GAAG,sBAAsB,GAAGvK,MAAM,CAACQ,KAAK;MAC9D,WAAW,EAAE,YAAY,GAAG4J,QAAQ,CAACnI,CAAC,GAAG,GAAG,GAAGmI,QAAQ,CAAClI,CAAC,GAAG,GAAG;MAC/D,WAAW,EAAE,OAAO,GAAGxC,KAAK,CAACiC,OAAO,CAAC4I,EAAE,GAAG,0BAA0B,GAAGvK,MAAM,CAACQ,KAAK,GAAG;IAC1F,CAAC,CAAC;IACF;IACA,IAAImB,OAAO,EAAE;MACTA,OAAO,CAACI,WAAW,CAAC1B,eAAe,CAAC;IACxC;IACA,KAAK,IAAIqK,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG3K,MAAM,CAAC4K,UAAU,EAAEF,EAAE,GAAGC,EAAE,CAAClH,MAAM,EAAEiH,EAAE,EAAE,EAAE;MAC3D,IAAIjL,SAAS,GAAGkL,EAAE,CAACD,EAAE,CAAC;MACtB,IAAI,CAAChJ,uBAAuB,CAAChC,KAAK,EAAED,SAAS,EAAEA,SAAS,CAACe,KAAK,EAAEmB,OAAO,EAAEtB,eAAe,CAAC;IAC7F;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIf,UAAU,CAACC,SAAS,CAACsL,OAAO,GAAG,YAAY;IACvC;AACR;AACA;EAFQ,CAGH;EACD;AACJ;AACA;AACA;AACA;EACIvL,UAAU,CAACC,SAAS,CAACuL,aAAa,GAAG,YAAY;IAC7C;AACR;AACA;IACQ,OAAO,WAAW;EACtB,CAAC;EACD,OAAOxL,UAAU;AACrB,CAAC,CAAC,CAAE;AACJ,SAASA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}