{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * Selection src file\r\n */\nimport { Animation, Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\r\n * `Selection` module handles the selection for chart.\r\n *\r\n * @private\r\n */\nvar Selection = /** @class */function (_super) {\n  __extends(Selection, _super);\n  /**\r\n   * Constructor for selection module.\r\n   *\r\n   * @private\r\n   */\n  function Selection(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.isdrawRect = true;\n    _this.multiDataIndexes = [];\n    _this.pathIndex = 0;\n    _this.seriesIndex = 0;\n    _this.count = -1;\n    _this.dragRectArray = [];\n    _this.filterArray = [];\n    _this.totalSelectedPoints = [];\n    _this.chart = chart;\n    _this.renderer = chart.renderer;\n    var mode = chart.selectionMode;\n    _this.isMultiDrag = chart.isMultiSelect && mode.indexOf('Drag') > -1;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\r\n   * Adds event listeners for the chart.\r\n   *\r\n   * @returns {void}\r\n   */\n  Selection.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed || this.chart.stockChart && this.chart.stockChart.onPanning) {\n      return;\n    }\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.mouseLeave, this);\n    this.chart.on('click', this.mouseClick, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\n  };\n  /**\r\n   * Handles the mousedown event.\r\n   *\r\n   * @private\r\n   * @param {Event} e - The event object.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.mousedown = function (e) {\n    var chart = this.chart;\n    if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n      return;\n    }\n    if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n      this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n    }\n  };\n  /**\r\n   * UnBinding events for selection module.\r\n   *\r\n   * @returns {void}\r\n   */\n  Selection.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\n    this.chart.off('click', this.mouseClick);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.mouseLeave);\n  };\n  /**\r\n   * Initializes private variables for the chart.\r\n   *\r\n   * @private\r\n   * @param {Chart} chart - The chart instance.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.closeIconId = chart.element.id + '_ej2_drag_close';\n    this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n    this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n    this.draggedRect = chart.element.id + '_ej2_drag_rect';\n    this.lassoPath = chart.element.id + '_ej2_drag_path';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\r\n   * Method to select the point and series.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n    if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n      this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    }\n  };\n  Selection.prototype.generateStyle = function (series) {\n    if (series) {\n      if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n        this.unselected = series.unSelectedStyle || this.unselected;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        this.unselected = series.nonHighlightStyle || this.unselected;\n      }\n      return series.selectionStyle || this.styleId + '_series_' + series.index;\n    }\n    return 'undefined';\n  };\n  /**\r\n   * Selects data points in the chart based on the provided indexes.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Index[]} indexes - An array of Index objects specifying the series and point indexes to be selected.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index, '', this.series[index.series].marker.visible)[0]);\n    }\n  };\n  /**\r\n   * Retrieves the DOM elements corresponding to the specified data point index.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Index} index - The index object specifying the series and point indexes.\r\n   * @param {string} [suffix=''] - Optional suffix to be appended to the element IDs.\r\n   * @param {boolean} [marker] - Optional parameter to specify whether to retrieve marker elements. Default is false.\r\n   * @returns {Element[]} - An array of DOM elements corresponding to the specified data point index.\r\n   */\n  Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n    var series = chart.series[index.series];\n    elementId = series.type !== 'Scatter' && series.type !== 'Bubble' && marker ? elementId + '_Symbol' + suffix : elementId;\n    return [getElement(elementId), (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') && series.marker.visible ? getElement(elementId + '1') : null];\n  };\n  /**\r\n   * Retrieves the DOM elements corresponding to the cluster of data points at the specified index.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Index} index - The index object specifying the series and point indexes.\r\n   * @returns {Element[]} - An array of DOM elements corresponding to the cluster of data points at the specified index.\r\n   */\n  Selection.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      if (series.visible) {\n        index = new Index(series.index, index.point);\n        if (series.isRectSeries) {\n          clusters.push(this.getElementByIndex(chart, index)[0]);\n        }\n        clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n        seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n        selectedElements = document.querySelectorAll('.' + seriesStyle);\n        this.findTrackballElements(selectedElements, seriesStyle);\n        var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n        if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== (clusters[clusters.length - clusterIndex] ? clusters[clusters.length - clusterIndex].id : '')) {\n          this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n        }\n      }\n    }\n    return clusters;\n  };\n  /**\r\n   * Finds the elements within the selected elements that match the specified class name.\r\n   *\r\n   * @param {Element[] | NodeListOf<HTMLElement>} selectedElements - The elements to search within.\r\n   * @param {string} className - The class name to search for.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.findTrackballElements = function (selectedElements, className) {\n    var trackballElements;\n    var elements;\n    for (var i = 0; i < selectedElements.length; i++) {\n      if (!isNullOrUndefined(selectedElements[i])) {\n        trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ? [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n        if (trackballElements.length > 0) {\n          elements = [];\n          for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n            if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n              elements.push(trackballElements[i_1]);\n            }\n          }\n          this.removeStyles(elements);\n        }\n      }\n    }\n  };\n  /**\r\n   * Finds the elements in the chart corresponding to the specified series and data point index.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {SeriesModel} series - The series for which to find the elements.\r\n   * @param {Index} index - The index of the data point.\r\n   * @param {string} [suffix=''] - A suffix to append to the element IDs.\r\n   * @param {boolean} [marker] - Specifies whether to include marker elements.\r\n   * @returns {Element[]} - An array of elements corresponding to the specified series and data point index.\r\n   */\n  Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index, suffix, marker);\n    }\n  };\n  /**\r\n   * Checks if the target element is already selected for the specified event type.\r\n   *\r\n   * @param {Element} targetElem - The target element to check.\r\n   * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\r\n   * @returns {boolean} - A boolean value indicating whether the target element is already selected for the specified event type.\r\n   */\n  Selection.prototype.isAlreadySelected = function (targetElem, eventType) {\n    if (eventType === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + '_ej2_chart_selection';\n    } else if (eventType === 'mousemove' || eventType === 'pointermove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (eventType === 'click') {\n        return false;\n      }\n    }\n    if ((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var parentNodeId = targetElem.parentNode.id;\n      var isElement = void 0;\n      if (targetElem.parentNode) {\n        isElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        if (this.previousSelectedEle[i] && this.previousSelectedEle[i].hasAttribute('class')) {\n          if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || eventType === 'click')) {\n            this.previousSelectedEle[i].removeAttribute('class');\n            if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n              if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                  this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                }\n              } else {\n                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n              }\n            }\n            this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n          } else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n          }\n        }\n      }\n    }\n    return true;\n  };\n  Selection.prototype.mouseClick = function (event) {\n    this.calculateSelectedElements(event.target, event.type);\n    if (this.chart.isTouch && Browser.isDevice && this.chart.highlightModule && this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 && event.target.id.indexOf('_chart_legend_') === -1 && event.target.id.indexOf('_Series_') === -1) {\n      this.removeLegendHighlightStyles();\n    }\n  };\n  /**\r\n   * Calculates the selected elements based on the target element and event type.\r\n   *\r\n   * @param {HTMLElement} targetElement - The target element for which to calculate selected elements.\r\n   * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\r\n   * @returns {void}\r\n   */\n  Selection.prototype.calculateSelectedElements = function (targetElement, eventType) {\n    if (isNullOrUndefined(targetElement)) {\n      return;\n    }\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id && targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n      return;\n    }\n    if (eventType === 'mousemove' || eventType === 'pointermove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') && (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n    this.isAlreadySelected(targetElement, eventType);\n    if (targetElement.id && targetElement.id.indexOf('_Series_') > -1 && targetElement.id.indexOf('_Text_') === -1) {\n      var element = void 0;\n      if (targetElement.id.indexOf('_Trackball_1') > -1) {\n        element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n        element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n      } else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n        return null;\n      }\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n    }\n  };\n  /**\r\n   * Performs selection based on the provided index and chart.\r\n   *\r\n   * @param {Index} index - The index for which to perform the selection.\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Element} [element] - Optional. The element associated with the selection.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.performSelection = function (index, chart, element) {\n    this.isSeriesMode = this.currentMode === 'Series';\n    if (chart.visibleSeries[index.series].type === 'BoxAndWhisker' && element && element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n      element = element.parentNode;\n    }\n    if (chart.visibleSeries[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element && element.id === this.chart.element.id + '_Series_' + index.series) {\n      var className = this.generateStyle(chart.series[index.series]);\n      var selectionEle = document.querySelectorAll('.' + className);\n      this.findTrackballElements(selectionEle, className);\n      this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n    }\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        break;\n      case 'Point':\n        if (!isNaN(index.point) && element) {\n          var pointElements = [];\n          pointElements.push(element);\n          if (pointElements[0] !== null && chart.series[index.series].marker.visible && (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n            if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n              pointElements.push(getElement(element.id + '_Symbol'));\n            } else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n              pointElements.push(getElement(element.id.replace('_Symbol', '')));\n            }\n          }\n          this.selection(chart, index, pointElements);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        break;\n      case 'Cluster':\n        if (!isNaN(index.point)) {\n          this.clusterSelection(chart, index);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        break;\n    }\n  };\n  /**\r\n   * Completes the selection process based on the provided index and selection mode.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Index} index - The index for which the selection is completed.\r\n   * @param {SelectionMode | HighlightMode} selectionMode - The selection mode.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n            if (!isNaN(pointIndex) && pointIndex < points.length) {\n              yValue = series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1 ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n              selectedPointX = points[pointIndex].xValue;\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n              if (series.category !== 'Indicator') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: yValue,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n              if (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: points[pointIndex].regions[0].y,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          if (this.selectedDataIndexes.length > 0) {\n            selectedPointValues.push({\n              seriesIndex: seriesIndex\n            });\n          }\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : this.highlightDataIndexes && this.highlightDataIndexes.length > 0 ? this.highlightDataIndexes[0].series : 0;\n        if (this.selectedDataIndexes.length > 0 || this.highlightDataIndexes && this.highlightDataIndexes.length > 0) {\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      }\n    } else if (selectionMode === 'Point') {\n      var selectedData = [];\n      if (this.styleId.indexOf('highlight') > -1) {\n        selectedData = this.highlightDataIndexes;\n      } else {\n        selectedData = this.selectedDataIndexes;\n      }\n      for (var i = 0; i < selectedData.length; i++) {\n        pointIndex = selectedData[i].point;\n        seriesIndex = selectedData[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1 ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false,\n      chart: chart\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\r\n   * Handles the selection logic for the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Index} index - The index of the selected data point.\r\n   * @param {Element[]} selectedElements - The elements representing the selected data point.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.selection = function (chart, index, selectedElements) {\n    if (!(this.currentMode === 'Lasso')) {\n      if (!chart.isMultiSelect && this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n        this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n      }\n    }\n    var indexValue = this.rangeColorMappingEnabled() ? 0 : index.series;\n    if (!isNullOrUndefined(selectedElements[0])) {\n      if (chart.visibleSeries[indexValue].isRectSeries) {\n        if (selectedElements[0].id) {\n          if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n            selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n          } else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n            if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n              selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n            }\n          }\n        }\n      }\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n      if (className !== '' && this.currentMode !== 'Cluster') {\n        this.findTrackballElements(selectedElements, className);\n      }\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles([selectedElements[0].parentNode]);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight ? selectedElements : [];\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\r\n   * Handles the selection logic for clustered data points in the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Index} index - The index of the selected clustered data point.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\r\n   * Removes the multi-selected elements from the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Index[]} index - The indices of the multi-selected elements to be removed.\r\n   * @param {Index} currentIndex - The index of the current selected element.\r\n   * @param {SeriesModel[]} seriesCollection - The collection of series in the chart.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i], '', false));\n        if (series.marker.visible) {\n          this.removeStyles(this.findElements(chart, series, index[i], '', true));\n        }\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\r\n   * Applies a blur effect to a specific chart or legend.\r\n   *\r\n   * @param {string} chartId - The ID of the chart or legend.\r\n   * @param {Series[]} visibleSeries - The collection of visible series in the chart.\r\n   * @param {boolean} isLegend - Indicates whether the blur effect should be applied to a legend. Defaults to false.\r\n   * @param {number} index - The index of the series or legend item to which the blur effect should be applied. Defaults to 0.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.blurEffect = function (chartId, visibleSeries, isLegend, index) {\n    if (isLegend === void 0) {\n      isLegend = false;\n    }\n    if (index === void 0) {\n      index = 0;\n    }\n    var visibility = this.checkVisibility(this.highlightDataIndexes, this.chart) || this.checkVisibility(this.selectedDataIndexes, this.chart); // legend click scenario\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n      var legendIndex = void 0;\n      var legendStrokeColor = void 0;\n      if (this.rangeColorMappingEnabled()) {\n        if (isLegend === false) {\n          legendIndex = Object.keys(series.rangeColorPoints).indexOf(series.points[index].interior);\n          legendStrokeColor = series.points[index].interior;\n        } else {\n          legendIndex = index;\n          legendStrokeColor = document.getElementById(chartId + '_chart_legend_shape_' + index).getAttribute('fill');\n        }\n      } else {\n        legendIndex = series.index;\n        legendStrokeColor = this.chart.visibleSeries[series.index].interior;\n      }\n      if (series.visible) {\n        this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        }\n      }\n    }\n  };\n  /**\r\n   * Checks and updates the selection state of elements based on the provided criteria.\r\n   *\r\n   * @param {Element} element - The element to check for selection.\r\n   * @param {string} className - The class name used for selecting elements.\r\n   * @param {boolean} visibility - The visibility state of the element.\r\n   * @param {boolean} isLegend - Indicates whether the element is a legend. Defaults to true.\r\n   * @param {number} series - The index of the series associated with the element. Defaults to 0.\r\n   * @param {string} legendStrokeColor - The stroke color of the legend. Defaults to '#D3D3D3'.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\n    if (isLegend === void 0) {\n      isLegend = true;\n    }\n    if (series === void 0) {\n      series = 0;\n    }\n    if (legendStrokeColor === void 0) {\n      legendStrokeColor = '#D3D3D3';\n    }\n    var children = this.isSeriesMode ? element.childNodes || [element] : element.childNodes || element;\n    if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n      children = element.childNodes || element;\n    }\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n      if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n        className = parentClassName.indexOf('selection') > 0 || parentClassName.indexOf('highlight') > 0 ? parentClassName : className;\n      }\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        if (children[i].id !== '' && elementClassName.indexOf(this.unselected) !== -1 && parentClassName.indexOf(className) === -1) {\n          this.highlightAnimation(children[i], this.chart.series.length === 1 ? 0 : this.indexFinder(children[i].id).series, 700, 0.3);\n        }\n      }\n      if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        this.addSvgClass(children[i], className);\n      }\n    }\n    if (element.id.indexOf('Symbol') > -1) {\n      if (element.querySelectorAll('.' + className)[0] && element.querySelectorAll('.' + className)[0].getAttribute('class') === className) {\n        var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n        var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n        if (seriesClassName.indexOf(this.unselected) > -1) {\n          this.removeSvgClass(symbolEle, this.unselected);\n        }\n      }\n    }\n    if (this.control.legendModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n          if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n            legendShape.setAttribute('stroke', legendStrokeColor);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', legendStrokeColor);\n            }\n          }\n        }\n        elementClassName = selectElement.getAttribute('class') || '';\n        parentClassName = selectElement.parentNode.getAttribute('class') || '';\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight ? className : this.unselected);\n          this.removeSvgClass(legendShape, className);\n          if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n          if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n          if (elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n            if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && this.chart.highlightColor !== 'transparent' && !isNullOrUndefined(this.chart.highlightColor)) {\n              legendShape.setAttribute('stroke', this.chart.highlightColor);\n              if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                legendShape.setAttribute('fill', this.chart.highlightColor);\n              }\n            }\n          }\n        }\n        var legendItemsId = void 0;\n        if (this.rangeColorMappingEnabled()) {\n          for (var i = 0; i < this.chart.rangeColorSettings.length; i++) {\n            legendItemsId = document.getElementById(this.chart.element.id + '_chart_legend_shape_' + i);\n            if (legendShape !== legendItemsId) {\n              this.addSvgClass(legendItemsId, this.unselected);\n            } else if (isLegend === true) {\n              this.addSvgClass(legendItemsId, className);\n            }\n            if (elementClassName.indexOf(className) === -1 && isLegend === false) {\n              this.removeSvgClass(legendItemsId, this.unselected);\n            }\n          }\n        }\n        if (isLegend && parentClassName.indexOf(className) > -1) {\n          this.addSvgClass(legendShape, className);\n        }\n      }\n    }\n  };\n  /**\r\n   * Applies styles to the specified elements.\r\n   *\r\n   * @param {Element[]} elements - The elements to which styles will be applied.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        if (this.chart.series[0].pointColorMapping === 'fill' || this.rangeColorMappingEnabled()) {\n          var className = this.getSelectionClass(element.id);\n          var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n          var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n          var pattern = void 0;\n          if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n            pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n          }\n          if (element.id.indexOf('legend') === -1 && element.id.indexOf('Group') === -1 && pattern != null) {\n            for (var i = 1; i < pattern.children.length; i++) {\n              pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n              pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n            }\n          }\n        }\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n        if (element.id.indexOf('Group') > 0) {\n          var seriesIndex = this.indexFinder(element.id);\n          for (var i = 0; i < element.children.length; i++) {\n            if (element.children[i].nodeName !== 'defs') {\n              this.stopElementAnimation(element.children[i], seriesIndex.series);\n            }\n          }\n        }\n        if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None' && this.chart.highlightColor !== 'transparent') {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.chart.highlightColor);\n            }\n          } else {\n            element.setAttribute('fill', this.chart.highlightColor);\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Gets the CSS class for selection based on the provided identifier.\r\n   *\r\n   * @param {string} id - The identifier used to determine the selection class.\r\n   * @returns {string} - The CSS class for selection.\r\n   */\n  Selection.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.visibleSeries[this.indexFinder(id).series]);\n  };\n  /**\r\n   * Removes styles from the provided elements.\r\n   *\r\n   * @param {Element[]} elements - The elements from which styles will be removed.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n            }\n          } else {\n            element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Adds or removes an index from the provided array of indexes.\r\n   *\r\n   * @param {Index[]} indexes - The array of indexes.\r\n   * @param {Index} index - The index to add or remove.\r\n   * @param {boolean} [isAdd] - Optional parameter to specify whether to add or remove the index. Defaults to true (add).\r\n   * @returns {void}\r\n   */\n  Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\r\n   * Checks if two Index objects are equal.\r\n   *\r\n   * @param {Index} first - The first Index object.\r\n   * @param {Index} second - The second Index object.\r\n   * @param {boolean} checkSeriesOnly - Specifies whether to check series properties only.\r\n   * @returns {boolean} - True if the two Index objects are equal, otherwise false.\r\n   */\n  Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\r\n   * Redraws the selection or highlight on the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {SelectionMode | HighlightMode} oldMode - The previous selection or highlight mode.\r\n   * @param {boolean} chartRedraw - Specifies whether to redraw the entire chart.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n    this.isSeriesMode = oldMode === 'Series';\n    if (!isNullOrUndefined(oldMode)) {\n      if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n        chart.isRedrawSelection = false;\n      } else {\n        chart.isRedrawSelection = true;\n      }\n    }\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries, false);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /**\r\n   * Handles selection on legend item click.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {number} series - The index of the series.\r\n   * @param {Element} targetElement - The target element clicked.\r\n   * @param {string} eventType - The type of event triggered.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n    if (eventType === 'mousemove') {\n      if (targetElement.id.indexOf('text') > 1) {\n        targetElement = getElement(targetElement.id.replace('text', 'shape'));\n      }\n      if (targetElement.id.indexOf('marker') > 1) {\n        targetElement = getElement(targetElement.id.replace('_marker', ''));\n      }\n      if (targetElement.id.indexOf('g') > 1) {\n        targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n      }\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      this.currentMode = this.chart.highlightMode;\n    }\n    var isPreSelected = this.isAlreadySelected(targetElement, eventType);\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n          }\n        }\n        var seriesElements = [];\n        if (this.rangeColorMappingEnabled()) {\n          for (var i = 0, a = chart.visibleSeries[0].seriesElement.children; i < a.length; i++) {\n            var point = a[i];\n            if (targetElement.getAttribute('fill') === point.getAttribute('fill')) {\n              seriesElements.push(point);\n            }\n          }\n          for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n            var element = seriesElements_1[_b];\n            if (isNullOrUndefined(element)) {\n              return;\n            }\n            this.checkSelectionElements(element, seriesStyle, false, true, series);\n          }\n        } else {\n          seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n          for (var _c = 0, seriesElements_2 = seriesElements; _c < seriesElements_2.length; _c++) {\n            var seriesElement = seriesElements_2[_c];\n            if (isNullOrUndefined(seriesElement)) {\n              return;\n            }\n            this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n          }\n        }\n        this.isSeriesMode = true;\n        this.selection(chart, new Index(series, NaN), seriesElements);\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, true, series);\n      }\n    }\n  };\n  /**\r\n   * Checks if range color mapping is enabled for the chart.\r\n   *\r\n   * @returns {boolean} - Returns true if range color mapping is enabled, otherwise false.\r\n   */\n  Selection.prototype.rangeColorMappingEnabled = function () {\n    if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 && this.chart.rangeColorSettings[0].colors.length > 0 && (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' || this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series);\n          }\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /**\r\n   * Retrieves the SVG elements associated with a particular series in the chart.\r\n   *\r\n   * @param {SeriesModel} series - The series for which to retrieve the SVG elements.\r\n   * @returns {Element[]} - An array of SVG elements representing the series.\r\n   */\n  Selection.prototype.getSeriesElements = function (series) {\n    var seriesElements = [series.seriesElement];\n    if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    } else if (series.marker.visible && series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    }\n    return seriesElements;\n  };\n  /**\r\n   * Finds the index associated with a particular element ID.\r\n   *\r\n   * @param {string} id - The ID of the element to find the index for.\r\n   * @returns {Index} - The index associated with the element ID.\r\n   */\n  Selection.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n    if (id.indexOf('SeriesGroup') > -1) {\n      ids = id.split('SeriesGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('SymbolGroup') > -1) {\n      ids = id.split('SymbolGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('_Point_') > -1) {\n      ids = id.split('_Series_')[1].split('_Point_');\n    } else if (id.indexOf('_border_') > -1) {\n      ids[0] = id.split('_border_')[1];\n    } else if (id.indexOf('_Series_') > -1) {\n      ids[0] = id.split('_Series_')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    }\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\r\n   * Calculates the elements selected by dragging a rectangle on the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Rect} dragRect - The rectangle representing the selection area.\r\n   * @param {boolean} isClose - Flag indicating whether the selection should be close.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n    this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    var isLasso = chart.selectionMode === 'Lasso';\n    var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n    this.removeOffset(rect, axisOffset);\n    var points;\n    var index;\n    var selectedPointValues = [];\n    var selectedSeriesValues = [];\n    this.isSeriesMode = false;\n    var isDragResize = chart.allowMultiSelection && (this.rectGrabbing || this.resizing);\n    this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    if (dragRect.width && dragRect.height && !isClose) {\n      var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n      this.removeOffset(rt, axisOffset);\n      this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n    }\n    var _loop_1 = function (series) {\n      if (series.visible) {\n        points = series.points;\n        selectedPointValues = [];\n        var xAxisOffset_1;\n        var yAxisOffset_1;\n        if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) && !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n          xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n          yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n        } else {\n          xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n          yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n        }\n        for (var j = 0; j < points.length; j++) {\n          var yValue = series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1 ? points[j].yValue : points[j].regions[0].y;\n          var isCurrentPoint = void 0;\n          var selectedPointX = points[j].xValue;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[j].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[j].xValue);\n          }\n          if (series.type === 'BoxAndWhisker') {\n            isCurrentPoint = points[j].regions.some(function (region) {\n              return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n            });\n          } else {\n            if (chart.selectionMode === 'Lasso') {\n              isCurrentPoint = points[j].isSelect;\n            } else {\n              isCurrentPoint = chart.allowMultiSelection ? this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) : points[j].symbolLocations.some(function (location) {\n                return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n              });\n            }\n          }\n          if (isCurrentPoint && series.category !== 'Indicator') {\n            index = new Index(series.index, points[j].index);\n            this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: yValue\n            });\n          }\n          if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea')) {\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: points[j].regions[0].y\n            });\n          }\n        }\n        selectedSeriesValues.push(selectedPointValues);\n      }\n    };\n    var this_1 = this;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      _loop_1(series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    var x = isLasso ? chart.mouseDownX : dragRect.x + dragRect.width;\n    var y = isLasso ? chart.mouseDownY : dragRect.y;\n    if (!isClose) {\n      this.createCloseButton(x, y);\n    }\n    var args = {\n      name: dragComplete,\n      selectedDataValues: selectedSeriesValues,\n      cancel: false\n    };\n    chart.trigger(dragComplete, args);\n  };\n  Selection.prototype.removeOffset = function (rect, clip) {\n    rect.x -= clip.x;\n    rect.y -= clip.y;\n  };\n  Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n    var location = points.symbolLocations[0];\n    for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n      var rect = rectCollection_1[_i];\n      if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * Draws the dragging rectangle on the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Rect} dragRect - The rectangle representing the dragging area.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.drawDraggingRect = function (chart, dragRect) {\n    var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n    var border = chart.chartArea.border.width;\n    var rectFill = chart.themeStyle.selectionRectFill;\n    var rectStroke = chart.themeStyle.selectionRectStroke;\n    var isLasso = chart.selectionMode === 'Lasso';\n    if (this.isdrawRect) {\n      cartesianLayout.x = cartesianLayout.x - border / 2;\n      cartesianLayout.y = cartesianLayout.y - border / 2;\n      cartesianLayout.width = cartesianLayout.width + border;\n      cartesianLayout.height = cartesianLayout.height + border;\n      this.isdrawRect = false;\n    }\n    switch (chart.selectionMode) {\n      case 'DragX':\n        dragRect.y = cartesianLayout.y;\n        dragRect.height = cartesianLayout.height;\n        break;\n      case 'DragY':\n        dragRect.x = cartesianLayout.x;\n        dragRect.width = cartesianLayout.width;\n        break;\n    }\n    if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n      return null;\n    }\n    var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n    if (chart.allowMultiSelection && isDragMode) {\n      var element = void 0;\n      var dragGroup = void 0;\n      var multiGroup = getElement(this.multiRectGroup);\n      if (!multiGroup) {\n        multiGroup = chart.svgRenderer.createGroup({\n          id: this.multiRectGroup\n        });\n        chart.svgObject.appendChild(multiGroup);\n      }\n      if (this.rectGrabbing || this.resizing) {\n        var rectElement = getElement(this.draggedRect + this.targetIndex);\n        if (rectElement.nextSibling) {\n          remove(rectElement.nextSibling);\n        }\n        this.setAttributes(rectElement, dragRect);\n      } else if (!getElement(this.draggedRectGroup + this.count)) {\n        dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup + this.count\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        if (chart.enableCanvas) {\n          svgElement.appendChild(dragGroup);\n        } else {\n          multiGroup.appendChild(dragGroup);\n        }\n        // chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n      }\n      if (!(chart.selectionMode === 'Lasso')) {\n        element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, {\n          color: rectStroke,\n          width: 1\n        }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\n        element.style.cursor = 'move';\n      } else {\n        element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n      }\n      if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n        getElement(this.draggedRectGroup + this.count).appendChild(element);\n      } else if (!this.rectGrabbing && !this.resizing) {\n        dragGroup.appendChild(element);\n      }\n    } else {\n      var element = isLasso ? getElement(this.lassoPath) : getElement(this.draggedRect);\n      if (this.closeIcon) {\n        removeElement(this.closeIconId);\n      }\n      if (element) {\n        if (isLasso) {\n          element.setAttribute('d', this.path);\n        } else {\n          this.setAttributes(element, dragRect);\n        }\n      } else {\n        var dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        if (chart.enableCanvas) {\n          svgElement.appendChild(dragGroup);\n        } else {\n          chart.svgObject.appendChild(dragGroup);\n        }\n        // chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n        if (!(chart.selectionMode === 'Lasso')) {\n          element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, {\n            color: rectStroke,\n            width: 1\n          }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\n        } else {\n          element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n        }\n        //element.setAttribute('style', 'cursor:move;');\n        dragGroup.appendChild(element);\n      }\n    }\n  };\n  /**\r\n   * Retrieves the index of a particular item based on its identifier.\r\n   *\r\n   * @param {string} id - The identifier of the item.\r\n   * @returns {number} - The index of the item, or -1 if not found.\r\n   */\n  Selection.prototype.getIndex = function (id) {\n    var i;\n    for (i = id.length - 1; i > 0; i--) {\n      var x = Number(id[i]);\n      if (!isNaN(x)) {\n        continue;\n      } else {\n        break;\n      }\n    }\n    var index = +id.substr(i + 1, id.length - 1);\n    return index;\n  };\n  Selection.prototype.createCloseButton = function (x, y) {\n    var isMultiDrag = this.chart.allowMultiSelection;\n    var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n    var isDrag = this.rectGrabbing || this.resizing;\n    var closeIcon = this.chart.svgRenderer.createGroup({\n      id: this.closeIconId + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      style: 'cursor:pointer; visibility: visible;'\n    });\n    closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''), '#FFFFFF', {\n      color: circleStroke,\n      width: 1\n    }, 1, x, y, 10)));\n    var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) + ' L ' + (x + 4) + ' ' + (y - 4);\n    closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n      id: this.closeIconId + '_cross' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      d: direction,\n      stroke: circleStroke,\n      'stroke-width': 2,\n      fill: circleStroke\n    }));\n    this.closeIcon = closeIcon;\n    var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''));\n    if (pathElement) {\n      pathElement.appendChild(closeIcon);\n    }\n  };\n  /**\r\n   * Method to remove dragged element.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Selection.prototype.removeDraggedElements = function (chart, targetElement, eventType) {\n    if (targetElement.id && targetElement.id.indexOf(this.closeIconId) > -1 && eventType.indexOf('move') === -1) {\n      var isSelectedvalues = true;\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(targetElement.id);\n        var multiRectGroupElement = getElement(this.multiRectGroup);\n        remove(getElement(this.draggedRectGroup + index));\n        this.dragRectArray[index] = null;\n        this.filterArray[index] = null;\n        this.totalSelectedPoints[index] = null;\n        if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n          removeElement(multiRectGroupElement);\n          this.dragRectArray = [];\n          this.filterArray = [];\n          this.totalSelectedPoints = [];\n        }\n        if (this.currentMode === 'Lasso') {\n          if (this.multiDataIndexes[index] != null) {\n            for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n              this.multiDataIndexes[index][i].isSelect = false;\n            }\n          }\n          this.multiDataIndexes[index] = null;\n          for (var j = 0; j < this.multiDataIndexes.length; j++) {\n            if (this.multiDataIndexes[j] != null) {\n              isSelectedvalues = false;\n              for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                this.multiDataIndexes[j][k].isSelect = true;\n              }\n            }\n          }\n          this.calculateDragSelectedElements(chart, this.dragRect, true);\n        } else if (this.filterArray.length) {\n          for (var i = 0; i < this.filterArray.length; i++) {\n            if (this.filterArray[i]) {\n              isSelectedvalues = false;\n              this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n            }\n          }\n        } else {\n          this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n        }\n      } else {\n        remove(getElement(this.draggedRectGroup));\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n      }\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n      this.changeCursorStyle(false, chart.svgObject, 'auto');\n      if (!chart.allowMultiSelection || isSelectedvalues) {\n        this.rectPoints = null;\n      }\n    }\n  };\n  /**\r\n   * Updates the selection rectangle during resizing.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {ChartLocation} location - The location of the resizing action.\r\n   * @param {boolean} [tapped=false] - Indicates whether the resizing action was initiated by tapping.\r\n   * @param {Element} [target] - The target element of the resizing action.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n    var rect;\n    if (chart.allowMultiSelection && target.id.indexOf('_ej2_drag_rect') > -1 || this.dragRectArray[this.targetIndex]) {\n      if (target.id.indexOf('_ej2_drag_rect') > -1) {\n        this.targetIndex = this.getIndex(target.id);\n      }\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    }\n    if (!chart.allowMultiSelection) {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    if (rect) {\n      var resize = this.findResizeMode(chart.svgObject, rect, location);\n      if (this.resizing) {\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, chart.chartAxisLayoutPanel.seriesClipRect);\n        this.drawDraggingRect(chart, rect);\n        this.dragRect = rect;\n      }\n      if (tapped) {\n        this.resizing = resize;\n      }\n    } else {\n      return;\n    }\n  };\n  Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n    var cursorStyle = 'se-resize';\n    var resize = false;\n    if (!this.resizing) {\n      var resizeEdges = [new Rect(rect.x, rect.y, rect.width - 5, 5), new Rect(rect.x, rect.y, 5, rect.height), new Rect(rect.x, rect.y + rect.height - 5, rect.width - 5, 5), new Rect(rect.x + rect.width - 5, rect.y + 5, 5, rect.height - 15), new Rect(rect.x + rect.width - 10, rect.y + rect.height - 10, 10, 10)]; //corner\n      for (var i = 0; i < resizeEdges.length; i++) {\n        if (withInBounds(location.x, location.y, resizeEdges[i])) {\n          cursorStyle = i === 4 ? cursorStyle : i % 2 === 0 ? 'ns-resize' : 'ew-resize';\n          resize = true;\n          this.resizeMode = i;\n          break;\n        }\n      }\n    } else {\n      var x = rect.x;\n      var y = rect.y;\n      var width = location.x - x;\n      var height = location.y - y;\n      switch (this.resizeMode) {\n        case 0:\n          height = Math.abs(rect.height + rect.y - location.y);\n          rect.y = Math.min(rect.height + rect.y, location.y);\n          rect.height = height;\n          break;\n        case 1:\n          width = Math.abs(rect.width + rect.x - location.x);\n          rect.x = Math.min(rect.width + rect.x, location.x);\n          rect.width = width;\n          break;\n        case 2:\n          rect.height = Math.abs(height);\n          rect.y = Math.min(location.y, y);\n          break;\n        case 3:\n          rect.width = Math.abs(width);\n          rect.x = Math.min(location.x, x);\n          break;\n        case 4:\n          rect.width = Math.abs(width);\n          rect.height = Math.abs(height);\n          rect.x = Math.min(location.x, x);\n          rect.y = Math.min(location.y, y);\n          break;\n      }\n    }\n    if (this.currentMode !== 'Lasso') {\n      this.changeCursorStyle(resize, getElement(this.chart.allowMultiSelection ? this.draggedRect + this.targetIndex : this.draggedRect), cursorStyle);\n    }\n    this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n    return resize;\n  };\n  Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n    cursorStyle = isResize ? cursorStyle : this.control.svgObject === rectelement ? 'auto' : 'move';\n    if (rectelement) {\n      rectelement.style.cursor = cursorStyle;\n    }\n  };\n  Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n    var seriesElements;\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      if (series.visible) {\n        seriesElements = this.getSeriesElements(series);\n        this.removeStyles(seriesElements);\n        for (var _a = 0, seriesElements_3 = seriesElements; _a < seriesElements_3.length; _a++) {\n          var seriesElement = seriesElements_3[_a];\n          this.removeStyles(this.getChildren(seriesElement));\n        }\n      }\n    }\n  };\n  Selection.prototype.setAttributes = function (ele, object) {\n    var keys = Object.keys(object);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      ele.setAttribute(key, object[key]);\n    }\n  };\n  /**\r\n   * Updates the position of the dragged rectangle.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Rect} grabbedPoint - The rectangle representing the grabbed point.\r\n   * @param {boolean} [doDrawing=false] - Indicates whether to redraw the dragging rectangle.\r\n  //  * @param {Element} [target] - The target element related to the dragging action.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing) {\n    var rect;\n    if ((this.resizing || this.rectGrabbing) && chart.allowMultiSelection) {\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    } else {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    rect.x -= grabbedPoint.x - chart.mouseX;\n    rect.y -= grabbedPoint.y - chart.mouseY;\n    rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (doDrawing) {\n      this.drawDraggingRect(chart, rect);\n    } else {\n      this.calculateDragSelectedElements(chart, rect);\n    }\n  };\n  Selection.prototype.mouseLeave = function (event) {\n    this.completeSelection(event.target, event.type);\n  };\n  /**\r\n   * Completes the selection process.\r\n   *\r\n   * @param {HTMLElement} target - The target element where the selection is completed.\r\n   * @param {string} eventType - The type of event that triggered the selection completion.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.completeSelection = function (target, eventType) {\n    var chart = this.chart;\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    this.currentMode = chart.selectionMode;\n    if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n      this.calculateDragSelectedElements(chart, this.dragRect);\n    } else if (!chart.allowMultiSelection && this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    } else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    }\n    if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n      if (this.path.indexOf('L') !== -1) {\n        if (!chart.allowMultiSelection) {\n          getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath));\n        } else if (getElement(this.lassoPath + this.count)) {\n          getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath + this.count));\n        }\n        if (this.dragging || this.resizing) {\n          this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n      }\n    }\n    this.dragging = false;\n    this.rectGrabbing = false;\n    this.resizing = false;\n    this.removeDraggedElements(chart, target, eventType);\n  };\n  Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n    return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n  };\n  /**\r\n   * Initiates the drag operation.\r\n   *\r\n   * @param {Chart} chart - The chart instance where the drag operation is initiated.\r\n   * @param {Rect} seriesClipRect - The clipping rectangle of the series.\r\n   * @param {number} mouseDownX - The X-coordinate where the mouse was pressed down.\r\n   * @param {number} mouseDownY - The Y-coordinate where the mouse was pressed down.\r\n   * @param {Event} event - The event object associated with the mouse down event.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n    var mode = chart.selectionMode;\n    this.currentMode = chart.selectionMode;\n    this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) && chart.chartAreaType !== 'PolarRadar';\n    var target = event.target;\n    this.path = undefined;\n    if (this.dragging) {\n      this.count = getElement(this.multiRectGroup) ? this.count + 1 : 0;\n      this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n      if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > seriesClipRect.x + seriesClipRect.width || chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > seriesClipRect.y + seriesClipRect.height) {\n        this.dragging = false;\n      }\n    }\n    if (mode === 'Lasso') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n            var point = _c[_b];\n            if (!chart.allowMultiSelection) {\n              point.isSelect = false;\n            }\n          }\n        }\n      }\n    }\n    if (!(mode === 'Lasso')) {\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n        this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n        this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n      }\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(target.id);\n        this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n        if (this.dragRectArray.length && this.isDragRect(target.id)) {\n          this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n          this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n        }\n      }\n    }\n  };\n  Selection.prototype.isDragRect = function (id) {\n    return id.indexOf('_ej2_drag_rect') > -1;\n  };\n  /**\r\n   * Handles the mouse move event.\r\n   *\r\n   * @param {PointerEvent | TouchEvent} event - The pointer event or touch event associated with the mouse move.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n    var eventType = event.type;\n    this.highlightChart(target, eventType);\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.selectionAndDrag(chart, target, eventType);\n  };\n  /**\r\n   * Highlights the specified chart element.\r\n   *\r\n   * @param {Element} target - The target element to highlight.\r\n   * @param {string} eventType - The type of event triggering the highlighting.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.highlightChart = function (target, eventType) {\n    if (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) {\n      if (!isNullOrUndefined(target)) {\n        if (target.id.indexOf('_legend_text') > 1) {\n          target = getElement(target.id.replace('text', 'shape'));\n        }\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n        this.calculateSelectedElements(target, eventType);\n        if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 && target.id.indexOf('_chart_legend_') === -1 && target.id.indexOf('_Series_') === -1) {\n          this.removeLegendHighlightStyles();\n        }\n      }\n      return;\n    }\n  };\n  /**\r\n   * Handles the selection and dragging functionality for the chart.\r\n   *\r\n   * @param {Chart} chart - The chart instance.\r\n   * @param {Element} target - The target element involved in the selection or dragging action.\r\n   * @param {string} eventType - The type of event triggering the selection or dragging action.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.selectionAndDrag = function (chart, target, eventType) {\n    var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (insideMoving && !this.chart.enableCanvas) {\n      if (this.rectGrabbing && !this.resizing) {\n        this.draggedRectMoved(chart, this.dragRect, true);\n      } else if (this.dragging && !this.resizing) {\n        if (chart.selectionMode === 'Lasso') {\n          this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n          this.drawDraggingRect(chart, this.dragRect);\n        } else {\n          this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n          this.drawDraggingRect(chart, this.dragRect);\n        }\n      }\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      } else if (chart.allowMultiSelection && !this.dragging || this.resizing) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      }\n    } else {\n      this.completeSelection(target, eventType);\n    }\n  };\n  /**\r\n   * Remove highlighted legend when not focused.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n  Selection.prototype.removeLegendHighlightStyles = function () {\n    this.chart.highlightModule.highlightDataIndexes = [];\n    var elementCollection;\n    for (var i = 0; i < this.chart.visibleSeries.length; i++) {\n      elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n      if (this.selectedDataIndexes.length === 0) {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            if (element.id.indexOf('Group') > 0 && !this.chart.visibleSeries[i].isRectSeries) {\n              var seriesIndex = this.indexFinder(element.id);\n              for (var j = 0; j < element.children.length; j++) {\n                if (element.children[j].nodeName !== 'defs') {\n                  this.highlightAnimation(element.children[j], seriesIndex.series, 700, 0.3, true);\n                }\n              }\n            }\n          }\n        }\n        elementCollection = document.getElementsByClassName(this.unselected);\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            if (element.id !== '') {\n              this.highlightAnimation(element, this.chart.series.length === 1 ? 0 : this.indexFinder(element.id).series, 700, 0.3);\n            }\n          }\n        }\n      } else {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            this.addSvgClass(element, this.unselected);\n          }\n        }\n      }\n    }\n  };\n  Selection.prototype.getPath = function (startX, startY, endX, endY) {\n    if (this.dragging) {\n      if (this.path) {\n        this.path = this.path + ' L' + endX + ' ' + endY;\n      } else {\n        this.path = 'M ' + startX + ' ' + startY;\n      }\n    }\n  };\n  /**\r\n   * Performs a highlight animation on the specified HTML element.\r\n   *\r\n   * @param {HTMLElement} element - The HTML element to animate.\r\n   * @param {number} index - The index to find the opacity value of the series.\r\n   * @param {number} duration - The duration of the animation in milliseconds.\r\n   * @param {number} startOpacity - The starting opacity value for the animation.\r\n   * @param {boolean} strokeWidth - The starting opacity value for the animation.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.highlightAnimation = function (element, index, duration, startOpacity, strokeWidth) {\n    var endOpacity;\n    var endWidth;\n    var startWidth = parseFloat(this.chart.visibleSeries[index].width.toString()) + 1;\n    if (strokeWidth) {\n      if (element.id.indexOf('border') !== -1 && this.chart.visibleSeries[index].border.width) {\n        endWidth = parseFloat(this.chart.visibleSeries[index].border.width.toString());\n      } else if (element.id.indexOf('Symbol') !== -1 && this.chart.visibleSeries[index].marker.border.width) {\n        endWidth = parseFloat(this.chart.visibleSeries[index].marker.border.width.toString());\n      } else {\n        endWidth = parseFloat(this.chart.visibleSeries[index].width.toString());\n      }\n    } else {\n      if (element.id.indexOf('border') !== -1) {\n        endOpacity = 1;\n      } else if (element.id.indexOf('Symbol') !== -1) {\n        endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\n      } else {\n        endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\n      }\n      if (isNullOrUndefined(this.chart.selectionModule) && this.chart.selectionMode === 'None' && this.chart.highlightColor !== '') {\n        startOpacity = 1;\n      }\n    }\n    if (endOpacity || strokeWidth && endWidth && startWidth) {\n      new Animation({}).animate(element, {\n        duration: duration,\n        progress: function (args) {\n          element.style.animation = '';\n          var progress = args.timeStamp / args.duration;\n          if (strokeWidth) {\n            var currentWidth = startWidth + (endWidth - startWidth) * progress;\n            element.setAttribute('stroke-width', currentWidth.toString());\n          } else {\n            var currentOpacity = startOpacity + (endOpacity - startOpacity) * progress;\n            element.setAttribute('opacity', currentOpacity.toString());\n          }\n        },\n        end: function () {\n          if (strokeWidth) {\n            element.setAttribute('stroke-width', endWidth.toString());\n          } else {\n            element.setAttribute('opacity', endOpacity.toString());\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * Stops the animation and sets opacity of the specified HTML element.\r\n   *\r\n   * @param {HTMLElement} element - The HTML element to stop the animation.\r\n   * @param {number} index - The index to find the opacity value of the series.\r\n   * @returns {void}\r\n   */\n  Selection.prototype.stopElementAnimation = function (element, index) {\n    var endOpacity;\n    if (element.id.indexOf('border') !== -1) {\n      endOpacity = 1;\n    } else if (element.id.indexOf('Symbol') !== -1) {\n      endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\n    } else {\n      endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\n    }\n    if (element.getAttribute('e-animate')) {\n      Animation.stop(element);\n    }\n    element.setAttribute('opacity', endOpacity.toString());\n  };\n  Selection.prototype.pointChecking = function (path) {\n    var _this = this;\n    var chart = this.chart;\n    var element;\n    var svgRect = getElement(chart.svgId).getBoundingClientRect();\n    var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n    var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n    this.multiDataIndexes[this.count] = [];\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.points.filter(function (point) {\n        // To check whether the point have symbol location value or not.\n        if (point.symbolLocations && point.symbolLocations.length) {\n          element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n        }\n        if (element === path) {\n          point.isSelect = true;\n          if (_this.chart.allowMultiSelection && _this.currentMode === 'Lasso') {\n            _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n            _this.seriesIndex++;\n          }\n        } else if (!chart.allowMultiSelection) {\n          point.isSelect = false;\n        }\n      });\n    }\n    this.seriesIndex = 0;\n  };\n  /**\r\n   * Get module name.\r\n   *\r\n   * @private\r\n   * @returns {string} - Returns the module name.\r\n   */\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\r\n   * To destroy the selection.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Selection.prototype.destroy = function () {\n    this.removeEventListener();\n    // Destroy method performed here\n  };\n  return Selection;\n}(BaseSelection);\nexport { Selection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Animation","Browser","remove","extend","isNullOrUndefined","ChartLocation","RectOption","CircleOption","withInBounds","getDraggedRectLocation","removeElement","getElement","Rect","PathOption","Index","dragComplete","selectionComplete","BaseSelection","Selection","_super","chart","_this","call","isdrawRect","multiDataIndexes","pathIndex","seriesIndex","count","dragRectArray","filterArray","totalSelectedPoints","renderer","mode","selectionMode","isMultiDrag","isMultiSelect","indexOf","addEventListener","isDestroyed","stockChart","onPanning","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","mouseLeave","mouseClick","touchStartEvent","mousedown","touchEndEvent","e","isPointMouseDown","isChartDrag","isDoubleTap","isTouch","rectPoints","dragStart","chartAxisLayoutPanel","seriesClipRect","mouseDownX","mouseDownY","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","closeIconId","draggedRectGroup","multiRectGroup","draggedRect","lassoPath","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","unSelectedStyle","highlightMode","legendSettings","enableHighlight","nonHighlightStyle","selectionStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","marker","visible","suffix","elementId","point","type","getClusterElements","clusters","seriesStyle","selectedElements","_a","isRectSeries","push","document","querySelectorAll","findTrackballElements","clusterIndex","removeSelection","className","trackballElements","elements","i","parentNode","slice","i_1","removeStyles","findElements","getSeriesElements","isAlreadySelected","targetElem","eventType","highlightDataIndexes","previousSelectedEle","parentNodeId","isElement","hasAttribute","getAttribute","removeAttribute","highlightColor","highlightPattern","j","children","setAttribute","control","indexFinder","interior","addOrRemoveIndex","event","calculateSelectedElements","target","isDevice","highlightModule","removeLegendHighlightStyles","targetElement","split","selectionEle","blurEffect","selection","isNaN","pointElements","replace","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","regions","y","xValue","primaryXAxis","valueType","x","toLocaleString","Date","category","selectedData","args","name","selectedDataValues","cancel","trigger","removeMultiSelectElements","indexValue","rangeColorMappingEnabled","getElementById","isAdd","pClassName","getSelectionClass","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","isLegend","visibility","checkVisibility","visibleSeries_1","legendIndex","legendStrokeColor","keys","rangeColorPoints","checkSelectionElements","childNodes","elementClassName","parentClassName","legendShape","selectElement","addSvgClass","removeSvgClass","highlightAnimation","classList","symbolEle","seriesClassName","legendModule","trim","legendItemsId","rangeColorSettings","elements_1","pointColorMapping","parseInt","patternName","selectionPattern","pattern","nodeName","stopElementAnimation","elements_2","first","second","checkSeriesOnly","redrawSelection","oldMode","chartRedraw","isRedrawSelection","removeSelectedElements","legendSelection","isPreSelected","isBlurEffectNeeded","seriesElements","a","seriesElement","_b","seriesElements_1","_c","seriesElements_2","NaN","colors","value","elements_3","symbolElement","ids","calculateDragSelectedElements","dragRect","isClose","isLasso","rect","width","height","axisOffset","removeOffset","selectedSeriesValues","isDragResize","allowMultiSelection","rectGrabbing","resizing","targetIndex","rt","_loop_1","xAxisOffset_1","yAxisOffset_1","isTransposed","xAxis","yAxis","isCurrentPoint","some","region","isSelect","this_1","isPointSelect","symbolLocations","location","createCloseButton","clip","xAxisOffset","yAxisOffset","rectCollection","rectCollection_1","drawDraggingRect","cartesianLayout","border","chartArea","rectFill","themeStyle","selectionRectFill","rectStroke","selectionRectStroke","isDragMode","dragGroup","multiGroup","svgRenderer","createGroup","svgObject","appendChild","rectElement","nextSibling","setAttributes","svgElement","enableCanvas","drawRectangle","color","theme","style","cursor","drawPath","path","closeIcon","getIndex","Number","substr","circleStroke","selectionCircleStroke","isDrag","drawCircle","direction","stroke","fill","pathElement","removeDraggedElements","isSelectedvalues","multiRectGroupElement","childElementCount","k","changeCursorStyle","resizingSelectionRect","tapped","r","resize","findResizeMode","chartSvgObject","cursorStyle","resizeEdges","resizeMode","Math","abs","min","isResize","rectelement","seriesCollection_1","seriesElements_3","getChildren","ele","object","keys_1","key","draggedRectMoved","grabbedPoint","doDrawing","mouseX","mouseY","completeSelection","dragging","pointChecking","getDragRect","chartAreaType","undefined","isDragRect","highlightChart","isIos","isIos7","preventDefault","selectionAndDrag","insideMoving","getPath","elementCollection","getElementsByClassName","startX","startY","endX","endY","duration","startOpacity","strokeWidth","endOpacity","endWidth","startWidth","parseFloat","toString","opacity","selectionModule","animate","progress","animation","timeStamp","currentWidth","currentOpacity","end","stop","svgRect","svgId","getBoundingClientRect","offsetX","max","left","offsetY","top","filter","elementFromPoint","getModuleName","destroy"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * Selection src file\r\n */\r\nimport { Animation, Browser } from '@syncfusion/ej2-base';\r\nimport { remove } from '@syncfusion/ej2-base';\r\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\r\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\r\nimport { Index } from '../../common/model/base';\r\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\r\nimport { BaseSelection } from '../../common/user-interaction/selection';\r\n/**\r\n * `Selection` module handles the selection for chart.\r\n *\r\n * @private\r\n */\r\nvar Selection = /** @class */ (function (_super) {\r\n    __extends(Selection, _super);\r\n    /**\r\n     * Constructor for selection module.\r\n     *\r\n     * @private\r\n     */\r\n    function Selection(chart) {\r\n        var _this = _super.call(this, chart) || this;\r\n        _this.isdrawRect = true;\r\n        _this.multiDataIndexes = [];\r\n        _this.pathIndex = 0;\r\n        _this.seriesIndex = 0;\r\n        _this.count = -1;\r\n        _this.dragRectArray = [];\r\n        _this.filterArray = [];\r\n        _this.totalSelectedPoints = [];\r\n        _this.chart = chart;\r\n        _this.renderer = chart.renderer;\r\n        var mode = chart.selectionMode;\r\n        _this.isMultiDrag = chart.isMultiSelect && (mode.indexOf('Drag') > -1);\r\n        _this.addEventListener();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds event listeners for the chart.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.addEventListener = function () {\r\n        if (this.chart.isDestroyed || (this.chart.stockChart && this.chart.stockChart.onPanning)) {\r\n            return;\r\n        }\r\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\r\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\r\n        this.chart.on(cancelEvent, this.mouseLeave, this);\r\n        this.chart.on('click', this.mouseClick, this);\r\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\r\n        this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\r\n    };\r\n    /**\r\n     * Handles the mousedown event.\r\n     *\r\n     * @private\r\n     * @param {Event} e - The event object.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.mousedown = function (e) {\r\n        var chart = this.chart;\r\n        if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\r\n            return;\r\n        }\r\n        if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\r\n            this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\r\n        }\r\n    };\r\n    /**\r\n     * UnBinding events for selection module.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.removeEventListener = function () {\r\n        if (this.chart.isDestroyed) {\r\n            return;\r\n        }\r\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\r\n        this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\r\n        this.chart.off('click', this.mouseClick);\r\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\r\n        this.chart.off(Browser.touchEndEvent, this.mouseLeave);\r\n    };\r\n    /**\r\n     * Initializes private variables for the chart.\r\n     *\r\n     * @private\r\n     * @param {Chart} chart - The chart instance.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.initPrivateVariables = function (chart) {\r\n        this.styleId = chart.element.id + '_ej2_chart_selection';\r\n        this.unselected = chart.element.id + '_ej2_deselected';\r\n        this.closeIconId = chart.element.id + '_ej2_drag_close';\r\n        this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\r\n        this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\r\n        this.draggedRect = chart.element.id + '_ej2_drag_rect';\r\n        this.lassoPath = chart.element.id + '_ej2_drag_path';\r\n        this.selectedDataIndexes = [];\r\n        this.rectPoints = null;\r\n        this.isSeriesMode = chart.selectionMode === 'Series';\r\n    };\r\n    /**\r\n     * Method to select the point and series.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.invokeSelection = function (chart) {\r\n        this.initPrivateVariables(chart);\r\n        this.series = extend({}, chart.visibleSeries, null, true);\r\n        this.seriesStyles();\r\n        this.currentMode = chart.selectionMode;\r\n        if (!(chart.selectionMode.indexOf('Drag') > -1)) {\r\n            this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\r\n        }\r\n    };\r\n    Selection.prototype.generateStyle = function (series) {\r\n        if (series) {\r\n            if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\r\n                this.unselected = series.unSelectedStyle || this.unselected;\r\n            }\r\n            if (this.styleId.indexOf('highlight') > 0 && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\r\n                this.unselected = series.nonHighlightStyle || this.unselected;\r\n            }\r\n            return (series.selectionStyle || this.styleId + '_series_' + series.index);\r\n        }\r\n        return 'undefined';\r\n    };\r\n    /**\r\n     * Selects data points in the chart based on the provided indexes.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Index[]} indexes - An array of Index objects specifying the series and point indexes to be selected.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.selectDataIndex = function (chart, indexes) {\r\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\r\n            var index = indexes_1[_i];\r\n            this.performSelection(index, chart, this.getElementByIndex(chart, index, '', this.series[index.series].marker.visible)[0]);\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves the DOM elements corresponding to the specified data point index.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Index} index - The index object specifying the series and point indexes.\r\n     * @param {string} [suffix=''] - Optional suffix to be appended to the element IDs.\r\n     * @param {boolean} [marker] - Optional parameter to specify whether to retrieve marker elements. Default is false.\r\n     * @returns {Element[]} - An array of DOM elements corresponding to the specified data point index.\r\n     */\r\n    Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\r\n        if (suffix === void 0) { suffix = ''; }\r\n        var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\r\n        var series = chart.series[index.series];\r\n        elementId = (series.type !== 'Scatter' && series.type !== 'Bubble' && marker) ? (elementId + '_Symbol' + suffix) : elementId;\r\n        return [getElement(elementId), ((series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') && series.marker.visible) ?\r\n                getElement(elementId + '1') : null];\r\n    };\r\n    /**\r\n     * Retrieves the DOM elements corresponding to the cluster of data points at the specified index.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Index} index - The index object specifying the series and point indexes.\r\n     * @returns {Element[]} - An array of DOM elements corresponding to the cluster of data points at the specified index.\r\n     */\r\n    Selection.prototype.getClusterElements = function (chart, index) {\r\n        var clusters = [];\r\n        var seriesStyle;\r\n        var selectedElements;\r\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\r\n            var series = _a[_i];\r\n            if (series.visible) {\r\n                index = new Index(series.index, index.point);\r\n                if (series.isRectSeries) {\r\n                    clusters.push(this.getElementByIndex(chart, index)[0]);\r\n                }\r\n                clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\r\n                seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\r\n                selectedElements = document.querySelectorAll('.' + seriesStyle);\r\n                this.findTrackballElements(selectedElements, seriesStyle);\r\n                var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\r\n                if (!chart.isMultiSelect && selectedElements.length > 0 &&\r\n                    selectedElements[0].id !== (clusters[clusters.length - clusterIndex] ? clusters[clusters.length - clusterIndex].id : '')) {\r\n                    this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\r\n                }\r\n            }\r\n        }\r\n        return clusters;\r\n    };\r\n    /**\r\n     * Finds the elements within the selected elements that match the specified class name.\r\n     *\r\n     * @param {Element[] | NodeListOf<HTMLElement>} selectedElements - The elements to search within.\r\n     * @param {string} className - The class name to search for.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.findTrackballElements = function (selectedElements, className) {\r\n        var trackballElements;\r\n        var elements;\r\n        for (var i = 0; i < selectedElements.length; i++) {\r\n            if (!isNullOrUndefined(selectedElements[i])) {\r\n                trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ?\r\n                    [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\r\n                if (trackballElements.length > 0) {\r\n                    elements = [];\r\n                    for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\r\n                        if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\r\n                            elements.push(trackballElements[i_1]);\r\n                        }\r\n                    }\r\n                    this.removeStyles(elements);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finds the elements in the chart corresponding to the specified series and data point index.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {SeriesModel} series - The series for which to find the elements.\r\n     * @param {Index} index - The index of the data point.\r\n     * @param {string} [suffix=''] - A suffix to append to the element IDs.\r\n     * @param {boolean} [marker] - Specifies whether to include marker elements.\r\n     * @returns {Element[]} - An array of elements corresponding to the specified series and data point index.\r\n     */\r\n    Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\r\n        if (suffix === void 0) { suffix = ''; }\r\n        if (this.isSeriesMode) {\r\n            return this.getSeriesElements(series);\r\n        }\r\n        else if (this.currentMode === 'Cluster') {\r\n            return this.getClusterElements(chart, index);\r\n        }\r\n        else {\r\n            return this.getElementByIndex(chart, index, suffix, marker);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the target element is already selected for the specified event type.\r\n     *\r\n     * @param {Element} targetElem - The target element to check.\r\n     * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\r\n     * @returns {boolean} - A boolean value indicating whether the target element is already selected for the specified event type.\r\n     */\r\n    Selection.prototype.isAlreadySelected = function (targetElem, eventType) {\r\n        if (eventType === 'click') {\r\n            this.currentMode = this.chart.selectionMode;\r\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\r\n        }\r\n        else if (eventType === 'mousemove' || eventType === 'pointermove') {\r\n            this.currentMode = this.chart.highlightMode;\r\n            this.highlightDataIndexes = [];\r\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\r\n        }\r\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\r\n            if (eventType === 'click') {\r\n                return false;\r\n            }\r\n        }\r\n        if (((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0])) {\r\n            var parentNodeId = targetElem.parentNode.id;\r\n            var isElement = void 0;\r\n            if (targetElem.parentNode) {\r\n                isElement = (parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\r\n            }\r\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\r\n                if (this.previousSelectedEle[i] && this.previousSelectedEle[i].hasAttribute('class')) {\r\n                    if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\r\n                        (isElement || eventType === 'click')) {\r\n                        this.previousSelectedEle[i].removeAttribute('class');\r\n                        if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\r\n                            if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\r\n                                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\r\n                                    this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\r\n                                }\r\n                            }\r\n                            else {\r\n                                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\r\n                            }\r\n                        }\r\n                        this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\r\n                    }\r\n                    else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\r\n                        this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Selection.prototype.mouseClick = function (event) {\r\n        this.calculateSelectedElements(event.target, event.type);\r\n        if (this.chart.isTouch && Browser.isDevice && this.chart.highlightModule && this.chart.highlightModule.highlightDataIndexes\r\n            && this.chart.highlightModule.highlightDataIndexes.length > 0 && event.target.id.indexOf('_chart_legend_') === -1\r\n            && event.target.id.indexOf('_Series_') === -1) {\r\n            this.removeLegendHighlightStyles();\r\n        }\r\n    };\r\n    /**\r\n     * Calculates the selected elements based on the target element and event type.\r\n     *\r\n     * @param {HTMLElement} targetElement - The target element for which to calculate selected elements.\r\n     * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.calculateSelectedElements = function (targetElement, eventType) {\r\n        if (isNullOrUndefined(targetElement)) {\r\n            return;\r\n        }\r\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\r\n            targetElement.id && targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\r\n            return;\r\n        }\r\n        if (eventType === 'mousemove' || eventType === 'pointermove') {\r\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\r\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\r\n                return;\r\n            }\r\n            if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') &&\r\n                (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\r\n                    targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\r\n                return;\r\n            }\r\n        }\r\n        this.isAlreadySelected(targetElement, eventType);\r\n        if (targetElement.id && targetElement.id.indexOf('_Series_') > -1 && targetElement.id.indexOf('_Text_') === -1) {\r\n            var element = void 0;\r\n            if (targetElement.id.indexOf('_Trackball_1') > -1) {\r\n                element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\r\n                element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\r\n            }\r\n            else if (targetElement.id.indexOf('_Trackball_0') > -1) {\r\n                return null;\r\n            }\r\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\r\n        }\r\n    };\r\n    /**\r\n     * Performs selection based on the provided index and chart.\r\n     *\r\n     * @param {Index} index - The index for which to perform the selection.\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Element} [element] - Optional. The element associated with the selection.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.performSelection = function (index, chart, element) {\r\n        this.isSeriesMode = this.currentMode === 'Series';\r\n        if (chart.visibleSeries[index.series].type === 'BoxAndWhisker' && element &&\r\n            element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\r\n            element = element.parentNode;\r\n        }\r\n        if (chart.visibleSeries[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element &&\r\n            (element.id === this.chart.element.id + '_Series_' + index.series)) {\r\n            var className = this.generateStyle(chart.series[index.series]);\r\n            var selectionEle = document.querySelectorAll('.' + className);\r\n            this.findTrackballElements(selectionEle, className);\r\n            this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\r\n        }\r\n        switch (this.currentMode) {\r\n            case 'Series':\r\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\r\n                this.selectionComplete(chart, index, this.currentMode);\r\n                this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\r\n                break;\r\n            case 'Point':\r\n                if (!isNaN(index.point) && element) {\r\n                    var pointElements = [];\r\n                    pointElements.push(element);\r\n                    if (pointElements[0] !== null && chart.series[index.series].marker.visible &&\r\n                        (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\r\n                        if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\r\n                            pointElements.push(getElement(element.id + '_Symbol'));\r\n                        }\r\n                        else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\r\n                            pointElements.push(getElement(element.id.replace('_Symbol', '')));\r\n                        }\r\n                    }\r\n                    this.selection(chart, index, pointElements);\r\n                    this.selectionComplete(chart, index, this.currentMode);\r\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\r\n                }\r\n                break;\r\n            case 'Cluster':\r\n                if (!isNaN(index.point)) {\r\n                    this.clusterSelection(chart, index);\r\n                    this.selectionComplete(chart, index, this.currentMode);\r\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Completes the selection process based on the provided index and selection mode.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Index} index - The index for which the selection is completed.\r\n     * @param {SelectionMode | HighlightMode} selectionMode - The selection mode.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\r\n        var points;\r\n        var pointIndex;\r\n        var seriesIndex;\r\n        var selectedPointValues = [];\r\n        var yValue;\r\n        var selectedPointX;\r\n        if (selectionMode === 'Cluster') {\r\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\r\n                var series = _a[_i];\r\n                if (series.visible) {\r\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\r\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\r\n                        seriesIndex = series.index;\r\n                        points = series.points;\r\n                        if (!isNaN(pointIndex) && (pointIndex < points.length)) {\r\n                            yValue = (series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1) ? points[pointIndex].yValue :\r\n                                points[pointIndex].regions[0].y;\r\n                            selectedPointX = points[pointIndex].xValue;\r\n                            if (chart.primaryXAxis.valueType === 'Category') {\r\n                                selectedPointX = points[pointIndex].x.toLocaleString();\r\n                            }\r\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\r\n                                selectedPointX = new Date(points[pointIndex].xValue);\r\n                            }\r\n                            if (series.category !== 'Indicator') {\r\n                                selectedPointValues.push({\r\n                                    x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\r\n                                    pointIndex: pointIndex\r\n                                });\r\n                            }\r\n                            if (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') {\r\n                                selectedPointValues.push({\r\n                                    x: selectedPointX, y: points[pointIndex].regions[0].y,\r\n                                    seriesIndex: seriesIndex, pointIndex: pointIndex\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (selectionMode === 'Series') {\r\n            if (chart.isMultiSelect) {\r\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\r\n                    seriesIndex = this.selectedDataIndexes[i].series;\r\n                    if (this.selectedDataIndexes.length > 0) {\r\n                        selectedPointValues.push({\r\n                            seriesIndex: seriesIndex\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series :\r\n                    (this.highlightDataIndexes && this.highlightDataIndexes.length > 0) ? this.highlightDataIndexes[0].series : 0;\r\n                if (this.selectedDataIndexes.length > 0 || (this.highlightDataIndexes && this.highlightDataIndexes.length > 0)) {\r\n                    selectedPointValues.push({\r\n                        seriesIndex: seriesIndex\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else if (selectionMode === 'Point') {\r\n            var selectedData = [];\r\n            if (this.styleId.indexOf('highlight') > -1) {\r\n                selectedData = this.highlightDataIndexes;\r\n            }\r\n            else {\r\n                selectedData = this.selectedDataIndexes;\r\n            }\r\n            for (var i = 0; i < selectedData.length; i++) {\r\n                pointIndex = selectedData[i].point;\r\n                seriesIndex = selectedData[i].series;\r\n                var series = chart.series[seriesIndex];\r\n                points = series.points;\r\n                if (!isNaN(pointIndex)) {\r\n                    selectedPointX = points[pointIndex].xValue;\r\n                    yValue = (series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1) ? points[pointIndex].yValue :\r\n                        points[pointIndex].regions[0].y;\r\n                    if (chart.primaryXAxis.valueType === 'Category') {\r\n                        selectedPointX = points[pointIndex].x.toLocaleString();\r\n                    }\r\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\r\n                        selectedPointX = new Date(points[pointIndex].xValue);\r\n                    }\r\n                    selectedPointValues.push({\r\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\r\n                        pointIndex: pointIndex\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        var args = {\r\n            name: selectionComplete,\r\n            selectedDataValues: selectedPointValues,\r\n            cancel: false,\r\n            chart: chart\r\n        };\r\n        chart.trigger(selectionComplete, args);\r\n    };\r\n    /**\r\n     * Handles the selection logic for the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Index} index - The index of the selected data point.\r\n     * @param {Element[]} selectedElements - The elements representing the selected data point.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.selection = function (chart, index, selectedElements) {\r\n        if (!(this.currentMode === 'Lasso')) {\r\n            if (!chart.isMultiSelect && (this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 &&\r\n                chart.selectionMode !== 'None')) {\r\n                this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\r\n            }\r\n        }\r\n        var indexValue = (this.rangeColorMappingEnabled()) ? 0 : index.series;\r\n        if (!isNullOrUndefined(selectedElements[0])) {\r\n            if (chart.visibleSeries[indexValue].isRectSeries) {\r\n                if (selectedElements[0].id) {\r\n                    if (document.getElementById(selectedElements[0].id + '_Symbol')) {\r\n                        selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\r\n                    }\r\n                    else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\r\n                        if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\r\n                            selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var isAdd = void 0;\r\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\r\n            var pClassName = selectedElements[0].parentNode &&\r\n                (selectedElements[0].parentNode.getAttribute('class') || '');\r\n            if (className !== '' && this.currentMode !== 'Cluster') {\r\n                this.findTrackballElements(selectedElements, className);\r\n            }\r\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\r\n                this.removeStyles(selectedElements);\r\n            }\r\n            else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\r\n                this.removeStyles([selectedElements[0].parentNode]);\r\n            }\r\n            else {\r\n                this.previousSelectedEle = (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) ? selectedElements : [];\r\n                this.applyStyles(selectedElements);\r\n                isAdd = true;\r\n            }\r\n            if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\r\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\r\n            }\r\n            else {\r\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles the selection logic for clustered data points in the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Index} index - The index of the selected clustered data point.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.clusterSelection = function (chart, index) {\r\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\r\n    };\r\n    /**\r\n     * Removes the multi-selected elements from the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Index[]} index - The indices of the multi-selected elements to be removed.\r\n     * @param {Index} currentIndex - The index of the current selected element.\r\n     * @param {SeriesModel[]} seriesCollection - The collection of series in the chart.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\r\n        var series;\r\n        for (var i = 0; i < index.length; i++) {\r\n            series = seriesCollection[index[i].series];\r\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\r\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\r\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) &&\r\n                    !this.toEquals(index[i], currentIndex, false))) {\r\n                this.removeStyles(this.findElements(chart, series, index[i], '', false));\r\n                if (series.marker.visible) {\r\n                    this.removeStyles(this.findElements(chart, series, index[i], '', true));\r\n                }\r\n                index.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Applies a blur effect to a specific chart or legend.\r\n     *\r\n     * @param {string} chartId - The ID of the chart or legend.\r\n     * @param {Series[]} visibleSeries - The collection of visible series in the chart.\r\n     * @param {boolean} isLegend - Indicates whether the blur effect should be applied to a legend. Defaults to false.\r\n     * @param {number} index - The index of the series or legend item to which the blur effect should be applied. Defaults to 0.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.blurEffect = function (chartId, visibleSeries, isLegend, index) {\r\n        if (isLegend === void 0) { isLegend = false; }\r\n        if (index === void 0) { index = 0; }\r\n        var visibility = (this.checkVisibility(this.highlightDataIndexes, this.chart) ||\r\n            this.checkVisibility(this.selectedDataIndexes, this.chart)); // legend click scenario\r\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\r\n            var series = visibleSeries_1[_i];\r\n            var legendIndex = void 0;\r\n            var legendStrokeColor = void 0;\r\n            if (this.rangeColorMappingEnabled()) {\r\n                if (isLegend === false) {\r\n                    legendIndex = Object.keys(series.rangeColorPoints).indexOf(series.points[index].interior);\r\n                    legendStrokeColor = series.points[index].interior;\r\n                }\r\n                else {\r\n                    legendIndex = index;\r\n                    legendStrokeColor = document.getElementById(chartId + '_chart_legend_shape_' + index).getAttribute('fill');\r\n                }\r\n            }\r\n            else {\r\n                legendIndex = series.index;\r\n                legendStrokeColor = this.chart.visibleSeries[series.index].interior;\r\n            }\r\n            if (series.visible) {\r\n                this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\r\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\r\n                    this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks and updates the selection state of elements based on the provided criteria.\r\n     *\r\n     * @param {Element} element - The element to check for selection.\r\n     * @param {string} className - The class name used for selecting elements.\r\n     * @param {boolean} visibility - The visibility state of the element.\r\n     * @param {boolean} isLegend - Indicates whether the element is a legend. Defaults to true.\r\n     * @param {number} series - The index of the series associated with the element. Defaults to 0.\r\n     * @param {string} legendStrokeColor - The stroke color of the legend. Defaults to '#D3D3D3'.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\r\n        if (isLegend === void 0) { isLegend = true; }\r\n        if (series === void 0) { series = 0; }\r\n        if (legendStrokeColor === void 0) { legendStrokeColor = '#D3D3D3'; }\r\n        var children = (this.isSeriesMode ?\r\n            element.childNodes || [element] : element.childNodes || element);\r\n        if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\r\n            children = (element.childNodes || element);\r\n        }\r\n        var elementClassName;\r\n        var parentClassName;\r\n        var legendShape;\r\n        var selectElement = element;\r\n        for (var i = 0; i < children.length; i++) {\r\n            elementClassName = children[i].getAttribute('class') || '';\r\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\r\n            if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\r\n                className = elementClassName.indexOf('selection') > 0 ||\r\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\r\n                className = (parentClassName.indexOf('selection') > 0 ||\r\n                    parentClassName.indexOf('highlight') > 0) ? parentClassName : className;\r\n            }\r\n            if (elementClassName.indexOf(className) === -1 &&\r\n                parentClassName.indexOf(className) === -1 && visibility) {\r\n                this.addSvgClass(children[i], this.unselected);\r\n            }\r\n            else {\r\n                selectElement = children[i];\r\n                this.removeSvgClass(children[i], this.unselected);\r\n                this.removeSvgClass(children[i].parentNode, this.unselected);\r\n                if (children[i].id !== '' && elementClassName.indexOf(this.unselected) !== -1 && parentClassName.indexOf(className) === -1) {\r\n                    this.highlightAnimation(children[i], this.chart.series.length === 1 ? 0 :\r\n                        this.indexFinder(children[i].id).series, 700, 0.3);\r\n                }\r\n            }\r\n            if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\r\n                this.removeSvgClass(children[i], this.unselected);\r\n                this.removeSvgClass(children[i].parentNode, this.unselected);\r\n                this.addSvgClass(children[i], className);\r\n            }\r\n        }\r\n        if (element.id.indexOf('Symbol') > -1) {\r\n            if ((element.querySelectorAll('.' + className)[0]) && element.querySelectorAll('.' + className)[0].getAttribute('class')\r\n                === className) {\r\n                var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\r\n                var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\r\n                if (seriesClassName.indexOf(this.unselected) > -1) {\r\n                    this.removeSvgClass(symbolEle, this.unselected);\r\n                }\r\n            }\r\n        }\r\n        if (this.control.legendModule && this.control.legendSettings.visible) {\r\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\r\n            if (legendShape) {\r\n                if (legendShape.hasAttribute('class')) {\r\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\r\n                    if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\r\n                        legendShape.setAttribute('stroke', legendStrokeColor);\r\n                        if (this.chart.highlightPattern === 'None') {\r\n                            legendShape.setAttribute('fill', legendStrokeColor);\r\n                        }\r\n                    }\r\n                }\r\n                elementClassName = selectElement.getAttribute('class') || '';\r\n                parentClassName = selectElement.parentNode.getAttribute('class') || '';\r\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\r\n                    this.addSvgClass(legendShape, (this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight) ? className : this.unselected);\r\n                    this.removeSvgClass(legendShape, className);\r\n                    if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\r\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\r\n                        if (this.chart.highlightPattern === 'None') {\r\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.removeSvgClass(legendShape, this.unselected);\r\n                    if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\r\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\r\n                        if (this.chart.highlightPattern === 'None') {\r\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\r\n                        }\r\n                    }\r\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\r\n                        this.removeSvgClass(legendShape, className);\r\n                    }\r\n                    else {\r\n                        this.addSvgClass(legendShape, className);\r\n                        if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && this.chart.highlightColor !== 'transparent' && !isNullOrUndefined(this.chart.highlightColor)) {\r\n                            legendShape.setAttribute('stroke', this.chart.highlightColor);\r\n                            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\r\n                                legendShape.setAttribute('fill', this.chart.highlightColor);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var legendItemsId = void 0;\r\n                if (this.rangeColorMappingEnabled()) {\r\n                    for (var i = 0; i < this.chart.rangeColorSettings.length; i++) {\r\n                        legendItemsId = document.getElementById(this.chart.element.id + '_chart_legend_shape_' + i);\r\n                        if (legendShape !== legendItemsId) {\r\n                            this.addSvgClass(legendItemsId, this.unselected);\r\n                        }\r\n                        else if (isLegend === true) {\r\n                            this.addSvgClass(legendItemsId, className);\r\n                        }\r\n                        if (elementClassName.indexOf(className) === -1 && isLegend === false) {\r\n                            this.removeSvgClass(legendItemsId, this.unselected);\r\n                        }\r\n                    }\r\n                }\r\n                if (isLegend && parentClassName.indexOf(className) > -1) {\r\n                    this.addSvgClass(legendShape, className);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Applies styles to the specified elements.\r\n     *\r\n     * @param {Element[]} elements - The elements to which styles will be applied.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.applyStyles = function (elements) {\r\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\r\n            var element = elements_1[_i];\r\n            if (element) {\r\n                this.removeSvgClass(element.parentNode, this.unselected);\r\n                this.removeSvgClass(element, this.unselected);\r\n                if (this.chart.series[0].pointColorMapping === 'fill' || this.rangeColorMappingEnabled()) {\r\n                    var className = this.getSelectionClass(element.id);\r\n                    var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\r\n                    var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\r\n                    var pattern = void 0;\r\n                    if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\r\n                        pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\r\n                    }\r\n                    if (element.id.indexOf('legend') === -1 && element.id.indexOf('Group') === -1 && pattern != null) {\r\n                        for (var i = 1; i < pattern.children.length; i++) {\r\n                            pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\r\n                            pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\r\n                        }\r\n                    }\r\n                }\r\n                this.addSvgClass(element, this.getSelectionClass(element.id));\r\n                if (element.id.indexOf('Group') > 0) {\r\n                    var seriesIndex = this.indexFinder(element.id);\r\n                    for (var i = 0; i < element.children.length; i++) {\r\n                        if (element.children[i].nodeName !== 'defs') {\r\n                            this.stopElementAnimation(element.children[i], seriesIndex.series);\r\n                        }\r\n                    }\r\n                }\r\n                if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None' && this.chart.highlightColor !== 'transparent') {\r\n                    if (element.id.indexOf('Group') > 0) {\r\n                        for (var i = 0; i < element.children.length; i++) {\r\n                            element.children[i].setAttribute('fill', this.chart.highlightColor);\r\n                        }\r\n                    }\r\n                    else {\r\n                        element.setAttribute('fill', this.chart.highlightColor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets the CSS class for selection based on the provided identifier.\r\n     *\r\n     * @param {string} id - The identifier used to determine the selection class.\r\n     * @returns {string} - The CSS class for selection.\r\n     */\r\n    Selection.prototype.getSelectionClass = function (id) {\r\n        return this.generateStyle(this.control.visibleSeries[this.indexFinder(id).series]);\r\n    };\r\n    /**\r\n     * Removes styles from the provided elements.\r\n     *\r\n     * @param {Element[]} elements - The elements from which styles will be removed.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.removeStyles = function (elements) {\r\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\r\n            var element = elements_2[_i];\r\n            if (element) {\r\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\r\n                if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\r\n                    if (element.id.indexOf('Group') > 0) {\r\n                        for (var i = 0; i < element.children.length; i++) {\r\n                            element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\r\n                        }\r\n                    }\r\n                    else {\r\n                        element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds or removes an index from the provided array of indexes.\r\n     *\r\n     * @param {Index[]} indexes - The array of indexes.\r\n     * @param {Index} index - The index to add or remove.\r\n     * @param {boolean} [isAdd] - Optional parameter to specify whether to add or remove the index. Defaults to true (add).\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\r\n        for (var i = 0; i < indexes.length; i++) {\r\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\r\n                indexes.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        if (isAdd) {\r\n            indexes.push(index);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if two Index objects are equal.\r\n     *\r\n     * @param {Index} first - The first Index object.\r\n     * @param {Index} second - The second Index object.\r\n     * @param {boolean} checkSeriesOnly - Specifies whether to check series properties only.\r\n     * @returns {boolean} - True if the two Index objects are equal, otherwise false.\r\n     */\r\n    Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\r\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\r\n            && (checkSeriesOnly || (first.point === second.point)));\r\n    };\r\n    /**\r\n     * Redraws the selection or highlight on the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {SelectionMode | HighlightMode} oldMode - The previous selection or highlight mode.\r\n     * @param {boolean} chartRedraw - Specifies whether to redraw the entire chart.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\r\n        this.isSeriesMode = oldMode === 'Series';\r\n        if (!isNullOrUndefined(oldMode)) {\r\n            if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\r\n                chart.isRedrawSelection = false;\r\n            }\r\n            else {\r\n                chart.isRedrawSelection = true;\r\n            }\r\n        }\r\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\r\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\r\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\r\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\r\n            selectedDataIndexes = highlightDataIndexes;\r\n        }\r\n        else {\r\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\r\n        }\r\n        this.blurEffect(chart.element.id, chart.visibleSeries, false);\r\n        this.selectDataIndex(chart, selectedDataIndexes);\r\n    };\r\n    /**\r\n     * Handles selection on legend item click.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {number} series - The index of the series.\r\n     * @param {Element} targetElement - The target element clicked.\r\n     * @param {string} eventType - The type of event triggered.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.legendSelection = function (chart, series, targetElement, eventType) {\r\n        if (eventType === 'mousemove') {\r\n            if (targetElement.id.indexOf('text') > 1) {\r\n                targetElement = getElement(targetElement.id.replace('text', 'shape'));\r\n            }\r\n            if (targetElement.id.indexOf('marker') > 1) {\r\n                targetElement = getElement(targetElement.id.replace('_marker', ''));\r\n            }\r\n            if (targetElement.id.indexOf('g') > 1) {\r\n                targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\r\n            }\r\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\r\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\r\n                return;\r\n            }\r\n            this.currentMode = this.chart.highlightMode;\r\n        }\r\n        var isPreSelected = this.isAlreadySelected(targetElement, eventType);\r\n        if (isPreSelected) {\r\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\r\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\r\n            this.isSeriesMode = this.currentMode === 'Series';\r\n            var isBlurEffectNeeded = true;\r\n            if (selectedElements.length > 0) {\r\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\r\n            }\r\n            else {\r\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\r\n                    var element = _a[_i];\r\n                    if (element.index !== series && !chart.isMultiSelect) {\r\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\r\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\r\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\r\n                    }\r\n                }\r\n                var seriesElements = [];\r\n                if (this.rangeColorMappingEnabled()) {\r\n                    for (var i = 0, a = chart.visibleSeries[0].seriesElement.children; i < a.length; i++) {\r\n                        var point = a[i];\r\n                        if (targetElement.getAttribute('fill') === point.getAttribute('fill')) {\r\n                            seriesElements.push(point);\r\n                        }\r\n                    }\r\n                    for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\r\n                        var element = seriesElements_1[_b];\r\n                        if (isNullOrUndefined(element)) {\r\n                            return;\r\n                        }\r\n                        this.checkSelectionElements(element, seriesStyle, false, true, series);\r\n                    }\r\n                }\r\n                else {\r\n                    seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\r\n                    for (var _c = 0, seriesElements_2 = seriesElements; _c < seriesElements_2.length; _c++) {\r\n                        var seriesElement = seriesElements_2[_c];\r\n                        if (isNullOrUndefined(seriesElement)) {\r\n                            return;\r\n                        }\r\n                        this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\r\n                    }\r\n                }\r\n                this.isSeriesMode = true;\r\n                this.selection(chart, new Index(series, NaN), seriesElements);\r\n                this.isSeriesMode = chart.selectionMode === 'Series';\r\n                this.blurEffect(chart.element.id, chart.visibleSeries, true, series);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if range color mapping is enabled for the chart.\r\n     *\r\n     * @returns {boolean} - Returns true if range color mapping is enabled, otherwise false.\r\n     */\r\n    Selection.prototype.rangeColorMappingEnabled = function () {\r\n        if ((this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 &&\r\n            this.chart.rangeColorSettings[0].colors.length > 0 &&\r\n            (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' ||\r\n                this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble'))) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\r\n        if (selectedElements.length > 0) {\r\n            var elements = [];\r\n            for (var i = 0; i < selectedElements.length; i++) {\r\n                elements.push(selectedElements[i]);\r\n            }\r\n            this.removeStyles(elements);\r\n            this.isSeriesMode = true;\r\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\r\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\r\n                var value = _a[_i];\r\n                seriesStyle = this.generateStyle(value);\r\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\r\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\r\n                        var element = elements_3[_b];\r\n                        this.checkSelectionElements(element, seriesStyle, true, true, series);\r\n                    }\r\n                    isBlurEffectNeeded = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (isBlurEffectNeeded) {\r\n                this.isSeriesMode = chart.selectionMode === 'Series';\r\n                this.blurEffect(chart.element.id, chart.visibleSeries);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves the SVG elements associated with a particular series in the chart.\r\n     *\r\n     * @param {SeriesModel} series - The series for which to retrieve the SVG elements.\r\n     * @returns {Element[]} - An array of SVG elements representing the series.\r\n     */\r\n    Selection.prototype.getSeriesElements = function (series) {\r\n        var seriesElements = [series.seriesElement];\r\n        if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\r\n            seriesElements.push(series.symbolElement);\r\n        }\r\n        else if (series.marker.visible && series.isRectSeries) {\r\n            seriesElements.push(series.symbolElement);\r\n        }\r\n        return seriesElements;\r\n    };\r\n    /**\r\n     * Finds the index associated with a particular element ID.\r\n     *\r\n     * @param {string} id - The ID of the element to find the index for.\r\n     * @returns {Index} - The index associated with the element ID.\r\n     */\r\n    Selection.prototype.indexFinder = function (id) {\r\n        var ids = ['NaN', 'NaN'];\r\n        if (id.indexOf('SeriesGroup') > -1) {\r\n            ids = id.split('SeriesGroup');\r\n            ids[0] = ids[1];\r\n        }\r\n        else if (id.indexOf('SymbolGroup') > -1) {\r\n            ids = id.split('SymbolGroup');\r\n            ids[0] = ids[1];\r\n        }\r\n        else if (id.indexOf('_Point_') > -1) {\r\n            ids = id.split('_Series_')[1].split('_Point_');\r\n        }\r\n        else if (id.indexOf('_border_') > -1) {\r\n            ids[0] = id.split('_border_')[1];\r\n        }\r\n        else if (id.indexOf('_Series_') > -1) {\r\n            ids[0] = id.split('_Series_')[1];\r\n        }\r\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\r\n            ids = id.split('_chart_legend_shape_');\r\n            ids[0] = ids[1];\r\n        }\r\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\r\n    };\r\n    /**\r\n     * Calculates the elements selected by dragging a rectangle on the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Rect} dragRect - The rectangle representing the selection area.\r\n     * @param {boolean} isClose - Flag indicating whether the selection should be close.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\r\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\r\n        var isLasso = chart.selectionMode === 'Lasso';\r\n        var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\r\n        var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\r\n        this.removeOffset(rect, axisOffset);\r\n        var points;\r\n        var index;\r\n        var selectedPointValues = [];\r\n        var selectedSeriesValues = [];\r\n        this.isSeriesMode = false;\r\n        var isDragResize = (chart.allowMultiSelection) && (this.rectGrabbing || this.resizing);\r\n        this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] =\r\n            new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\r\n        if (dragRect.width && dragRect.height && !isClose) {\r\n            var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\r\n            this.removeOffset(rt, axisOffset);\r\n            this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\r\n        }\r\n        var _loop_1 = function (series) {\r\n            if (series.visible) {\r\n                points = series.points;\r\n                selectedPointValues = [];\r\n                var xAxisOffset_1;\r\n                var yAxisOffset_1;\r\n                if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) &&\r\n                    !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\r\n                    xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\r\n                    yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\r\n                }\r\n                else {\r\n                    xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\r\n                    yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\r\n                }\r\n                for (var j = 0; j < points.length; j++) {\r\n                    var yValue = (series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1) ? points[j].yValue :\r\n                        points[j].regions[0].y;\r\n                    var isCurrentPoint = void 0;\r\n                    var selectedPointX = points[j].xValue;\r\n                    if (chart.primaryXAxis.valueType === 'Category') {\r\n                        selectedPointX = points[j].x.toLocaleString();\r\n                    }\r\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\r\n                        selectedPointX = new Date(points[j].xValue);\r\n                    }\r\n                    if (series.type === 'BoxAndWhisker') {\r\n                        isCurrentPoint = points[j].regions.some(function (region) {\r\n                            return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (chart.selectionMode === 'Lasso') {\r\n                            isCurrentPoint = points[j].isSelect;\r\n                        }\r\n                        else {\r\n                            isCurrentPoint = (chart.allowMultiSelection) ?\r\n                                this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) :\r\n                                points[j].symbolLocations.some(function (location) {\r\n                                    return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\r\n                                });\r\n                        }\r\n                    }\r\n                    if (isCurrentPoint && series.category !== 'Indicator') {\r\n                        index = new Index(series.index, points[j].index);\r\n                        this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\r\n                        selectedPointValues.push({ x: selectedPointX, y: yValue });\r\n                    }\r\n                    if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea')) {\r\n                        selectedPointValues.push({ x: selectedPointX, y: points[j].regions[0].y });\r\n                    }\r\n                }\r\n                selectedSeriesValues.push(selectedPointValues);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\r\n            var series = _a[_i];\r\n            _loop_1(series);\r\n        }\r\n        this.blurEffect(chart.element.id, chart.visibleSeries);\r\n        var x = isLasso ? chart.mouseDownX : (dragRect.x + dragRect.width);\r\n        var y = isLasso ? chart.mouseDownY : dragRect.y;\r\n        if (!isClose) {\r\n            this.createCloseButton(x, y);\r\n        }\r\n        var args = {\r\n            name: dragComplete,\r\n            selectedDataValues: selectedSeriesValues,\r\n            cancel: false\r\n        };\r\n        chart.trigger(dragComplete, args);\r\n    };\r\n    Selection.prototype.removeOffset = function (rect, clip) {\r\n        rect.x -= clip.x;\r\n        rect.y -= clip.y;\r\n    };\r\n    Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\r\n        var location = points.symbolLocations[0];\r\n        for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\r\n            var rect = rectCollection_1[_i];\r\n            if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Draws the dragging rectangle on the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Rect} dragRect - The rectangle representing the dragging area.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.drawDraggingRect = function (chart, dragRect) {\r\n        var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\r\n        var border = chart.chartArea.border.width;\r\n        var rectFill = chart.themeStyle.selectionRectFill;\r\n        var rectStroke = chart.themeStyle.selectionRectStroke;\r\n        var isLasso = chart.selectionMode === 'Lasso';\r\n        if (this.isdrawRect) {\r\n            cartesianLayout.x = cartesianLayout.x - border / 2;\r\n            cartesianLayout.y = cartesianLayout.y - border / 2;\r\n            cartesianLayout.width = cartesianLayout.width + border;\r\n            cartesianLayout.height = cartesianLayout.height + border;\r\n            this.isdrawRect = false;\r\n        }\r\n        switch (chart.selectionMode) {\r\n            case 'DragX':\r\n                dragRect.y = cartesianLayout.y;\r\n                dragRect.height = cartesianLayout.height;\r\n                break;\r\n            case 'DragY':\r\n                dragRect.x = cartesianLayout.x;\r\n                dragRect.width = cartesianLayout.width;\r\n                break;\r\n        }\r\n        if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\r\n            return null;\r\n        }\r\n        var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\r\n        if ((chart.allowMultiSelection) && isDragMode) {\r\n            var element = void 0;\r\n            var dragGroup = void 0;\r\n            var multiGroup = getElement(this.multiRectGroup);\r\n            if (!multiGroup) {\r\n                multiGroup = chart.svgRenderer.createGroup({ id: this.multiRectGroup });\r\n                chart.svgObject.appendChild(multiGroup);\r\n            }\r\n            if (this.rectGrabbing || this.resizing) {\r\n                var rectElement = getElement(this.draggedRect + this.targetIndex);\r\n                if (rectElement.nextSibling) {\r\n                    remove(rectElement.nextSibling);\r\n                }\r\n                this.setAttributes(rectElement, dragRect);\r\n            }\r\n            else if (!getElement(this.draggedRectGroup + this.count)) {\r\n                dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup + this.count });\r\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\r\n                if (chart.enableCanvas) {\r\n                    svgElement.appendChild(dragGroup);\r\n                }\r\n                else {\r\n                    multiGroup.appendChild(dragGroup);\r\n                }\r\n                // chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\r\n            }\r\n            if (!(chart.selectionMode === 'Lasso')) {\r\n                element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, { color: rectStroke, width: 1 }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\r\n                element.style.cursor = 'move';\r\n            }\r\n            else {\r\n                element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\r\n            }\r\n            if (!dragGroup && !this.rectGrabbing && !this.resizing) {\r\n                getElement(this.draggedRectGroup + this.count).appendChild(element);\r\n            }\r\n            else if (!this.rectGrabbing && !this.resizing) {\r\n                dragGroup.appendChild(element);\r\n            }\r\n        }\r\n        else {\r\n            var element = isLasso ?\r\n                getElement(this.lassoPath) : getElement(this.draggedRect);\r\n            if (this.closeIcon) {\r\n                removeElement(this.closeIconId);\r\n            }\r\n            if (element) {\r\n                if (isLasso) {\r\n                    element.setAttribute('d', this.path);\r\n                }\r\n                else {\r\n                    this.setAttributes(element, dragRect);\r\n                }\r\n            }\r\n            else {\r\n                var dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup });\r\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\r\n                if (chart.enableCanvas) {\r\n                    svgElement.appendChild(dragGroup);\r\n                }\r\n                else {\r\n                    chart.svgObject.appendChild(dragGroup);\r\n                }\r\n                // chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\r\n                if (!(chart.selectionMode === 'Lasso')) {\r\n                    element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, { color: rectStroke, width: 1 }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\r\n                }\r\n                else {\r\n                    element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\r\n                }\r\n                //element.setAttribute('style', 'cursor:move;');\r\n                dragGroup.appendChild(element);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves the index of a particular item based on its identifier.\r\n     *\r\n     * @param {string} id - The identifier of the item.\r\n     * @returns {number} - The index of the item, or -1 if not found.\r\n     */\r\n    Selection.prototype.getIndex = function (id) {\r\n        var i;\r\n        for (i = id.length - 1; i > 0; i--) {\r\n            var x = Number(id[i]);\r\n            if (!isNaN(x)) {\r\n                continue;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        var index = +id.substr(i + 1, id.length - 1);\r\n        return index;\r\n    };\r\n    Selection.prototype.createCloseButton = function (x, y) {\r\n        var isMultiDrag = this.chart.allowMultiSelection;\r\n        var circleStroke = this.chart.themeStyle.selectionCircleStroke;\r\n        var isDrag = this.rectGrabbing || this.resizing;\r\n        var closeIcon = this.chart.svgRenderer.createGroup({\r\n            id: this.closeIconId + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''),\r\n            style: 'cursor:pointer; visibility: visible;'\r\n        });\r\n        closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), '#FFFFFF', { color: circleStroke, width: 1 }, 1, x, y, 10)));\r\n        var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +\r\n            ' L ' + (x + 4) + ' ' + (y - 4);\r\n        closeIcon.appendChild(this.chart.svgRenderer.drawPath({\r\n            id: this.closeIconId + '_cross' +\r\n                (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), d: direction,\r\n            stroke: circleStroke, 'stroke-width': 2, fill: circleStroke\r\n        }));\r\n        this.closeIcon = closeIcon;\r\n        var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''));\r\n        if (pathElement) {\r\n            pathElement.appendChild(closeIcon);\r\n        }\r\n    };\r\n    /**\r\n     * Method to remove dragged element.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Selection.prototype.removeDraggedElements = function (chart, targetElement, eventType) {\r\n        if ((targetElement.id && targetElement.id.indexOf(this.closeIconId) > -1) && (eventType.indexOf('move') === -1)) {\r\n            var isSelectedvalues = true;\r\n            if ((chart.allowMultiSelection)) {\r\n                var index = this.getIndex(targetElement.id);\r\n                var multiRectGroupElement = getElement(this.multiRectGroup);\r\n                remove(getElement(this.draggedRectGroup + index));\r\n                this.dragRectArray[index] = null;\r\n                this.filterArray[index] = null;\r\n                this.totalSelectedPoints[index] = null;\r\n                if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\r\n                    removeElement(multiRectGroupElement);\r\n                    this.dragRectArray = [];\r\n                    this.filterArray = [];\r\n                    this.totalSelectedPoints = [];\r\n                }\r\n                if (this.currentMode === 'Lasso') {\r\n                    if (this.multiDataIndexes[index] != null) {\r\n                        for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\r\n                            this.multiDataIndexes[index][i].isSelect = false;\r\n                        }\r\n                    }\r\n                    this.multiDataIndexes[index] = null;\r\n                    for (var j = 0; j < this.multiDataIndexes.length; j++) {\r\n                        if (this.multiDataIndexes[j] != null) {\r\n                            isSelectedvalues = false;\r\n                            for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\r\n                                this.multiDataIndexes[j][k].isSelect = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.calculateDragSelectedElements(chart, this.dragRect, true);\r\n                }\r\n                else if (this.filterArray.length) {\r\n                    for (var i = 0; i < this.filterArray.length; i++) {\r\n                        if (this.filterArray[i]) {\r\n                            isSelectedvalues = false;\r\n                            this.calculateDragSelectedElements(chart, this.filterArray[i], true);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\r\n                }\r\n            }\r\n            else {\r\n                remove(getElement(this.draggedRectGroup));\r\n                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\r\n            }\r\n            this.blurEffect(chart.element.id, chart.visibleSeries);\r\n            this.changeCursorStyle(false, chart.svgObject, 'auto');\r\n            if (!(chart.allowMultiSelection) || isSelectedvalues) {\r\n                this.rectPoints = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates the selection rectangle during resizing.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {ChartLocation} location - The location of the resizing action.\r\n     * @param {boolean} [tapped=false] - Indicates whether the resizing action was initiated by tapping.\r\n     * @param {Element} [target] - The target element of the resizing action.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\r\n        var rect;\r\n        if (((chart.allowMultiSelection) && (target.id.indexOf('_ej2_drag_rect') > -1)) ||\r\n            this.dragRectArray[this.targetIndex]) {\r\n            if (target.id.indexOf('_ej2_drag_rect') > -1) {\r\n                this.targetIndex = this.getIndex(target.id);\r\n            }\r\n            var r = this.dragRectArray[this.targetIndex];\r\n            rect = new Rect(r.x, r.y, r.width, r.height);\r\n        }\r\n        if (!(chart.allowMultiSelection)) {\r\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\r\n        }\r\n        if (rect) {\r\n            var resize = this.findResizeMode(chart.svgObject, rect, location);\r\n            if (this.resizing) {\r\n                rect = getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);\r\n                this.drawDraggingRect(chart, rect);\r\n                this.dragRect = rect;\r\n            }\r\n            if (tapped) {\r\n                this.resizing = resize;\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    };\r\n    Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\r\n        var cursorStyle = 'se-resize';\r\n        var resize = false;\r\n        if (!this.resizing) {\r\n            var resizeEdges = [new Rect(rect.x, (rect.y), rect.width - 5, 5),\r\n                new Rect((rect.x), rect.y, 5, rect.height),\r\n                new Rect(rect.x, (rect.y + rect.height - 5), rect.width - 5, 5),\r\n                new Rect((rect.x + rect.width - 5), rect.y + 5, 5, rect.height - 15),\r\n                new Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 10, 10)]; //corner\r\n            for (var i = 0; i < resizeEdges.length; i++) {\r\n                if (withInBounds(location.x, location.y, resizeEdges[i])) {\r\n                    cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';\r\n                    resize = true;\r\n                    this.resizeMode = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var x = rect.x;\r\n            var y = rect.y;\r\n            var width = (location.x - x);\r\n            var height = (location.y - y);\r\n            switch (this.resizeMode) {\r\n                case 0:\r\n                    height = Math.abs((rect.height + rect.y) - location.y);\r\n                    rect.y = Math.min((rect.height + rect.y), location.y);\r\n                    rect.height = height;\r\n                    break;\r\n                case 1:\r\n                    width = Math.abs((rect.width + rect.x) - location.x);\r\n                    rect.x = Math.min((rect.width + rect.x), location.x);\r\n                    rect.width = width;\r\n                    break;\r\n                case 2:\r\n                    rect.height = Math.abs(height);\r\n                    rect.y = Math.min(location.y, y);\r\n                    break;\r\n                case 3:\r\n                    rect.width = Math.abs(width);\r\n                    rect.x = Math.min(location.x, x);\r\n                    break;\r\n                case 4:\r\n                    rect.width = Math.abs(width);\r\n                    rect.height = Math.abs(height);\r\n                    rect.x = Math.min(location.x, x);\r\n                    rect.y = Math.min(location.y, y);\r\n                    break;\r\n            }\r\n        }\r\n        if (this.currentMode !== 'Lasso') {\r\n            this.changeCursorStyle(resize, getElement((this.chart.allowMultiSelection) ? this.draggedRect +\r\n                this.targetIndex : this.draggedRect), cursorStyle);\r\n        }\r\n        this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\r\n        return resize;\r\n    };\r\n    Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\r\n        cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';\r\n        if (rectelement) {\r\n            rectelement.style.cursor = cursorStyle;\r\n        }\r\n    };\r\n    Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\r\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\r\n        var seriesElements;\r\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\r\n            var series = seriesCollection_1[_i];\r\n            if (series.visible) {\r\n                seriesElements = this.getSeriesElements(series);\r\n                this.removeStyles(seriesElements);\r\n                for (var _a = 0, seriesElements_3 = seriesElements; _a < seriesElements_3.length; _a++) {\r\n                    var seriesElement = seriesElements_3[_a];\r\n                    this.removeStyles(this.getChildren(seriesElement));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Selection.prototype.setAttributes = function (ele, object) {\r\n        var keys = Object.keys(object);\r\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n            var key = keys_1[_i];\r\n            ele.setAttribute(key, object[key]);\r\n        }\r\n    };\r\n    /**\r\n     * Updates the position of the dragged rectangle.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Rect} grabbedPoint - The rectangle representing the grabbed point.\r\n     * @param {boolean} [doDrawing=false] - Indicates whether to redraw the dragging rectangle.\r\n    //  * @param {Element} [target] - The target element related to the dragging action.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing) {\r\n        var rect;\r\n        if ((this.resizing || this.rectGrabbing) && (chart.allowMultiSelection)) {\r\n            var r = this.dragRectArray[this.targetIndex];\r\n            rect = new Rect(r.x, r.y, r.width, r.height);\r\n        }\r\n        else {\r\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\r\n        }\r\n        rect.x -= (grabbedPoint.x - chart.mouseX);\r\n        rect.y -= (grabbedPoint.y - chart.mouseY);\r\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\r\n        if (doDrawing) {\r\n            this.drawDraggingRect(chart, rect);\r\n        }\r\n        else {\r\n            this.calculateDragSelectedElements(chart, rect);\r\n        }\r\n    };\r\n    Selection.prototype.mouseLeave = function (event) {\r\n        this.completeSelection(event.target, event.type);\r\n    };\r\n    /**\r\n     * Completes the selection process.\r\n     *\r\n     * @param {HTMLElement} target - The target element where the selection is completed.\r\n     * @param {string} eventType - The type of event that triggered the selection completion.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.completeSelection = function (target, eventType) {\r\n        var chart = this.chart;\r\n        if (chart.selectionMode === 'None') {\r\n            return;\r\n        }\r\n        this.currentMode = chart.selectionMode;\r\n        if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\r\n            this.calculateDragSelectedElements(chart, this.dragRect);\r\n        }\r\n        else if (!(chart.allowMultiSelection) && this.rectGrabbing &&\r\n            this.rectPoints.width && this.rectPoints.height) {\r\n            this.draggedRectMoved(chart, this.dragRect);\r\n        }\r\n        else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\r\n            this.draggedRectMoved(chart, this.dragRect);\r\n        }\r\n        if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\r\n            if (this.path.indexOf('L') !== -1) {\r\n                if (!(chart.allowMultiSelection)) {\r\n                    getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\r\n                    this.pointChecking(getElement(this.lassoPath));\r\n                }\r\n                else if (getElement(this.lassoPath + this.count)) {\r\n                    getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\r\n                    this.pointChecking(getElement(this.lassoPath + this.count));\r\n                }\r\n                if (this.dragging || this.resizing) {\r\n                    this.calculateDragSelectedElements(chart, this.dragRect);\r\n                }\r\n            }\r\n        }\r\n        this.dragging = false;\r\n        this.rectGrabbing = false;\r\n        this.resizing = false;\r\n        this.removeDraggedElements(chart, target, eventType);\r\n    };\r\n    Selection.prototype.getDragRect = function (chart, seriesClipRect) {\r\n        return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\r\n    };\r\n    /**\r\n     * Initiates the drag operation.\r\n     *\r\n     * @param {Chart} chart - The chart instance where the drag operation is initiated.\r\n     * @param {Rect} seriesClipRect - The clipping rectangle of the series.\r\n     * @param {number} mouseDownX - The X-coordinate where the mouse was pressed down.\r\n     * @param {number} mouseDownY - The Y-coordinate where the mouse was pressed down.\r\n     * @param {Event} event - The event object associated with the mouse down event.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\r\n        var mode = chart.selectionMode;\r\n        this.currentMode = chart.selectionMode;\r\n        this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) &&\r\n            chart.chartAreaType !== 'PolarRadar';\r\n        var target = event.target;\r\n        this.path = undefined;\r\n        if (this.dragging) {\r\n            this.count = getElement(this.multiRectGroup) ? (this.count + 1) : 0;\r\n            this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\r\n            if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||\r\n                chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {\r\n                this.dragging = false;\r\n            }\r\n        }\r\n        if (mode === 'Lasso') {\r\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\r\n                var series = _a[_i];\r\n                if (series.visible) {\r\n                    for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\r\n                        var point = _c[_b];\r\n                        if (!(chart.allowMultiSelection)) {\r\n                            point.isSelect = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!(mode === 'Lasso')) {\r\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\r\n                this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\r\n                this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\r\n                this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\r\n            }\r\n            if ((chart.allowMultiSelection)) {\r\n                var index = this.getIndex(target.id);\r\n                this.targetIndex = this.isDragRect(target.id) ? index : undefined;\r\n                if (this.dragRectArray.length && this.isDragRect(target.id)) {\r\n                    this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\r\n                    this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Selection.prototype.isDragRect = function (id) {\r\n        return id.indexOf('_ej2_drag_rect') > -1;\r\n    };\r\n    /**\r\n     * Handles the mouse move event.\r\n     *\r\n     * @param {PointerEvent | TouchEvent} event - The pointer event or touch event associated with the mouse move.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.mouseMove = function (event) {\r\n        var chart = this.chart;\r\n        var target = event.target;\r\n        var eventType = event.type;\r\n        this.highlightChart(target, eventType);\r\n        if (chart.selectionMode === 'None') {\r\n            return;\r\n        }\r\n        if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\r\n            event.preventDefault();\r\n        }\r\n        this.selectionAndDrag(chart, target, eventType);\r\n    };\r\n    /**\r\n     * Highlights the specified chart element.\r\n     *\r\n     * @param {Element} target - The target element to highlight.\r\n     * @param {string} eventType - The type of event triggering the highlighting.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.highlightChart = function (target, eventType) {\r\n        if (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) {\r\n            if (!isNullOrUndefined(target)) {\r\n                if (target.id.indexOf('_legend_text') > 1) {\r\n                    target = getElement(target.id.replace('text', 'shape'));\r\n                }\r\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\r\n                    target.getAttribute('class').indexOf('selection') > -1)) {\r\n                    return;\r\n                }\r\n                this.calculateSelectedElements(target, eventType);\r\n                if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 &&\r\n                    target.id.indexOf('_chart_legend_') === -1 && target.id.indexOf('_Series_') === -1) {\r\n                    this.removeLegendHighlightStyles();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Handles the selection and dragging functionality for the chart.\r\n     *\r\n     * @param {Chart} chart - The chart instance.\r\n     * @param {Element} target - The target element involved in the selection or dragging action.\r\n     * @param {string} eventType - The type of event triggering the selection or dragging action.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.selectionAndDrag = function (chart, target, eventType) {\r\n        var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\r\n        if (insideMoving && !this.chart.enableCanvas) {\r\n            if (this.rectGrabbing && !this.resizing) {\r\n                this.draggedRectMoved(chart, this.dragRect, true);\r\n            }\r\n            else if (this.dragging && !this.resizing) {\r\n                if (chart.selectionMode === 'Lasso') {\r\n                    this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\r\n                    this.drawDraggingRect(chart, this.dragRect);\r\n                }\r\n                else {\r\n                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\r\n                    this.drawDraggingRect(chart, this.dragRect);\r\n                }\r\n            }\r\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\r\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\r\n            }\r\n            else if (((chart.allowMultiSelection) && !this.dragging) || this.resizing) {\r\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\r\n            }\r\n        }\r\n        else {\r\n            this.completeSelection(target, eventType);\r\n        }\r\n    };\r\n    /**\r\n     * Remove highlighted legend when not focused.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.removeLegendHighlightStyles = function () {\r\n        this.chart.highlightModule.highlightDataIndexes = [];\r\n        var elementCollection;\r\n        for (var i = 0; i < this.chart.visibleSeries.length; i++) {\r\n            elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\r\n            if (this.selectedDataIndexes.length === 0) {\r\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\r\n                while (elementCollection.length > 0) {\r\n                    var element = elementCollection[0];\r\n                    if (element) {\r\n                        this.removeSvgClass(element, element.getAttribute('class'));\r\n                        if (element.id.indexOf('Group') > 0 && !this.chart.visibleSeries[i].isRectSeries) {\r\n                            var seriesIndex = this.indexFinder(element.id);\r\n                            for (var j = 0; j < element.children.length; j++) {\r\n                                if (element.children[j].nodeName !== 'defs') {\r\n                                    this.highlightAnimation(element.children[j], seriesIndex.series, 700, 0.3, true);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                elementCollection = document.getElementsByClassName(this.unselected);\r\n                while (elementCollection.length > 0) {\r\n                    var element = elementCollection[0];\r\n                    if (element) {\r\n                        this.removeSvgClass(element, element.getAttribute('class'));\r\n                        if (element.id !== '') {\r\n                            this.highlightAnimation(element, this.chart.series.length === 1 ? 0 : this.indexFinder(element.id).series, 700, 0.3);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\r\n                while (elementCollection.length > 0) {\r\n                    var element = elementCollection[0];\r\n                    if (element) {\r\n                        this.removeSvgClass(element, element.getAttribute('class'));\r\n                        this.addSvgClass(element, this.unselected);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Selection.prototype.getPath = function (startX, startY, endX, endY) {\r\n        if (this.dragging) {\r\n            if (this.path) {\r\n                this.path = this.path + ' L' + endX + ' ' + endY;\r\n            }\r\n            else {\r\n                this.path = 'M ' + startX + ' ' + startY;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Performs a highlight animation on the specified HTML element.\r\n     *\r\n     * @param {HTMLElement} element - The HTML element to animate.\r\n     * @param {number} index - The index to find the opacity value of the series.\r\n     * @param {number} duration - The duration of the animation in milliseconds.\r\n     * @param {number} startOpacity - The starting opacity value for the animation.\r\n     * @param {boolean} strokeWidth - The starting opacity value for the animation.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.highlightAnimation = function (element, index, duration, startOpacity, strokeWidth) {\r\n        var endOpacity;\r\n        var endWidth;\r\n        var startWidth = parseFloat(this.chart.visibleSeries[index].width.toString()) + 1;\r\n        if (strokeWidth) {\r\n            if (element.id.indexOf('border') !== -1 && this.chart.visibleSeries[index].border.width) {\r\n                endWidth = parseFloat(this.chart.visibleSeries[index].border.width.toString());\r\n            }\r\n            else if (element.id.indexOf('Symbol') !== -1 && this.chart.visibleSeries[index].marker.border.width) {\r\n                endWidth = parseFloat(this.chart.visibleSeries[index].marker.border.width.toString());\r\n            }\r\n            else {\r\n                endWidth = parseFloat(this.chart.visibleSeries[index].width.toString());\r\n            }\r\n        }\r\n        else {\r\n            if (element.id.indexOf('border') !== -1) {\r\n                endOpacity = 1;\r\n            }\r\n            else if (element.id.indexOf('Symbol') !== -1) {\r\n                endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\r\n            }\r\n            else {\r\n                endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\r\n            }\r\n            if (isNullOrUndefined(this.chart.selectionModule) && this.chart.selectionMode === 'None' && this.chart.highlightColor !== '') {\r\n                startOpacity = 1;\r\n            }\r\n        }\r\n        if (endOpacity || (strokeWidth && endWidth && startWidth)) {\r\n            new Animation({}).animate(element, {\r\n                duration: duration,\r\n                progress: function (args) {\r\n                    element.style.animation = '';\r\n                    var progress = args.timeStamp / args.duration;\r\n                    if (strokeWidth) {\r\n                        var currentWidth = startWidth + (endWidth - startWidth) * progress;\r\n                        element.setAttribute('stroke-width', currentWidth.toString());\r\n                    }\r\n                    else {\r\n                        var currentOpacity = startOpacity + (endOpacity - startOpacity) * progress;\r\n                        element.setAttribute('opacity', currentOpacity.toString());\r\n                    }\r\n                },\r\n                end: function () {\r\n                    if (strokeWidth) {\r\n                        element.setAttribute('stroke-width', endWidth.toString());\r\n                    }\r\n                    else {\r\n                        element.setAttribute('opacity', endOpacity.toString());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Stops the animation and sets opacity of the specified HTML element.\r\n     *\r\n     * @param {HTMLElement} element - The HTML element to stop the animation.\r\n     * @param {number} index - The index to find the opacity value of the series.\r\n     * @returns {void}\r\n     */\r\n    Selection.prototype.stopElementAnimation = function (element, index) {\r\n        var endOpacity;\r\n        if (element.id.indexOf('border') !== -1) {\r\n            endOpacity = 1;\r\n        }\r\n        else if (element.id.indexOf('Symbol') !== -1) {\r\n            endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\r\n        }\r\n        else {\r\n            endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\r\n        }\r\n        if (element.getAttribute('e-animate')) {\r\n            Animation.stop(element);\r\n        }\r\n        element.setAttribute('opacity', endOpacity.toString());\r\n    };\r\n    Selection.prototype.pointChecking = function (path) {\r\n        var _this = this;\r\n        var chart = this.chart;\r\n        var element;\r\n        var svgRect = getElement(chart.svgId).getBoundingClientRect();\r\n        var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\r\n        var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\r\n        this.multiDataIndexes[this.count] = [];\r\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\r\n            var series = _a[_i];\r\n            series.points.filter(function (point) {\r\n                // To check whether the point have symbol location value or not.\r\n                if (point.symbolLocations && point.symbolLocations.length) {\r\n                    element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\r\n                }\r\n                if (element === path) {\r\n                    point.isSelect = true;\r\n                    if ((_this.chart.allowMultiSelection) && _this.currentMode === 'Lasso') {\r\n                        _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\r\n                        _this.seriesIndex++;\r\n                    }\r\n                }\r\n                else if (!(chart.allowMultiSelection)) {\r\n                    point.isSelect = false;\r\n                }\r\n            });\r\n        }\r\n        this.seriesIndex = 0;\r\n    };\r\n    /**\r\n     * Get module name.\r\n     *\r\n     * @private\r\n     * @returns {string} - Returns the module name.\r\n     */\r\n    Selection.prototype.getModuleName = function () {\r\n        return 'Selection';\r\n    };\r\n    /**\r\n     * To destroy the selection.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Selection.prototype.destroy = function () {\r\n        this.removeEventListener();\r\n        // Destroy method performed here\r\n    };\r\n    return Selection;\r\n}(BaseSelection));\r\nexport { Selection };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}