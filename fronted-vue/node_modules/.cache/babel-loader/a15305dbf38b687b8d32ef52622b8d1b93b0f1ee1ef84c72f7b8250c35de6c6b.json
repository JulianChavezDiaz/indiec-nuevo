{"ast":null,"code":"import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfBoolean } from './../primitives/pdf-boolean';\nimport { PdfName } from './../primitives/pdf-name';\n/**\r\n * Defines the way the document is to be presented on the screen or in print.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets viewer preferences\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\nvar PdfViewerPreferences = /** @class */function () {\n  /**\r\n   * Initialize a new instance of `PdfViewerPreferences` class.\r\n   *\r\n   * @private\r\n   * ```\r\n  */\n  function PdfViewerPreferences(catalog) {\n    this._dictionaryProperties = new DictionaryProperties();\n    this._centerWindow = false;\n    this._fitWindow = false;\n    this._displayTitle = false;\n    this._splitWindow = false;\n    this._hideMenuBar = false;\n    this._hideToolBar = false;\n    this._hideWindowUI = false;\n    this._pageMode = PdfPageMode.UseNone;\n    this._pageLayout = PdfPageLayout.SinglePage;\n    this._dictionary = new PdfDictionary();\n    this._duplex = DuplexMode.None;\n    this._catalog = catalog;\n  }\n  Object.defineProperty(PdfViewerPreferences.prototype, \"centerWindow\", {\n    /**\r\n     * A flag specifying whether to position the document’s window in the center of the screen.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the center window\r\n     * let centerWindow : boolean = viewerPreferences.centerWindow;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._centerWindow;\n    },\n    /**\r\n     * A flag specifying whether to position the document’s window in the center of the screen.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the center window\r\n     * viewerPreferences.centerWindow = true;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._centerWindow = value;\n      this._dictionary.items.setValue(this._dictionaryProperties.centerWindow, new PdfBoolean(this._centerWindow));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"displayTitle\", {\n    /**\r\n     * A flag specifying whether the window’s title bar should display the document title taken\r\n     * from the Title entry of the document information dictionary. If false, the title bar\r\n     * should instead display the name of the PDF file containing the document.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the display title\r\n     * let displayTitle : boolean = viewerPreferences.displayTitle;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._displayTitle;\n    },\n    /**\r\n     * A flag specifying whether the window’s title bar should display the document title taken\r\n     * from the Title entry of the document information dictionary. If false, the title bar\r\n     * should instead display the name of the PDF file containing the document.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the display title\r\n     * viewerPreferences.displayTitle = true;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._displayTitle = value;\n      this._dictionary.items.setValue(this._dictionaryProperties.displayTitle, new PdfBoolean(this._displayTitle));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"fitWindow\", {\n    /**\r\n     * A flag specifying whether to resize the document’s window to fit the size of the first\r\n     * displayed page.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the fit window\r\n     * let fitWindow : boolean = viewerPreferences.fitWindow;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._fitWindow;\n    },\n    /**\r\n     * A flag specifying whether to resize the document’s window to fit the size of the first\r\n     * displayed page.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the fit window\r\n     * viewerPreferences.fitWindow = true;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._fitWindow = value;\n      this._dictionary.items.setValue(this._dictionaryProperties.fitWindow, new PdfBoolean(this._fitWindow));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"hideMenuBar\", {\n    /**\r\n     * A flag specifying whether to hide the viewer application’s menu bar when the\r\n     * document is active.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the hide menu bar\r\n     * let hideMenuBar: boolean = viewerPreferences.hideMenuBar;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._hideMenuBar;\n    },\n    /**\r\n     * A flag specifying whether to hide the viewer application’s menu bar when the\r\n     * document is active.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the hide menu bar\r\n     * viewerPreferences.hideMenuBar = true;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._hideMenuBar = value;\n      this._dictionary.items.setValue(this._dictionaryProperties.hideMenuBar, new PdfBoolean(this._hideMenuBar));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"hideToolBar\", {\n    /**\r\n     * A flag specifying whether to hide the viewer application’s tool bar when the\r\n     * document is active.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the hide tool bar\r\n     * let hideToolBar: boolean = viewerPreferences.hideToolBar;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._hideToolBar;\n    },\n    /**\r\n     * A flag specifying whether to hide the viewer application’s tool bar when the\r\n     * document is active.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the hide tool bar\r\n     * viewerPreferences.hideToolbar = true;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._hideToolBar = value;\n      this._dictionary.items.setValue(this._dictionaryProperties.hideToolBar, new PdfBoolean(this._hideToolBar));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"hideWindowUI\", {\n    /**\r\n     * A flag specifying whether to hide user interface elements in the document’s window\r\n     * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the hide window UI\r\n     * let hideWindowUI: boolean = viewerPreferences.hideWindowUI;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._hideWindowUI;\n    },\n    /**\r\n     * A flag specifying whether to hide user interface elements in the document’s window\r\n     * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the hide window UI\r\n     * viewerPreferences.hideWindowUI = true;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._hideWindowUI = value;\n      this._dictionary.items.setValue(this._dictionaryProperties.hideWindowUI, new PdfBoolean(this._hideWindowUI));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"pageMode\", {\n    /**\r\n     * A name object specifying how the document should be displayed when opened.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the page mode\r\n     * let pageMode: PdfPageMode = viewerPreferences.pageMode;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._pageMode;\n    },\n    /**\r\n     * A name object specifying how the document should be displayed when opened.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the page mode\r\n     * viewerPreferences.pageMode = PdfPageMode.UseOutlines;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._pageMode = value;\n      this._catalog.items.setValue(this._dictionaryProperties.pageMode, new PdfName(this._mapPageMode(this._pageMode)));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"duplex\", {\n    /**\r\n     * Gets print duplex mode handling option to use when printing the file from the print dialog.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the duplex\r\n     * let duplex : DuplexMode = viewerPreferences.duplex;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._duplex;\n    },\n    /**\r\n     * Sets print duplex mode handling option to use when printing the file from the print dialog.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the duplex\r\n     * viewerPreferences.duplex = DuplexMode.DuplexFlipLongEdge;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._duplex = value;\n      this._catalog.items.setValue(this._dictionaryProperties.duplex, new PdfName(this._mapDuplexMode(this._duplex)));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"pageLayout\", {\n    /**\r\n     * A name object specifying the page layout to be used when the document is opened.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the page layout\r\n     * let pageLayout : PdfPageLayout = viewerPreferences.pageLayout;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._pageLayout;\n    },\n    /**\r\n     * A name object specifying the page layout to be used when the document is opened.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the page layout\r\n     * viewerPreferences.pageLayout = PdfPageLayout.TwoColumnLeft;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._pageLayout = value;\n      this._catalog.items.setValue(this._dictionaryProperties.pageLayout, new PdfName(this._mapPageLayout(this._pageLayout)));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"pageScaling\", {\n    /**\r\n     * Gets the page scaling option to be selected\r\n     * when a print dialog is displayed for this document.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Gets the page scaling\r\n     * let pageScaling : PageScalingMode = viewerPreferences.pageScaling;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this._pageScaling;\n    },\n    /**\r\n     * Sets the page scaling option to be selected\r\n     * when a print dialog is displayed for this document.\r\n     * ```typescript\r\n     * // Create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // Gets the viewer preferences of the document\r\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n     * // Sets the page scaling\r\n     * viewerPreferences.pageScaling = PageScalingMode.None;\r\n     * // Destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    set: function (value) {\n      this._pageScaling = value;\n      if (this._pageScaling === PageScalingMode.AppDefault && this._dictionary.items.containsKey(this._dictionaryProperties.printScaling)) {\n        this._dictionary.items.remove(this._dictionaryProperties.printScaling);\n      } else if (this._pageScaling === PageScalingMode.None) {\n        this._dictionary.items.setValue(this._dictionaryProperties.printScaling, new PdfName('None'));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfViewerPreferences.prototype, \"element\", {\n    /**\r\n     * Primivie element\r\n     *\r\n     * @private\r\n     */\n    get: function () {\n      return this._dictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfViewerPreferences.prototype._mapDuplexMode = function (mode) {\n    switch (mode) {\n      case DuplexMode.Simplex:\n        return 'Simplex';\n      case DuplexMode.DuplexFlipShortEdge:\n        return 'DuplexFlipShortEdge';\n      case DuplexMode.DuplexFlipLongEdge:\n        return 'DuplexFlipLongEdge';\n      case DuplexMode.None:\n        return 'None';\n    }\n  };\n  PdfViewerPreferences.prototype._mapPageMode = function (mode) {\n    switch (mode) {\n      case PdfPageMode.UseNone:\n        return 'UseNone';\n      case PdfPageMode.UseOutlines:\n        return 'UseOutlines';\n      case PdfPageMode.UseThumbs:\n        return 'UseThumbs';\n      case PdfPageMode.FullScreen:\n        return 'FullScreen';\n      case PdfPageMode.UseOC:\n        return 'UseOC';\n      case PdfPageMode.UseAttachments:\n        return 'UseAttachments';\n    }\n  };\n  PdfViewerPreferences.prototype._mapPageLayout = function (layout) {\n    switch (layout) {\n      case PdfPageLayout.SinglePage:\n        return 'SinglePage';\n      case PdfPageLayout.OneColumn:\n        return 'OneColumn';\n      case PdfPageLayout.TwoColumnLeft:\n        return 'TwoColumnLeft';\n      case PdfPageLayout.TwoColumnRight:\n        return 'TwoColumnRight';\n      case PdfPageLayout.TwoPageLeft:\n        return 'TwoPageLeft';\n      case PdfPageLayout.TwoPageRight:\n        return 'TwoPageRight';\n    }\n  };\n  return PdfViewerPreferences;\n}();\nexport { PdfViewerPreferences };\n/**\r\n * Represents mode of document displaying.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the page mode\r\n * viewerPreferences.pageMode = PdfPageMode.UseOutlines;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\nexport var PdfPageMode;\n(function (PdfPageMode) {\n  /**\r\n   * Default value. Neither document outline nor thumbnail images visible.\r\n   */\n  PdfPageMode[PdfPageMode[\"UseNone\"] = 0] = \"UseNone\";\n  /**\r\n   * Document outline visible.\r\n   */\n  PdfPageMode[PdfPageMode[\"UseOutlines\"] = 1] = \"UseOutlines\";\n  /**\r\n   * Thumbnail images visible.\r\n   */\n  PdfPageMode[PdfPageMode[\"UseThumbs\"] = 2] = \"UseThumbs\";\n  /**\r\n   * Full-screen mode, with no menu bar, window controls, or any other window visible.\r\n   */\n  PdfPageMode[PdfPageMode[\"FullScreen\"] = 3] = \"FullScreen\";\n  /**\r\n   * Optional content group panel visible.\r\n   */\n  PdfPageMode[PdfPageMode[\"UseOC\"] = 4] = \"UseOC\";\n  /**\r\n   * Attachments are visible.\r\n   */\n  PdfPageMode[PdfPageMode[\"UseAttachments\"] = 5] = \"UseAttachments\";\n})(PdfPageMode || (PdfPageMode = {}));\n/**\r\n * A name object specifying the page layout to be used when the document is opened.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the page layout\r\n * viewerPreferences.pageLayout = PdfPageLayout.TwoColumnLeft;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\nexport var PdfPageLayout;\n(function (PdfPageLayout) {\n  /**\r\n   * Default Value. Display one page at a time.\r\n   */\n  PdfPageLayout[PdfPageLayout[\"SinglePage\"] = 0] = \"SinglePage\";\n  /**\r\n   * Display the pages in one column.\r\n   */\n  PdfPageLayout[PdfPageLayout[\"OneColumn\"] = 1] = \"OneColumn\";\n  /**\r\n   * Display the pages in two columns, with odd numbered\r\n   * pages on the left.\r\n   */\n  PdfPageLayout[PdfPageLayout[\"TwoColumnLeft\"] = 2] = \"TwoColumnLeft\";\n  /**\r\n   * Display the pages in two columns, with odd numbered\r\n   * pages on the right.\r\n   */\n  PdfPageLayout[PdfPageLayout[\"TwoColumnRight\"] = 3] = \"TwoColumnRight\";\n  /**\r\n   * Display the pages two at a time, with odd-numbered pages on the left.\r\n   */\n  PdfPageLayout[PdfPageLayout[\"TwoPageLeft\"] = 4] = \"TwoPageLeft\";\n  /**\r\n   * Display the pages two at a time, with odd-numbered pages on the right.\r\n   */\n  PdfPageLayout[PdfPageLayout[\"TwoPageRight\"] = 5] = \"TwoPageRight\";\n})(PdfPageLayout || (PdfPageLayout = {}));\n/**\r\n * The paper handling option to use when printing the file from the print dialog.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the duplex\r\n * viewerPreferences.duplex = DuplexMode.DuplexFlipLongEdge;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\nexport var DuplexMode;\n(function (DuplexMode) {\n  /**\r\n   * Print single-sided.\r\n   */\n  DuplexMode[DuplexMode[\"Simplex\"] = 0] = \"Simplex\";\n  /**\r\n   * Duplex and flip on the short edge of the sheet.\r\n   */\n  DuplexMode[DuplexMode[\"DuplexFlipShortEdge\"] = 1] = \"DuplexFlipShortEdge\";\n  /**\r\n   * Duplex and flip on the long edge of the sheet.\r\n   */\n  DuplexMode[DuplexMode[\"DuplexFlipLongEdge\"] = 2] = \"DuplexFlipLongEdge\";\n  /**\r\n   * Default value.\r\n   */\n  DuplexMode[DuplexMode[\"None\"] = 3] = \"None\";\n})(DuplexMode || (DuplexMode = {}));\n/**\r\n * Specifies the different page scaling option that shall be selected\r\n * when a print dialog is displayed for this document.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the page scaling\r\n * viewerPreferences.pageScaling = PageScalingMode.None;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\nexport var PageScalingMode;\n(function (PageScalingMode) {\n  /**\r\n   * Indicates the conforming reader’s default print scaling.\r\n   */\n  PageScalingMode[PageScalingMode[\"AppDefault\"] = 0] = \"AppDefault\";\n  /**\r\n   * Indicates no page scaling.\r\n   */\n  PageScalingMode[PageScalingMode[\"None\"] = 1] = \"None\";\n})(PageScalingMode || (PageScalingMode = {}));","map":{"version":3,"names":["DictionaryProperties","PdfDictionary","PdfBoolean","PdfName","PdfViewerPreferences","catalog","_dictionaryProperties","_centerWindow","_fitWindow","_displayTitle","_splitWindow","_hideMenuBar","_hideToolBar","_hideWindowUI","_pageMode","PdfPageMode","UseNone","_pageLayout","PdfPageLayout","SinglePage","_dictionary","_duplex","DuplexMode","None","_catalog","Object","defineProperty","prototype","get","set","value","items","setValue","centerWindow","enumerable","configurable","displayTitle","fitWindow","hideMenuBar","hideToolBar","hideWindowUI","pageMode","_mapPageMode","duplex","_mapDuplexMode","pageLayout","_mapPageLayout","_pageScaling","PageScalingMode","AppDefault","containsKey","printScaling","remove","mode","Simplex","DuplexFlipShortEdge","DuplexFlipLongEdge","UseOutlines","UseThumbs","FullScreen","UseOC","UseAttachments","layout","OneColumn","TwoColumnLeft","TwoColumnRight","TwoPageLeft","TwoPageRight"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-viewer-preferences.js"],"sourcesContent":["import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\r\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\r\nimport { PdfBoolean } from './../primitives/pdf-boolean';\r\nimport { PdfName } from './../primitives/pdf-name';\r\n/**\r\n * Defines the way the document is to be presented on the screen or in print.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets viewer preferences\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nvar PdfViewerPreferences = /** @class */ (function () {\r\n    /**\r\n     * Initialize a new instance of `PdfViewerPreferences` class.\r\n     *\r\n     * @private\r\n     * ```\r\n    */\r\n    function PdfViewerPreferences(catalog) {\r\n        this._dictionaryProperties = new DictionaryProperties();\r\n        this._centerWindow = false;\r\n        this._fitWindow = false;\r\n        this._displayTitle = false;\r\n        this._splitWindow = false;\r\n        this._hideMenuBar = false;\r\n        this._hideToolBar = false;\r\n        this._hideWindowUI = false;\r\n        this._pageMode = PdfPageMode.UseNone;\r\n        this._pageLayout = PdfPageLayout.SinglePage;\r\n        this._dictionary = new PdfDictionary();\r\n        this._duplex = DuplexMode.None;\r\n        this._catalog = catalog;\r\n    }\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"centerWindow\", {\r\n        /**\r\n         * A flag specifying whether to position the document’s window in the center of the screen.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the center window\r\n         * let centerWindow : boolean = viewerPreferences.centerWindow;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._centerWindow;\r\n        },\r\n        /**\r\n         * A flag specifying whether to position the document’s window in the center of the screen.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the center window\r\n         * viewerPreferences.centerWindow = true;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._centerWindow = value;\r\n            this._dictionary.items.setValue(this._dictionaryProperties.centerWindow, new PdfBoolean(this._centerWindow));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"displayTitle\", {\r\n        /**\r\n         * A flag specifying whether the window’s title bar should display the document title taken\r\n         * from the Title entry of the document information dictionary. If false, the title bar\r\n         * should instead display the name of the PDF file containing the document.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the display title\r\n         * let displayTitle : boolean = viewerPreferences.displayTitle;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._displayTitle;\r\n        },\r\n        /**\r\n         * A flag specifying whether the window’s title bar should display the document title taken\r\n         * from the Title entry of the document information dictionary. If false, the title bar\r\n         * should instead display the name of the PDF file containing the document.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the display title\r\n         * viewerPreferences.displayTitle = true;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._displayTitle = value;\r\n            this._dictionary.items.setValue(this._dictionaryProperties.displayTitle, new PdfBoolean(this._displayTitle));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"fitWindow\", {\r\n        /**\r\n         * A flag specifying whether to resize the document’s window to fit the size of the first\r\n         * displayed page.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the fit window\r\n         * let fitWindow : boolean = viewerPreferences.fitWindow;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._fitWindow;\r\n        },\r\n        /**\r\n         * A flag specifying whether to resize the document’s window to fit the size of the first\r\n         * displayed page.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the fit window\r\n         * viewerPreferences.fitWindow = true;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._fitWindow = value;\r\n            this._dictionary.items.setValue(this._dictionaryProperties.fitWindow, new PdfBoolean(this._fitWindow));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"hideMenuBar\", {\r\n        /**\r\n         * A flag specifying whether to hide the viewer application’s menu bar when the\r\n         * document is active.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the hide menu bar\r\n         * let hideMenuBar: boolean = viewerPreferences.hideMenuBar;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._hideMenuBar;\r\n        },\r\n        /**\r\n         * A flag specifying whether to hide the viewer application’s menu bar when the\r\n         * document is active.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the hide menu bar\r\n         * viewerPreferences.hideMenuBar = true;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._hideMenuBar = value;\r\n            this._dictionary.items.setValue(this._dictionaryProperties.hideMenuBar, new PdfBoolean(this._hideMenuBar));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"hideToolBar\", {\r\n        /**\r\n         * A flag specifying whether to hide the viewer application’s tool bar when the\r\n         * document is active.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the hide tool bar\r\n         * let hideToolBar: boolean = viewerPreferences.hideToolBar;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._hideToolBar;\r\n        },\r\n        /**\r\n         * A flag specifying whether to hide the viewer application’s tool bar when the\r\n         * document is active.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the hide tool bar\r\n         * viewerPreferences.hideToolbar = true;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._hideToolBar = value;\r\n            this._dictionary.items.setValue(this._dictionaryProperties.hideToolBar, new PdfBoolean(this._hideToolBar));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"hideWindowUI\", {\r\n        /**\r\n         * A flag specifying whether to hide user interface elements in the document’s window\r\n         * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the hide window UI\r\n         * let hideWindowUI: boolean = viewerPreferences.hideWindowUI;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._hideWindowUI;\r\n        },\r\n        /**\r\n         * A flag specifying whether to hide user interface elements in the document’s window\r\n         * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the hide window UI\r\n         * viewerPreferences.hideWindowUI = true;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._hideWindowUI = value;\r\n            this._dictionary.items.setValue(this._dictionaryProperties.hideWindowUI, new PdfBoolean(this._hideWindowUI));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"pageMode\", {\r\n        /**\r\n         * A name object specifying how the document should be displayed when opened.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the page mode\r\n         * let pageMode: PdfPageMode = viewerPreferences.pageMode;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._pageMode;\r\n        },\r\n        /**\r\n         * A name object specifying how the document should be displayed when opened.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the page mode\r\n         * viewerPreferences.pageMode = PdfPageMode.UseOutlines;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._pageMode = value;\r\n            this._catalog.items.setValue(this._dictionaryProperties.pageMode, new PdfName(this._mapPageMode(this._pageMode)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"duplex\", {\r\n        /**\r\n         * Gets print duplex mode handling option to use when printing the file from the print dialog.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the duplex\r\n         * let duplex : DuplexMode = viewerPreferences.duplex;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._duplex;\r\n        },\r\n        /**\r\n         * Sets print duplex mode handling option to use when printing the file from the print dialog.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the duplex\r\n         * viewerPreferences.duplex = DuplexMode.DuplexFlipLongEdge;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._duplex = value;\r\n            this._catalog.items.setValue(this._dictionaryProperties.duplex, new PdfName(this._mapDuplexMode(this._duplex)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"pageLayout\", {\r\n        /**\r\n         * A name object specifying the page layout to be used when the document is opened.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the page layout\r\n         * let pageLayout : PdfPageLayout = viewerPreferences.pageLayout;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._pageLayout;\r\n        },\r\n        /**\r\n         * A name object specifying the page layout to be used when the document is opened.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the page layout\r\n         * viewerPreferences.pageLayout = PdfPageLayout.TwoColumnLeft;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._pageLayout = value;\r\n            this._catalog.items.setValue(this._dictionaryProperties.pageLayout, new PdfName(this._mapPageLayout(this._pageLayout)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"pageScaling\", {\r\n        /**\r\n         * Gets the page scaling option to be selected\r\n         * when a print dialog is displayed for this document.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Gets the page scaling\r\n         * let pageScaling : PageScalingMode = viewerPreferences.pageScaling;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this._pageScaling;\r\n        },\r\n        /**\r\n         * Sets the page scaling option to be selected\r\n         * when a print dialog is displayed for this document.\r\n         * ```typescript\r\n         * // Create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // Gets the viewer preferences of the document\r\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n         * // Sets the page scaling\r\n         * viewerPreferences.pageScaling = PageScalingMode.None;\r\n         * // Destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        set: function (value) {\r\n            this._pageScaling = value;\r\n            if (this._pageScaling === PageScalingMode.AppDefault && this._dictionary.items.containsKey(this._dictionaryProperties.printScaling)) {\r\n                this._dictionary.items.remove(this._dictionaryProperties.printScaling);\r\n            }\r\n            else if (this._pageScaling === PageScalingMode.None) {\r\n                this._dictionary.items.setValue(this._dictionaryProperties.printScaling, new PdfName('None'));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfViewerPreferences.prototype, \"element\", {\r\n        /**\r\n         * Primivie element\r\n         *\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this._dictionary;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PdfViewerPreferences.prototype._mapDuplexMode = function (mode) {\r\n        switch (mode) {\r\n            case DuplexMode.Simplex:\r\n                return 'Simplex';\r\n            case DuplexMode.DuplexFlipShortEdge:\r\n                return 'DuplexFlipShortEdge';\r\n            case DuplexMode.DuplexFlipLongEdge:\r\n                return 'DuplexFlipLongEdge';\r\n            case DuplexMode.None:\r\n                return 'None';\r\n        }\r\n    };\r\n    PdfViewerPreferences.prototype._mapPageMode = function (mode) {\r\n        switch (mode) {\r\n            case PdfPageMode.UseNone:\r\n                return 'UseNone';\r\n            case PdfPageMode.UseOutlines:\r\n                return 'UseOutlines';\r\n            case PdfPageMode.UseThumbs:\r\n                return 'UseThumbs';\r\n            case PdfPageMode.FullScreen:\r\n                return 'FullScreen';\r\n            case PdfPageMode.UseOC:\r\n                return 'UseOC';\r\n            case PdfPageMode.UseAttachments:\r\n                return 'UseAttachments';\r\n        }\r\n    };\r\n    PdfViewerPreferences.prototype._mapPageLayout = function (layout) {\r\n        switch (layout) {\r\n            case PdfPageLayout.SinglePage:\r\n                return 'SinglePage';\r\n            case PdfPageLayout.OneColumn:\r\n                return 'OneColumn';\r\n            case PdfPageLayout.TwoColumnLeft:\r\n                return 'TwoColumnLeft';\r\n            case PdfPageLayout.TwoColumnRight:\r\n                return 'TwoColumnRight';\r\n            case PdfPageLayout.TwoPageLeft:\r\n                return 'TwoPageLeft';\r\n            case PdfPageLayout.TwoPageRight:\r\n                return 'TwoPageRight';\r\n        }\r\n    };\r\n    return PdfViewerPreferences;\r\n}());\r\nexport { PdfViewerPreferences };\r\n/**\r\n * Represents mode of document displaying.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the page mode\r\n * viewerPreferences.pageMode = PdfPageMode.UseOutlines;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nexport var PdfPageMode;\r\n(function (PdfPageMode) {\r\n    /**\r\n     * Default value. Neither document outline nor thumbnail images visible.\r\n     */\r\n    PdfPageMode[PdfPageMode[\"UseNone\"] = 0] = \"UseNone\";\r\n    /**\r\n     * Document outline visible.\r\n     */\r\n    PdfPageMode[PdfPageMode[\"UseOutlines\"] = 1] = \"UseOutlines\";\r\n    /**\r\n     * Thumbnail images visible.\r\n     */\r\n    PdfPageMode[PdfPageMode[\"UseThumbs\"] = 2] = \"UseThumbs\";\r\n    /**\r\n     * Full-screen mode, with no menu bar, window controls, or any other window visible.\r\n     */\r\n    PdfPageMode[PdfPageMode[\"FullScreen\"] = 3] = \"FullScreen\";\r\n    /**\r\n     * Optional content group panel visible.\r\n     */\r\n    PdfPageMode[PdfPageMode[\"UseOC\"] = 4] = \"UseOC\";\r\n    /**\r\n     * Attachments are visible.\r\n     */\r\n    PdfPageMode[PdfPageMode[\"UseAttachments\"] = 5] = \"UseAttachments\";\r\n})(PdfPageMode || (PdfPageMode = {}));\r\n/**\r\n * A name object specifying the page layout to be used when the document is opened.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the page layout\r\n * viewerPreferences.pageLayout = PdfPageLayout.TwoColumnLeft;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nexport var PdfPageLayout;\r\n(function (PdfPageLayout) {\r\n    /**\r\n     * Default Value. Display one page at a time.\r\n     */\r\n    PdfPageLayout[PdfPageLayout[\"SinglePage\"] = 0] = \"SinglePage\";\r\n    /**\r\n     * Display the pages in one column.\r\n     */\r\n    PdfPageLayout[PdfPageLayout[\"OneColumn\"] = 1] = \"OneColumn\";\r\n    /**\r\n     * Display the pages in two columns, with odd numbered\r\n     * pages on the left.\r\n     */\r\n    PdfPageLayout[PdfPageLayout[\"TwoColumnLeft\"] = 2] = \"TwoColumnLeft\";\r\n    /**\r\n     * Display the pages in two columns, with odd numbered\r\n     * pages on the right.\r\n     */\r\n    PdfPageLayout[PdfPageLayout[\"TwoColumnRight\"] = 3] = \"TwoColumnRight\";\r\n    /**\r\n     * Display the pages two at a time, with odd-numbered pages on the left.\r\n     */\r\n    PdfPageLayout[PdfPageLayout[\"TwoPageLeft\"] = 4] = \"TwoPageLeft\";\r\n    /**\r\n     * Display the pages two at a time, with odd-numbered pages on the right.\r\n     */\r\n    PdfPageLayout[PdfPageLayout[\"TwoPageRight\"] = 5] = \"TwoPageRight\";\r\n})(PdfPageLayout || (PdfPageLayout = {}));\r\n/**\r\n * The paper handling option to use when printing the file from the print dialog.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the duplex\r\n * viewerPreferences.duplex = DuplexMode.DuplexFlipLongEdge;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nexport var DuplexMode;\r\n(function (DuplexMode) {\r\n    /**\r\n     * Print single-sided.\r\n     */\r\n    DuplexMode[DuplexMode[\"Simplex\"] = 0] = \"Simplex\";\r\n    /**\r\n     * Duplex and flip on the short edge of the sheet.\r\n     */\r\n    DuplexMode[DuplexMode[\"DuplexFlipShortEdge\"] = 1] = \"DuplexFlipShortEdge\";\r\n    /**\r\n     * Duplex and flip on the long edge of the sheet.\r\n     */\r\n    DuplexMode[DuplexMode[\"DuplexFlipLongEdge\"] = 2] = \"DuplexFlipLongEdge\";\r\n    /**\r\n     * Default value.\r\n     */\r\n    DuplexMode[DuplexMode[\"None\"] = 3] = \"None\";\r\n})(DuplexMode || (DuplexMode = {}));\r\n/**\r\n * Specifies the different page scaling option that shall be selected\r\n * when a print dialog is displayed for this document.\r\n * ```typescript\r\n * // Create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // Gets the viewer preferences of the document\r\n * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\r\n * // Sets the page scaling\r\n * viewerPreferences.pageScaling = PageScalingMode.None;\r\n * // Destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nexport var PageScalingMode;\r\n(function (PageScalingMode) {\r\n    /**\r\n     * Indicates the conforming reader’s default print scaling.\r\n     */\r\n    PageScalingMode[PageScalingMode[\"AppDefault\"] = 0] = \"AppDefault\";\r\n    /**\r\n     * Indicates no page scaling.\r\n     */\r\n    PageScalingMode[PageScalingMode[\"None\"] = 1] = \"None\";\r\n})(PageScalingMode || (PageScalingMode = {}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}