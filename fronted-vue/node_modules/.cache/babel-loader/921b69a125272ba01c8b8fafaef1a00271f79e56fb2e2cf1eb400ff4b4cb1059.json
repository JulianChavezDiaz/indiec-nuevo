{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * PdfPageLayerCollection.ts class for EJ2-PDF\r\n */\nimport { PdfPageBase } from './pdf-page-base';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfPageLayer } from './pdf-page-layer';\nimport { PdfCollection } from './../general/pdf-collection';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfStream } from './../primitives/pdf-stream';\n/**\r\n * The class provides methods and properties to handle the collections of `PdfPageLayer`.\r\n */\nvar PdfPageLayerCollection = /** @class */function (_super) {\n  __extends(PdfPageLayerCollection, _super);\n  function PdfPageLayerCollection(page) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Stores the `number of first level layers` in the document.\r\n     * @default 0\r\n     * @private\r\n     */\n    _this.parentLayerCount = 0;\n    /**\r\n     * Indicates if `Sublayer` is present.\r\n     * @default false\r\n     * @private\r\n     */\n    _this.sublayer = false;\n    /**\r\n     * Stores the `optional content dictionary`.\r\n     * @private\r\n     */\n    _this.optionalContent = new PdfDictionary();\n    if (page instanceof PdfPageBase) {\n      // if (page == null) {\n      //     throw new Error('ArgumentNullException:page');\n      // }\n      _this.page = page;\n      var lPage = page;\n      // if (lPage != null) {\n      _this.parseLayers(lPage);\n      // }\n    }\n    return _this;\n  }\n  PdfPageLayerCollection.prototype.items = function (index, value) {\n    if (typeof index === 'number' && typeof value === 'undefined') {\n      var obj = this.list[index];\n      return obj;\n    } else {\n      if (value == null) {\n        throw new Error('ArgumentNullException: layer');\n      }\n      if (value.page !== this.page) {\n        throw new Error('ArgumentException: The layer belongs to another page');\n      }\n      // // Add/remove the layer.\n      // let layer : PdfPageLayer = this.items(index);\n      // if (layer != null) {\n      //     this.RemoveLayer(layer);\n      // }\n      // this.List[index] = value;\n      // this.InsertLayer(index, value);\n    }\n  };\n  PdfPageLayerCollection.prototype.add = function (firstArgument, secondArgument) {\n    if (typeof firstArgument === 'undefined') {\n      var layer = new PdfPageLayer(this.page);\n      layer.name = '';\n      this.add(layer);\n      return layer;\n    } else if (firstArgument instanceof PdfPageLayer) {\n      // if (layer == null)\n      //     throw new ArgumentNullException(\"layer\");\n      // if (layer.Page != m_page)\n      //     throw new ArgumentException(\"The layer belongs to another page\");\n      var index = this.list.push(firstArgument);\n      // Register layer.\n      this.addLayer(index, firstArgument);\n      return index;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Registers `layer` at the page.\r\n   * @private\r\n   */\n  PdfPageLayerCollection.prototype.addLayer = function (index, layer) {\n    var reference = new PdfReferenceHolder(layer);\n    this.page.contents.add(reference);\n  };\n  // private RemoveLayer(layer : PdfPageLayer) : void {\n  //     if (layer == null) {\n  //         throw new Error('ArgumentNullException:layer');\n  //     }\n  //     let reference : PdfReferenceHolder = new PdfReferenceHolder(layer);\n  //     if (this.page != null) {\n  //         this.page.Contents.Remove(reference);\n  //     }\n  // }\n  /**\r\n   * Inserts `PdfPageLayer` into the collection at specified index.\r\n   * @private\r\n   */\n  PdfPageLayerCollection.prototype.insert = function (index, layer) {\n    // if (index < 0)\n    //     throw new ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\");\n    // if (layer == null)\n    //     throw new ArgumentNullException(\"layer\");\n    // if (layer.Page != m_page)\n    //     throw new ArgumentException(\"The layer belongs to another page\");\n    var list = [];\n    var length = this.list.length;\n    for (var i = index; i < length; i++) {\n      list.push(this.list.pop());\n    }\n    this.list.push(layer);\n    for (var i = 0; i < list.length; i++) {\n      this.list.push(list[i]);\n    }\n    // Register layer.\n    this.insertLayer(index, layer);\n  };\n  /**\r\n   * Registers layer at the page.\r\n   * @private\r\n   */\n  PdfPageLayerCollection.prototype.insertLayer = function (index, layer) {\n    if (layer == null) {\n      throw new Error('ArgumentNullException:layer');\n    }\n    var reference = new PdfReferenceHolder(layer);\n    this.page.contents.insert(index, reference);\n  };\n  // tslint:disable\n  /**\r\n   * `Parses the layers`.\r\n   * @private\r\n   */\n  PdfPageLayerCollection.prototype.parseLayers = function (loadedPage) {\n    // if (loadedPage == null) {\n    //     throw new Error('ArgumentNullException:loadedPage');\n    // }\n    var contents = this.page.contents;\n    var resource = this.page.getResources();\n    var crossTable = null;\n    var ocproperties = null;\n    var propertie = null;\n    var isLayerAdded = false;\n    // if (loadedPage instanceof PdfPage) {\n    crossTable = loadedPage.crossTable;\n    // } else {\n    //     crossTable = (loadedPage as PdfLoadedPage).CrossTable;\n    //     Propertie = PdfCrossTable.Dereference(Resource[DictionaryProperties.Properties]) as PdfDictionary;\n    //     ocproperties = PdfCrossTable.Dereference((loadedPage as PdfLoadedPage).\n    //     Document.Catalog[DictionaryProperties.OCProperties]) as PdfDictionary;\n    // }\n    var saveStream = new PdfStream();\n    var restoreStream = new PdfStream();\n    var saveState = 'q';\n    var newLine = '\\n';\n    var restoreState = 'Q';\n    // for (let index : number = 0; index < contents.Items.length; index++) {\n    //     let obj : IPdfPrimitive = contents[index];\n    //     let stream : PdfStream = crossTable.GetObject(obj) as PdfStream;\n    //     if (stream == null)\n    //         throw new PdfDocumentException(\"Invalid contents array.\");\n    //     // if (stream.Compress)\n    //     {\n    //         if (!loadedPage.Imported)\n    //             stream.Decompress();\n    //     }\n    //     byte[] contentId = stream.Data;\n    //     string str = PdfString.ByteToString(contentId);\n    //     if (!loadedPage.Imported && (contents.Count == 1) && ((stream.Data[stream.Data.Length - 2] ==\n    //     RestoreState) || (stream.Data[stream.Data.Length - 1] == RestoreState)))\n    //     {\n    //         byte[] content = stream.Data;\n    //         byte[] data = new byte[content.Length + 4];\n    //         data[0] = SaveState;\n    //         data[1] = NewLine;\n    //         content.CopyTo(data, 2);\n    //         data[data.Length - 2] = NewLine;\n    //         data[data.Length - 1] = RestoreState;\n    //         stream.Data = data;\n    //     }\n    //     if (ocproperties != null)\n    //     {\n    //         if (Propertie != null)\n    //         {\n    //             foreach (KeyValuePair<PdfName, IPdfPrimitive> prop in Propertie.Items)\n    //             {\n    //                 String Key = prop.Key.ToString();\n    //                 PdfReferenceHolder refh = prop.Value as PdfReferenceHolder;\n    //                 PdfDictionary Dict = null;\n    //                 if (refh != null)\n    //                 {\n    //                     Dict = refh.Object as PdfDictionary;\n    //                 }\n    //                 else\n    //                 {\n    //                     Dict = prop.Value as PdfDictionary;\n    //                 }\n    //                 PdfDictionary m_usage = PdfCrossTable.Dereference(Dict[DictionaryProperties.Usage]) as PdfDictionary;\n    //                 if (m_usage != null)\n    //                 {\n    //                     if (str.Contains(Key))\n    //                     {\n    //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //                         PdfDictionary printoption = PdfCrossTable.Dereference(m_usage[DictionaryProperties.Print])\n    //                         as PdfDictionary;\n    //                         if (printoption != null)\n    //                         {\n    //                             layer.m_printOption = printoption;\n    //                             foreach (KeyValuePair<PdfName, IPdfPrimitive> value in printoption.Items)\n    //                             {\n    //                                 if (value.Key.Value.Equals(DictionaryProperties.PrintState))\n    //                                 {\n    //                                     string printState = (value.Value as PdfName).Value;\n    //                                     if (printState.Equals(DictionaryProperties.OCGON))\n    //                                     {\n    //                                         layer.PrintState = PdfPrintState.AlwaysPrint;\n    //                                         break;\n    //                                     }\n    //                                     else\n    //                                     {\n    //                                         layer.PrintState = PdfPrintState.NeverPrint;\n    //                                         break;\n    //                                     }\n    //                                 }\n    //                             }\n    //                         }\n    //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n    //                         layer.Name = layerName.Value;\n    //                         List.add(layer);\n    //                         isLayerAdded = true;\n    //                         if(!str.Contains(\"EMC\"))\n    //                         break;\n    //                     }\n    //                 }\n    //                 else\n    //                 {\n    //                     if (str.Contains(Key))\n    //                     {\n    //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //                         List.add(layer);\n    //                         if(Dict.ContainsKey(DictionaryProperties.Name))\n    //                         {\n    //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n    //                         layer.Name = layerName.Value;\n    //                         }\n    //                         isLayerAdded = true;\n    //                         break;\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     if (!isLayerAdded)\n    //     {\n    //         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //         List.add(layer);\n    //     }\n    //     else\n    //         isLayerAdded = false;\n    // }\n    var saveData = [];\n    saveData.push(saveState);\n    saveStream.data = saveData;\n    contents.insert(0, new PdfReferenceHolder(saveStream));\n    saveData = [];\n    saveData.push(restoreState);\n    restoreStream.data = saveData;\n    contents.insert(contents.count, new PdfReferenceHolder(restoreStream));\n  };\n  /**\r\n   * Returns `index of` the `PdfPageLayer` in the collection if exists, -1 otherwise.\r\n   * @private\r\n   */\n  PdfPageLayerCollection.prototype.indexOf = function (layer) {\n    if (layer == null) {\n      throw new Error('ArgumentNullException: layer');\n    }\n    var index = this.list.indexOf(layer);\n    return index;\n  };\n  return PdfPageLayerCollection;\n}(PdfCollection);\nexport { PdfPageLayerCollection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfPageBase","PdfDictionary","PdfPageLayer","PdfCollection","PdfReferenceHolder","PdfStream","PdfPageLayerCollection","_super","page","_this","call","parentLayerCount","sublayer","optionalContent","lPage","parseLayers","items","index","value","obj","list","Error","add","firstArgument","secondArgument","layer","name","push","addLayer","reference","contents","insert","length","i","pop","insertLayer","loadedPage","resource","getResources","crossTable","ocproperties","propertie","isLayerAdded","saveStream","restoreStream","saveState","newLine","restoreState","saveData","data","count","indexOf"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer-collection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * PdfPageLayerCollection.ts class for EJ2-PDF\r\n */\r\nimport { PdfPageBase } from './pdf-page-base';\r\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\r\nimport { PdfPageLayer } from './pdf-page-layer';\r\nimport { PdfCollection } from './../general/pdf-collection';\r\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\r\nimport { PdfStream } from './../primitives/pdf-stream';\r\n/**\r\n * The class provides methods and properties to handle the collections of `PdfPageLayer`.\r\n */\r\nvar PdfPageLayerCollection = /** @class */ (function (_super) {\r\n    __extends(PdfPageLayerCollection, _super);\r\n    function PdfPageLayerCollection(page) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Stores the `number of first level layers` in the document.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        _this.parentLayerCount = 0;\r\n        /**\r\n         * Indicates if `Sublayer` is present.\r\n         * @default false\r\n         * @private\r\n         */\r\n        _this.sublayer = false;\r\n        /**\r\n         * Stores the `optional content dictionary`.\r\n         * @private\r\n         */\r\n        _this.optionalContent = new PdfDictionary();\r\n        if (page instanceof PdfPageBase) {\r\n            // if (page == null) {\r\n            //     throw new Error('ArgumentNullException:page');\r\n            // }\r\n            _this.page = page;\r\n            var lPage = page;\r\n            // if (lPage != null) {\r\n            _this.parseLayers(lPage);\r\n            // }\r\n        }\r\n        return _this;\r\n    }\r\n    PdfPageLayerCollection.prototype.items = function (index, value) {\r\n        if (typeof index === 'number' && typeof value === 'undefined') {\r\n            var obj = this.list[index];\r\n            return obj;\r\n        }\r\n        else {\r\n            if (value == null) {\r\n                throw new Error('ArgumentNullException: layer');\r\n            }\r\n            if (value.page !== this.page) {\r\n                throw new Error('ArgumentException: The layer belongs to another page');\r\n            }\r\n            // // Add/remove the layer.\r\n            // let layer : PdfPageLayer = this.items(index);\r\n            // if (layer != null) {\r\n            //     this.RemoveLayer(layer);\r\n            // }\r\n            // this.List[index] = value;\r\n            // this.InsertLayer(index, value);\r\n        }\r\n    };\r\n    PdfPageLayerCollection.prototype.add = function (firstArgument, secondArgument) {\r\n        if (typeof firstArgument === 'undefined') {\r\n            var layer = new PdfPageLayer(this.page);\r\n            layer.name = '';\r\n            this.add(layer);\r\n            return layer;\r\n        }\r\n        else if (firstArgument instanceof PdfPageLayer) {\r\n            // if (layer == null)\r\n            //     throw new ArgumentNullException(\"layer\");\r\n            // if (layer.Page != m_page)\r\n            //     throw new ArgumentException(\"The layer belongs to another page\");\r\n            var index = this.list.push(firstArgument);\r\n            // Register layer.\r\n            this.addLayer(index, firstArgument);\r\n            return index;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * Registers `layer` at the page.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.addLayer = function (index, layer) {\r\n        var reference = new PdfReferenceHolder(layer);\r\n        this.page.contents.add(reference);\r\n    };\r\n    // private RemoveLayer(layer : PdfPageLayer) : void {\r\n    //     if (layer == null) {\r\n    //         throw new Error('ArgumentNullException:layer');\r\n    //     }\r\n    //     let reference : PdfReferenceHolder = new PdfReferenceHolder(layer);\r\n    //     if (this.page != null) {\r\n    //         this.page.Contents.Remove(reference);\r\n    //     }\r\n    // }\r\n    /**\r\n     * Inserts `PdfPageLayer` into the collection at specified index.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.insert = function (index, layer) {\r\n        // if (index < 0)\r\n        //     throw new ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\");\r\n        // if (layer == null)\r\n        //     throw new ArgumentNullException(\"layer\");\r\n        // if (layer.Page != m_page)\r\n        //     throw new ArgumentException(\"The layer belongs to another page\");\r\n        var list = [];\r\n        var length = this.list.length;\r\n        for (var i = index; i < length; i++) {\r\n            list.push(this.list.pop());\r\n        }\r\n        this.list.push(layer);\r\n        for (var i = 0; i < list.length; i++) {\r\n            this.list.push(list[i]);\r\n        }\r\n        // Register layer.\r\n        this.insertLayer(index, layer);\r\n    };\r\n    /**\r\n     * Registers layer at the page.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.insertLayer = function (index, layer) {\r\n        if (layer == null) {\r\n            throw new Error('ArgumentNullException:layer');\r\n        }\r\n        var reference = new PdfReferenceHolder(layer);\r\n        this.page.contents.insert(index, reference);\r\n    };\r\n    // tslint:disable\r\n    /**\r\n     * `Parses the layers`.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.parseLayers = function (loadedPage) {\r\n        // if (loadedPage == null) {\r\n        //     throw new Error('ArgumentNullException:loadedPage');\r\n        // }\r\n        var contents = this.page.contents;\r\n        var resource = this.page.getResources();\r\n        var crossTable = null;\r\n        var ocproperties = null;\r\n        var propertie = null;\r\n        var isLayerAdded = false;\r\n        // if (loadedPage instanceof PdfPage) {\r\n        crossTable = loadedPage.crossTable;\r\n        // } else {\r\n        //     crossTable = (loadedPage as PdfLoadedPage).CrossTable;\r\n        //     Propertie = PdfCrossTable.Dereference(Resource[DictionaryProperties.Properties]) as PdfDictionary;\r\n        //     ocproperties = PdfCrossTable.Dereference((loadedPage as PdfLoadedPage).\r\n        //     Document.Catalog[DictionaryProperties.OCProperties]) as PdfDictionary;\r\n        // }\r\n        var saveStream = new PdfStream();\r\n        var restoreStream = new PdfStream();\r\n        var saveState = 'q';\r\n        var newLine = '\\n';\r\n        var restoreState = 'Q';\r\n        // for (let index : number = 0; index < contents.Items.length; index++) {\r\n        //     let obj : IPdfPrimitive = contents[index];\r\n        //     let stream : PdfStream = crossTable.GetObject(obj) as PdfStream;\r\n        //     if (stream == null)\r\n        //         throw new PdfDocumentException(\"Invalid contents array.\");\r\n        //     // if (stream.Compress)\r\n        //     {\r\n        //         if (!loadedPage.Imported)\r\n        //             stream.Decompress();\r\n        //     }\r\n        //     byte[] contentId = stream.Data;\r\n        //     string str = PdfString.ByteToString(contentId);\r\n        //     if (!loadedPage.Imported && (contents.Count == 1) && ((stream.Data[stream.Data.Length - 2] ==\r\n        //     RestoreState) || (stream.Data[stream.Data.Length - 1] == RestoreState)))\r\n        //     {\r\n        //         byte[] content = stream.Data;\r\n        //         byte[] data = new byte[content.Length + 4];\r\n        //         data[0] = SaveState;\r\n        //         data[1] = NewLine;\r\n        //         content.CopyTo(data, 2);\r\n        //         data[data.Length - 2] = NewLine;\r\n        //         data[data.Length - 1] = RestoreState;\r\n        //         stream.Data = data;\r\n        //     }\r\n        //     if (ocproperties != null)\r\n        //     {\r\n        //         if (Propertie != null)\r\n        //         {\r\n        //             foreach (KeyValuePair<PdfName, IPdfPrimitive> prop in Propertie.Items)\r\n        //             {\r\n        //                 String Key = prop.Key.ToString();\r\n        //                 PdfReferenceHolder refh = prop.Value as PdfReferenceHolder;\r\n        //                 PdfDictionary Dict = null;\r\n        //                 if (refh != null)\r\n        //                 {\r\n        //                     Dict = refh.Object as PdfDictionary;\r\n        //                 }\r\n        //                 else\r\n        //                 {\r\n        //                     Dict = prop.Value as PdfDictionary;\r\n        //                 }\r\n        //                 PdfDictionary m_usage = PdfCrossTable.Dereference(Dict[DictionaryProperties.Usage]) as PdfDictionary;\r\n        //                 if (m_usage != null)\r\n        //                 {\r\n        //                     if (str.Contains(Key))\r\n        //                     {\r\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\r\n        //                         PdfDictionary printoption = PdfCrossTable.Dereference(m_usage[DictionaryProperties.Print])\r\n        //                         as PdfDictionary;\r\n        //                         if (printoption != null)\r\n        //                         {\r\n        //                             layer.m_printOption = printoption;\r\n        //                             foreach (KeyValuePair<PdfName, IPdfPrimitive> value in printoption.Items)\r\n        //                             {\r\n        //                                 if (value.Key.Value.Equals(DictionaryProperties.PrintState))\r\n        //                                 {\r\n        //                                     string printState = (value.Value as PdfName).Value;\r\n        //                                     if (printState.Equals(DictionaryProperties.OCGON))\r\n        //                                     {\r\n        //                                         layer.PrintState = PdfPrintState.AlwaysPrint;\r\n        //                                         break;\r\n        //                                     }\r\n        //                                     else\r\n        //                                     {\r\n        //                                         layer.PrintState = PdfPrintState.NeverPrint;\r\n        //                                         break;\r\n        //                                     }\r\n        //                                 }\r\n        //                             }\r\n        //                         }\r\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\r\n        //                         layer.Name = layerName.Value;\r\n        //                         List.add(layer);\r\n        //                         isLayerAdded = true;\r\n        //                         if(!str.Contains(\"EMC\"))\r\n        //                         break;\r\n        //                     }\r\n        //                 }\r\n        //                 else\r\n        //                 {\r\n        //                     if (str.Contains(Key))\r\n        //                     {\r\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\r\n        //                         List.add(layer);\r\n        //                         if(Dict.ContainsKey(DictionaryProperties.Name))\r\n        //                         {\r\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\r\n        //                         layer.Name = layerName.Value;\r\n        //                         }\r\n        //                         isLayerAdded = true;\r\n        //                         break;\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     }\r\n        //     if (!isLayerAdded)\r\n        //     {\r\n        //         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\r\n        //         List.add(layer);\r\n        //     }\r\n        //     else\r\n        //         isLayerAdded = false;\r\n        // }\r\n        var saveData = [];\r\n        saveData.push(saveState);\r\n        saveStream.data = saveData;\r\n        contents.insert(0, new PdfReferenceHolder(saveStream));\r\n        saveData = [];\r\n        saveData.push(restoreState);\r\n        restoreStream.data = saveData;\r\n        contents.insert(contents.count, new PdfReferenceHolder(restoreStream));\r\n    };\r\n    /**\r\n     * Returns `index of` the `PdfPageLayer` in the collection if exists, -1 otherwise.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.indexOf = function (layer) {\r\n        if (layer == null) {\r\n            throw new Error('ArgumentNullException: layer');\r\n        }\r\n        var index = this.list.indexOf(layer);\r\n        return index;\r\n    };\r\n    return PdfPageLayerCollection;\r\n}(PdfCollection));\r\nexport { PdfPageLayerCollection };\r\n"],"mappings":";AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJ;AACA;AACA;AACA,SAASI,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,kBAAkB,QAAQ,+BAA+B;AAClE,SAASC,SAAS,QAAQ,4BAA4B;AACtD;AACA;AACA;AACA,IAAIC,sBAAsB,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC1DrB,SAAS,CAACoB,sBAAsB,EAAEC,MAAM,CAAC;EACzC,SAASD,sBAAsBA,CAACE,IAAI,EAAE;IAClC,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;AACA;AACA;IACQD,KAAK,CAACE,gBAAgB,GAAG,CAAC;IAC1B;AACR;AACA;AACA;AACA;IACQF,KAAK,CAACG,QAAQ,GAAG,KAAK;IACtB;AACR;AACA;AACA;IACQH,KAAK,CAACI,eAAe,GAAG,IAAIZ,aAAa,CAAC,CAAC;IAC3C,IAAIO,IAAI,YAAYR,WAAW,EAAE;MAC7B;MACA;MACA;MACAS,KAAK,CAACD,IAAI,GAAGA,IAAI;MACjB,IAAIM,KAAK,GAAGN,IAAI;MAChB;MACAC,KAAK,CAACM,WAAW,CAACD,KAAK,CAAC;MACxB;IACJ;IACA,OAAOL,KAAK;EAChB;EACAH,sBAAsB,CAACR,SAAS,CAACkB,KAAK,GAAG,UAAUC,KAAK,EAAEC,KAAK,EAAE;IAC7D,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAI,OAAOC,KAAK,KAAK,WAAW,EAAE;MAC3D,IAAIC,GAAG,GAAG,IAAI,CAACC,IAAI,CAACH,KAAK,CAAC;MAC1B,OAAOE,GAAG;IACd,CAAC,MACI;MACD,IAAID,KAAK,IAAI,IAAI,EAAE;QACf,MAAM,IAAIG,KAAK,CAAC,8BAA8B,CAAC;MACnD;MACA,IAAIH,KAAK,CAACV,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE;QAC1B,MAAM,IAAIa,KAAK,CAAC,sDAAsD,CAAC;MAC3E;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ,CAAC;EACDf,sBAAsB,CAACR,SAAS,CAACwB,GAAG,GAAG,UAAUC,aAAa,EAAEC,cAAc,EAAE;IAC5E,IAAI,OAAOD,aAAa,KAAK,WAAW,EAAE;MACtC,IAAIE,KAAK,GAAG,IAAIvB,YAAY,CAAC,IAAI,CAACM,IAAI,CAAC;MACvCiB,KAAK,CAACC,IAAI,GAAG,EAAE;MACf,IAAI,CAACJ,GAAG,CAACG,KAAK,CAAC;MACf,OAAOA,KAAK;IAChB,CAAC,MACI,IAAIF,aAAa,YAAYrB,YAAY,EAAE;MAC5C;MACA;MACA;MACA;MACA,IAAIe,KAAK,GAAG,IAAI,CAACG,IAAI,CAACO,IAAI,CAACJ,aAAa,CAAC;MACzC;MACA,IAAI,CAACK,QAAQ,CAACX,KAAK,EAAEM,aAAa,CAAC;MACnC,OAAON,KAAK;IAChB,CAAC,MACI;MACD,OAAO,CAAC;IACZ;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIX,sBAAsB,CAACR,SAAS,CAAC8B,QAAQ,GAAG,UAAUX,KAAK,EAAEQ,KAAK,EAAE;IAChE,IAAII,SAAS,GAAG,IAAIzB,kBAAkB,CAACqB,KAAK,CAAC;IAC7C,IAAI,CAACjB,IAAI,CAACsB,QAAQ,CAACR,GAAG,CAACO,SAAS,CAAC;EACrC,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;EACIvB,sBAAsB,CAACR,SAAS,CAACiC,MAAM,GAAG,UAAUd,KAAK,EAAEQ,KAAK,EAAE;IAC9D;IACA;IACA;IACA;IACA;IACA;IACA,IAAIL,IAAI,GAAG,EAAE;IACb,IAAIY,MAAM,GAAG,IAAI,CAACZ,IAAI,CAACY,MAAM;IAC7B,KAAK,IAAIC,CAAC,GAAGhB,KAAK,EAAEgB,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MACjCb,IAAI,CAACO,IAAI,CAAC,IAAI,CAACP,IAAI,CAACc,GAAG,CAAC,CAAC,CAAC;IAC9B;IACA,IAAI,CAACd,IAAI,CAACO,IAAI,CAACF,KAAK,CAAC;IACrB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,IAAI,CAACY,MAAM,EAAEC,CAAC,EAAE,EAAE;MAClC,IAAI,CAACb,IAAI,CAACO,IAAI,CAACP,IAAI,CAACa,CAAC,CAAC,CAAC;IAC3B;IACA;IACA,IAAI,CAACE,WAAW,CAAClB,KAAK,EAAEQ,KAAK,CAAC;EAClC,CAAC;EACD;AACJ;AACA;AACA;EACInB,sBAAsB,CAACR,SAAS,CAACqC,WAAW,GAAG,UAAUlB,KAAK,EAAEQ,KAAK,EAAE;IACnE,IAAIA,KAAK,IAAI,IAAI,EAAE;MACf,MAAM,IAAIJ,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,IAAIQ,SAAS,GAAG,IAAIzB,kBAAkB,CAACqB,KAAK,CAAC;IAC7C,IAAI,CAACjB,IAAI,CAACsB,QAAQ,CAACC,MAAM,CAACd,KAAK,EAAEY,SAAS,CAAC;EAC/C,CAAC;EACD;EACA;AACJ;AACA;AACA;EACIvB,sBAAsB,CAACR,SAAS,CAACiB,WAAW,GAAG,UAAUqB,UAAU,EAAE;IACjE;IACA;IACA;IACA,IAAIN,QAAQ,GAAG,IAAI,CAACtB,IAAI,CAACsB,QAAQ;IACjC,IAAIO,QAAQ,GAAG,IAAI,CAAC7B,IAAI,CAAC8B,YAAY,CAAC,CAAC;IACvC,IAAIC,UAAU,GAAG,IAAI;IACrB,IAAIC,YAAY,GAAG,IAAI;IACvB,IAAIC,SAAS,GAAG,IAAI;IACpB,IAAIC,YAAY,GAAG,KAAK;IACxB;IACAH,UAAU,GAAGH,UAAU,CAACG,UAAU;IAClC;IACA;IACA;IACA;IACA;IACA;IACA,IAAII,UAAU,GAAG,IAAItC,SAAS,CAAC,CAAC;IAChC,IAAIuC,aAAa,GAAG,IAAIvC,SAAS,CAAC,CAAC;IACnC,IAAIwC,SAAS,GAAG,GAAG;IACnB,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIC,YAAY,GAAG,GAAG;IACtjBA,QAAQ,CAACrB,IAAI,CAACkB,SAAS,CAAC;IACxBF,UAAU,CAACM,IAAI,GAAGD,QAAQ;IAC1BlB,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE,IAAI3B,kBAAkB,CAACuC,UAAU,CAAC,CAAC;IACtDK,QAAQ,GAAG,EAAE;IACbA,QAAQ,CAACrB,IAAI,CAACoB,YAAY,CAAC;IAC3BH,aAAa,CAACK,IAAI,GAAGD,QAAQ;IAC7BlB,QAAQ,CAACC,MAAM,CAACD,QAAQ,CAACoB,KAAK,EAAE,IAAI9C,kBAAkB,CAACwC,aAAa,CAAC,CAAC;EAC1E,CAAC;EACD;AACJ;AACA;AACA;EACItC,sBAAsB,CAACR,SAAS,CAACqD,OAAO,GAAG,UAAU1B,KAAK,EAAE;IACxD,IAAIA,KAAK,IAAI,IAAI,EAAE;MACf,MAAM,IAAIJ,KAAK,CAAC,8BAA8B,CAAC;IACnD;IACA,IAAIJ,KAAK,GAAG,IAAI,CAACG,IAAI,CAAC+B,OAAO,CAAC1B,KAAK,CAAC;IACpC,OAAOR,KAAK;EAChB,CAAC;EACD,OAAOX,sBAAsB;AACjC,CAAC,CAACH,aAAa,CAAE;AACjB,SAASG,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}