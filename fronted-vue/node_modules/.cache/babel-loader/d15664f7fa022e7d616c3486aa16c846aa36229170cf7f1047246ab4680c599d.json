{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { PdfString } from './../../primitives/pdf-string';\nimport { ArabicShapeRenderer } from './rtl/rtl-text-shape';\nimport { PdfTextDirection } from './../enum';\nimport { Bidi } from './rtl/rtl-bidirectional';\n/**\r\n * `Metrics` of the font.\r\n * @private\r\n */\nvar RtlRenderer = /** @class */function () {\n  function RtlRenderer() {\n    //region Constants\n    /// Open bracket symbol.\n    /// </summary>\n    this.openBracket = '(';\n    /// <summary>\n    /// Close bracket symbol.\n    /// </summary>\n    this.closeBracket = ')';\n    //#endregion\n  }\n  //#region Constructors\n  /// <summary>\n  /// Initializes a new instance of the <see cref=\"RtlRenderer\"/> class.\n  /// </summary>\n  // public constructor() {\n  // }\n  //#region Public Methods\n  /// <summary>\n  /// Layouts text. Changes blocks position in the RTL text.\n  /// Ligates the text if needed.\n  /// </summary>\n  /// <param name=\"line\">Line of the text.</param>\n  /// <param name=\"font\">Font to be used for string printing.</param>\n  /// <param name=\"rtl\">Font alignment.</param>\n  /// <param name=\"wordSpace\">Indicates whether Word Spacing used or not.</param>\n  /// <returns>Layout string.</returns>\n  RtlRenderer.prototype.layout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n    var result = [];\n    if (font.Unicode) {\n      result = this.customLayout(line, rtl, format, font, wordSpace);\n    } else {\n      result = [];\n      result[0] = line;\n    }\n    return result;\n  };\n  /// <summary>\n  /// Layouts a string and splits it by the words and using correct lay outing.\n  /// </summary>\n  /// <param name=\"line\">Text line.</param>\n  /// <param name=\"font\">Font object.</param>\n  /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n  /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n  /// <returns>Array of words if converted, null otherwise.</returns>\n  RtlRenderer.prototype.splitLayout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n    var words = [];\n    var system = false;\n    if (!system || words == null) {\n      words = this.customSplitLayout(line, font, rtl, wordSpace, format);\n    }\n    return words;\n  };\n  //#endregion\n  //#region Implementation\n  // private isEnglish( word : string) : boolean\n  // {\n  //     let c : string = (word.length > 0) ? word[0] : '';\n  //     return (c >= '0' && c < 'Ã¿');\n  // }\n  // private keepOrder( words : string, startIndex : number, count: number, result : string[], resultIndex : number) : void\n  // {\n  //     for (let i : number = 0, ri = resultIndex - count + 1; i < count; ++i, ++ri) {\n  //         result[ri] = words[i + startIndex];\n  //     }\n  // }\n  /// <summary>\n  /// Uses system API to layout the text.\n  /// </summary>\n  /// <param name=\"line\">Line of the text to be layouted.</param>\n  /// <param name=\"font\">Font which is used for text printing.</param>\n  /// <param name=\"rtl\">Indicates whether we use RTL or RTL lay outing of the text container.</param>\n  /// <returns>Layout string.</returns>\n  /* tslint:disable-next-line:max-line-length */\n  RtlRenderer.prototype.getGlyphIndex = function (line, font, rtl, /*out*/glyphs, custom) {\n    var success = true;\n    var fail = false;\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n    glyphs = null;\n    if (line.length === 0) {\n      return {\n        success: fail,\n        glyphs: glyphs\n      };\n    }\n    var renderer = new ArabicShapeRenderer();\n    var text = renderer.shape(line, 0);\n    var internalFont = font.fontInternal;\n    var ttfReader = internalFont.ttfReader;\n    glyphs = new Uint16Array(text.length);\n    var i = 0;\n    for (var k = 0, len = text.length; k < len; k++) {\n      var ch = text[k];\n      var glyphInfo = ttfReader.getGlyph(ch);\n      if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\n        glyphs[i++] = glyphInfo.index;\n      }\n    }\n    return {\n      success: success,\n      glyphs: glyphs\n    };\n  };\n  /* tslint:disable-next-line:max-line-length */\n  RtlRenderer.prototype.customLayout = function (line, rtl, format, font, wordSpace) {\n    if (wordSpace === null || typeof wordSpace === 'undefined') {\n      if (line == null) {\n        throw new Error('ArgumentNullException : line');\n      }\n      var result = null;\n      //bidirectional order.\n      if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n        var bidi = new Bidi();\n        result = bidi.getLogicalToVisualString(line, rtl);\n      }\n      return result;\n    } else {\n      if (line == null) {\n        throw new Error('ArgumentNullException : line');\n      }\n      if (font == null) {\n        throw new Error('ArgumentNullException : font');\n      }\n      var layouted = null;\n      if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n        var renderer = new ArabicShapeRenderer();\n        var txt = renderer.shape(line, 0);\n        layouted = this.customLayout(txt, rtl, format);\n      }\n      // else {\n      //     layouted = this.customLayout(line, rtl, format);\n      // }\n      // We have unicode font, but from the file.        \n      var result = [];\n      // Split the text by words if word spacing is not default.\n      if (wordSpace) {\n        var words = layouted.split('');\n        var count = words.length;\n        for (var i = 0; i < count; i++) {\n          words[i] = this.addChars(font, words[i]);\n        }\n        result = words;\n      } else {\n        result = [];\n        result[0] = this.addChars(font, layouted);\n      }\n      return result;\n    }\n  };\n  /// <summary>\n  /// Add information about used glyphs to the font.\n  /// </summary>\n  /// <param name=\"font\">Font used for text rendering.</param>\n  /// <param name=\"glyphs\">Array of used glyphs.</param>\n  /// <returns>String in the form to be written to the file.</returns>\n  RtlRenderer.prototype.addChars = function (font, glyphs) {\n    var line = glyphs;\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n    var text = line;\n    var internalFont = font.fontInternal;\n    var ttfReader = internalFont.ttfReader;\n    font.setSymbols(text);\n    // Reconvert string according to unicode standard.\n    text = ttfReader.convertString(text);\n    var bytes = PdfString.toUnicodeArray(text, false);\n    text = PdfString.byteToString(bytes);\n    return text;\n    // else {\n    //     if (font == null) {\n    //         throw new Error('ArgumentNullException : font');\n    //     }\n    //     if (glyphs == null) {\n    //         throw new Error('ArgumentNullException : glyphs');\n    //     }\n    //     // Mark the chars as used.\n    //     let text : string = '';\n    //     font.setSymbols(glyphs);\n    //     // Create string from the glyphs.\n    //     \n    //     let chars : string[] = [];\n    //     for (let i : number = 0; i < glyphs.length; i++) {\n    //         chars[i] = glyphs[i].toString();\n    //     }\n    //     for (let j : number = 0 ; j < chars.length; j++) {\n    //         text = text + chars[j];\n    //     }\n    //     let bytes : number[] = PdfString.toUnicodeArray(text, false);\n    //     text = PdfString.byteToString(bytes);\n    //     return text;\n    // }\n  };\n  /// <summary>\n  /// Layouts a string and splits it by the words by using custom lay outing.\n  /// </summary>\n  /// <param name=\"line\">Text line.</param>\n  /// <param name=\"font\">Font object.</param>\n  /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n  /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n  /// <returns>Array of words if converted, null otherwise.</returns>\n  /* tslint:disable-next-line:max-line-length */\n  RtlRenderer.prototype.customSplitLayout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n    var reversedLine = this.customLayout(line, rtl, format);\n    var words = reversedLine.split('');\n    return words;\n  };\n  return RtlRenderer;\n}();\nexport { RtlRenderer };","map":{"version":3,"names":["PdfString","ArabicShapeRenderer","PdfTextDirection","Bidi","RtlRenderer","openBracket","closeBracket","prototype","layout","line","font","rtl","wordSpace","format","Error","result","Unicode","customLayout","splitLayout","words","system","customSplitLayout","getGlyphIndex","glyphs","custom","success","fail","length","renderer","text","shape","internalFont","fontInternal","ttfReader","Uint16Array","i","k","len","ch","glyphInfo","getGlyph","index","textDirection","None","bidi","getLogicalToVisualString","layouted","txt","split","count","addChars","setSymbols","convertString","bytes","toUnicodeArray","byteToString","reversedLine"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl-renderer.js"],"sourcesContent":["import { PdfString } from './../../primitives/pdf-string';\r\nimport { ArabicShapeRenderer } from './rtl/rtl-text-shape';\r\nimport { PdfTextDirection } from './../enum';\r\nimport { Bidi } from './rtl/rtl-bidirectional';\r\n/**\r\n * `Metrics` of the font.\r\n * @private\r\n */\r\nvar RtlRenderer = /** @class */ (function () {\r\n    function RtlRenderer() {\r\n        //region Constants\r\n        /// Open bracket symbol.\r\n        /// </summary>\r\n        this.openBracket = '(';\r\n        /// <summary>\r\n        /// Close bracket symbol.\r\n        /// </summary>\r\n        this.closeBracket = ')';\r\n        //#endregion\r\n    }\r\n    //#region Constructors\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"RtlRenderer\"/> class.\r\n    /// </summary>\r\n    // public constructor() {\r\n    // }\r\n    //#region Public Methods\r\n    /// <summary>\r\n    /// Layouts text. Changes blocks position in the RTL text.\r\n    /// Ligates the text if needed.\r\n    /// </summary>\r\n    /// <param name=\"line\">Line of the text.</param>\r\n    /// <param name=\"font\">Font to be used for string printing.</param>\r\n    /// <param name=\"rtl\">Font alignment.</param>\r\n    /// <param name=\"wordSpace\">Indicates whether Word Spacing used or not.</param>\r\n    /// <returns>Layout string.</returns>\r\n    RtlRenderer.prototype.layout = function (line, font, rtl, wordSpace, format) {\r\n        if (line == null) {\r\n            throw new Error('ArgumentNullException : line');\r\n        }\r\n        if (font == null) {\r\n            throw new Error('ArgumentNullException : font');\r\n        }\r\n        var result = [];\r\n        if (font.Unicode) {\r\n            result = this.customLayout(line, rtl, format, font, wordSpace);\r\n        }\r\n        else {\r\n            result = [];\r\n            result[0] = line;\r\n        }\r\n        return result;\r\n    };\r\n    /// <summary>\r\n    /// Layouts a string and splits it by the words and using correct lay outing.\r\n    /// </summary>\r\n    /// <param name=\"line\">Text line.</param>\r\n    /// <param name=\"font\">Font object.</param>\r\n    /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\r\n    /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\r\n    /// <returns>Array of words if converted, null otherwise.</returns>\r\n    RtlRenderer.prototype.splitLayout = function (line, font, rtl, wordSpace, format) {\r\n        if (line == null) {\r\n            throw new Error('ArgumentNullException : line');\r\n        }\r\n        if (font == null) {\r\n            throw new Error('ArgumentNullException : font');\r\n        }\r\n        var words = [];\r\n        var system = false;\r\n        if (!system || words == null) {\r\n            words = this.customSplitLayout(line, font, rtl, wordSpace, format);\r\n        }\r\n        return words;\r\n    };\r\n    //#endregion\r\n    //#region Implementation\r\n    // private isEnglish( word : string) : boolean\r\n    // {\r\n    //     let c : string = (word.length > 0) ? word[0] : '';\r\n    //     return (c >= '0' && c < 'Ã¿');\r\n    // }\r\n    // private keepOrder( words : string, startIndex : number, count: number, result : string[], resultIndex : number) : void\r\n    // {\r\n    //     for (let i : number = 0, ri = resultIndex - count + 1; i < count; ++i, ++ri) {\r\n    //         result[ri] = words[i + startIndex];\r\n    //     }\r\n    // }\r\n    /// <summary>\r\n    /// Uses system API to layout the text.\r\n    /// </summary>\r\n    /// <param name=\"line\">Line of the text to be layouted.</param>\r\n    /// <param name=\"font\">Font which is used for text printing.</param>\r\n    /// <param name=\"rtl\">Indicates whether we use RTL or RTL lay outing of the text container.</param>\r\n    /// <returns>Layout string.</returns>\r\n    /* tslint:disable-next-line:max-line-length */\r\n    RtlRenderer.prototype.getGlyphIndex = function (line, font, rtl, /*out*/ glyphs, custom) {\r\n        var success = true;\r\n        var fail = false;\r\n        if (line == null) {\r\n            throw new Error('ArgumentNullException : line');\r\n        }\r\n        if (font == null) {\r\n            throw new Error('ArgumentNullException : font');\r\n        }\r\n        glyphs = null;\r\n        if (line.length === 0) {\r\n            return { success: fail, glyphs: glyphs };\r\n        }\r\n        var renderer = new ArabicShapeRenderer();\r\n        var text = renderer.shape(line, 0);\r\n        var internalFont = font.fontInternal;\r\n        var ttfReader = internalFont.ttfReader;\r\n        glyphs = new Uint16Array(text.length);\r\n        var i = 0;\r\n        for (var k = 0, len = text.length; k < len; k++) {\r\n            var ch = text[k];\r\n            var glyphInfo = ttfReader.getGlyph(ch);\r\n            if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\r\n                glyphs[i++] = (glyphInfo).index;\r\n            }\r\n        }\r\n        return { success: success, glyphs: glyphs };\r\n    };\r\n    /* tslint:disable-next-line:max-line-length */\r\n    RtlRenderer.prototype.customLayout = function (line, rtl, format, font, wordSpace) {\r\n        if (wordSpace === null || typeof wordSpace === 'undefined') {\r\n            if (line == null) {\r\n                throw new Error('ArgumentNullException : line');\r\n            }\r\n            var result = null;\r\n            //bidirectional order.\r\n            if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\r\n                var bidi = new Bidi();\r\n                result = bidi.getLogicalToVisualString(line, rtl);\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (line == null) {\r\n                throw new Error('ArgumentNullException : line');\r\n            }\r\n            if (font == null) {\r\n                throw new Error('ArgumentNullException : font');\r\n            }\r\n            var layouted = null;\r\n            if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\r\n                var renderer = new ArabicShapeRenderer();\r\n                var txt = renderer.shape(line, 0);\r\n                layouted = this.customLayout(txt, rtl, format);\r\n            }\r\n            // else {\r\n            //     layouted = this.customLayout(line, rtl, format);\r\n            // }\r\n            // We have unicode font, but from the file.        \r\n            var result = [];\r\n            // Split the text by words if word spacing is not default.\r\n            if (wordSpace) {\r\n                var words = layouted.split('');\r\n                var count = words.length;\r\n                for (var i = 0; i < count; i++) {\r\n                    words[i] = this.addChars(font, words[i]);\r\n                }\r\n                result = words;\r\n            }\r\n            else {\r\n                result = [];\r\n                result[0] = this.addChars(font, layouted);\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    /// <summary>\r\n    /// Add information about used glyphs to the font.\r\n    /// </summary>\r\n    /// <param name=\"font\">Font used for text rendering.</param>\r\n    /// <param name=\"glyphs\">Array of used glyphs.</param>\r\n    /// <returns>String in the form to be written to the file.</returns>\r\n    RtlRenderer.prototype.addChars = function (font, glyphs) {\r\n        var line = glyphs;\r\n        if (font == null) {\r\n            throw new Error('ArgumentNullException : font');\r\n        }\r\n        if (line == null) {\r\n            throw new Error('ArgumentNullException : line');\r\n        }\r\n        var text = line;\r\n        var internalFont = font.fontInternal;\r\n        var ttfReader = internalFont.ttfReader;\r\n        font.setSymbols(text);\r\n        // Reconvert string according to unicode standard.\r\n        text = ttfReader.convertString(text);\r\n        var bytes = PdfString.toUnicodeArray(text, false);\r\n        text = PdfString.byteToString(bytes);\r\n        return text;\r\n        // else {\r\n        //     if (font == null) {\r\n        //         throw new Error('ArgumentNullException : font');\r\n        //     }\r\n        //     if (glyphs == null) {\r\n        //         throw new Error('ArgumentNullException : glyphs');\r\n        //     }\r\n        //     // Mark the chars as used.\r\n        //     let text : string = '';\r\n        //     font.setSymbols(glyphs);\r\n        //     // Create string from the glyphs.\r\n        //     \r\n        //     let chars : string[] = [];\r\n        //     for (let i : number = 0; i < glyphs.length; i++) {\r\n        //         chars[i] = glyphs[i].toString();\r\n        //     }\r\n        //     for (let j : number = 0 ; j < chars.length; j++) {\r\n        //         text = text + chars[j];\r\n        //     }\r\n        //     let bytes : number[] = PdfString.toUnicodeArray(text, false);\r\n        //     text = PdfString.byteToString(bytes);\r\n        //     return text;\r\n        // }\r\n    };\r\n    /// <summary>\r\n    /// Layouts a string and splits it by the words by using custom lay outing.\r\n    /// </summary>\r\n    /// <param name=\"line\">Text line.</param>\r\n    /// <param name=\"font\">Font object.</param>\r\n    /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\r\n    /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\r\n    /// <returns>Array of words if converted, null otherwise.</returns>\r\n    /* tslint:disable-next-line:max-line-length */\r\n    RtlRenderer.prototype.customSplitLayout = function (line, font, rtl, wordSpace, format) {\r\n        if (line == null) {\r\n            throw new Error('ArgumentNullException : line');\r\n        }\r\n        if (font == null) {\r\n            throw new Error('ArgumentNullException : font');\r\n        }\r\n        var reversedLine = this.customLayout(line, rtl, format);\r\n        var words = reversedLine.split('');\r\n        return words;\r\n    };\r\n    return RtlRenderer;\r\n}());\r\nexport { RtlRenderer };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}