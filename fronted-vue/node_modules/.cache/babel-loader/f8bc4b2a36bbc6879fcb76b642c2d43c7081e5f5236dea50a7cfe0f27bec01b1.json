{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { PdfGridCell, PdfGridCellCollection } from './pdf-grid-cell';\nimport { PdfGridRowStyle } from './styles/style';\n/**\r\n * `PdfGridRow` class provides customization of the settings for the particular row.\r\n */\nvar PdfGridRow = /** @class */function () {\n  //Constructor\n  /**\r\n   * Initializes a new instance of the `PdfGridRow` class with the parent grid.\r\n   * @private\r\n   */\n  function PdfGridRow(grid) {\n    /**\r\n     * Stores the index of the overflowing row.\r\n     * @private\r\n     */\n    this.gridRowOverflowIndex = 0;\n    /**\r\n     * The `height` of the row.\r\n     * @private\r\n     */\n    this.rowHeight = 0;\n    /**\r\n     * The `width` of the row.\r\n     * @private\r\n     */\n    this.rowWidth = 0;\n    /**\r\n     * The `isFinish` of the row.\r\n     * @private\r\n     */\n    this.isrowFinish = false;\n    /**\r\n     * Check whether the Row span row height `is set explicitly`.\r\n     * @default false\r\n     * @public\r\n     */\n    this.isRowSpanRowHeightSet = false;\n    /**\r\n     * The `page count` of the row.\r\n     * @public\r\n     */\n    this.noOfPageCount = 0;\n    /**\r\n     * Check whether the row height `is set explicitly`.\r\n     * @default false\r\n     * @private\r\n     */\n    this.isRowHeightSet = false;\n    this.isPageBreakRowSpanApplied = false;\n    /**\r\n     * Check weather the row merge `is completed` or not.\r\n     * @default true\r\n     * @private\r\n     */\n    this.isRowMergeComplete = true;\n    this.repeatFlag = false;\n    this.rowFontSplit = false;\n    this.isHeaderRow = false;\n    this.pdfGrid = grid;\n  }\n  Object.defineProperty(PdfGridRow.prototype, \"rowSpanExists\", {\n    //Properties\n    /**\r\n     * Gets or sets a value indicating [`row span exists`].\r\n     * @private\r\n     */\n    get: function () {\n      return this.bRowSpanExists;\n    },\n    set: function (value) {\n      this.bRowSpanExists = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"cells\", {\n    /**\r\n     * Gets the `cells` from the selected row.[Read-Only].\r\n     * @private\r\n     */\n    get: function () {\n      if (this.gridCells == null) {\n        this.gridCells = new PdfGridCellCollection(this);\n      }\n      return this.gridCells;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"grid\", {\n    /**\r\n     * Gets or sets the parent `grid`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfGrid;\n    },\n    set: function (value) {\n      this.pdfGrid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"style\", {\n    /**\r\n     * Gets or sets the row `style`.\r\n     * @private\r\n     */\n    get: function () {\n      if (typeof this.rowStyle === 'undefined') {\n        this.rowStyle = new PdfGridRowStyle();\n        this.rowStyle.setParent(this);\n      }\n      return this.rowStyle;\n    },\n    set: function (value) {\n      this.rowStyle = value;\n      for (var i = 0; i < this.cells.count; i++) {\n        this.cells.getCell(i).style.borders = value.border;\n        if (typeof value.font !== 'undefined') {\n          this.cells.getCell(i).style.font = value.font;\n        }\n        if (typeof value.backgroundBrush !== 'undefined') {\n          this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;\n        }\n        if (typeof value.backgroundImage !== 'undefined') {\n          this.cells.getCell(i).style.backgroundImage = value.backgroundImage;\n        }\n        if (typeof value.textBrush !== 'undefined') {\n          this.cells.getCell(i).style.textBrush = value.textBrush;\n        }\n        if (typeof value.textPen !== 'undefined') {\n          this.cells.getCell(i).style.textPen = value.textPen;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowBreakHeight\", {\n    /**\r\n     * `Height` of the row yet to be drawn after split.\r\n     * @private\r\n     */\n    get: function () {\n      if (typeof this.gridRowBreakHeight === 'undefined') {\n        this.gridRowBreakHeight = 0;\n      }\n      return this.gridRowBreakHeight;\n    },\n    set: function (value) {\n      this.gridRowBreakHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowOverflowIndex\", {\n    /**\r\n     * `over flow index` of the row.\r\n     * @private\r\n     */\n    get: function () {\n      return this.gridRowOverflowIndex;\n    },\n    set: function (value) {\n      this.gridRowOverflowIndex = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"height\", {\n    /**\r\n     * Gets or sets the `height` of the row.\r\n     * @private\r\n     */\n    get: function () {\n      if (!this.isRowHeightSet) {\n        this.rowHeight = this.measureHeight();\n      }\n      return this.rowHeight;\n    },\n    set: function (value) {\n      this.rowHeight = value;\n      this.isRowHeightSet = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"width\", {\n    /**\r\n     * Gets or sets the `width` of the row.\r\n     * @private\r\n     */\n    get: function () {\n      if (this.rowWidth === 0 || typeof this.rowWidth === 'undefined') {\n        this.rowWidth = this.measureWidth();\n      }\n      return this.rowWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"NestedGridLayoutResult\", {\n    /**\r\n     * Gets or sets the row `Nested grid Layout Result`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.gridResult;\n    },\n    set: function (value) {\n      this.gridResult = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"columnSpanExists\", {\n    /**\r\n     * Gets or sets a value indicating [`column span exists`].\r\n     * @private\r\n     */\n    get: function () {\n      return this.bColumnSpanExists;\n    },\n    set: function (value) {\n      this.bColumnSpanExists = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowMergeComplete\", {\n    /**\r\n     * Check whether the Row `has row span or row merge continue`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.isRowMergeComplete;\n    },\n    set: function (value) {\n      this.isRowMergeComplete = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowIndex\", {\n    /**\r\n     * Returns `index` of the row.\r\n     * @private\r\n     */\n    get: function () {\n      return this.grid.rows.rowCollection.indexOf(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Implementation\n  /**\r\n   * `Calculates the height`.\r\n   * @private\r\n   */\n  PdfGridRow.prototype.measureHeight = function () {\n    var rowSpanRemainingHeight = 0;\n    var rowHeight;\n    var maxHeight = 0;\n    if (this.cells.getCell(0).rowSpan > 1) {\n      rowHeight = 0;\n    } else {\n      rowHeight = this.cells.getCell(0).height;\n    }\n    for (var i = 0; i < this.cells.count; i++) {\n      var cell = this.cells.getCell(i);\n      //get the maximum rowspan remaining height.\n      if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {\n        rowSpanRemainingHeight = cell.rowSpanRemainingHeight;\n      }\n      //skip the cell if row spanned.\n      // if (cell.isRowMergeContinue) {\n      //     continue;\n      // }\n      // if (!cell.isRowMergeContinue) {\n      //     this.rowMergeComplete = false;\n      // }\n      this.rowMergeComplete = false;\n      if (cell.rowSpan > 1) {\n        var cellIn = i;\n        var rowin = this.isHeaderRow ? this.grid.headers.indexOf(this) : this.grid.rows.rowCollection.indexOf(this);\n        for (var j = 0; j < cell.rowSpan; j++) {\n          if (j + 1 < cell.rowSpan) {\n            (this.isHeaderRow ? this.grid.headers.getHeader(rowin + j + 1) : this.grid.rows.getRow(rowin + j + 1)).cells.getCell(cellIn).hasRowSpan = true;\n          }\n        }\n        if (maxHeight < cell.height) {\n          maxHeight = cell.height;\n        }\n        continue;\n      }\n      rowHeight = Math.max(rowHeight, cell.height);\n    }\n    if (maxHeight > rowHeight) {\n      rowHeight = maxHeight;\n    }\n    if (rowHeight === 0) {\n      rowHeight = maxHeight;\n    } else if (rowSpanRemainingHeight > 0) {\n      rowHeight += rowSpanRemainingHeight;\n    }\n    return rowHeight;\n  };\n  PdfGridRow.prototype.measureWidth = function () {\n    var rowWid = 0;\n    for (var i = 0; i < this.grid.columns.count; i++) {\n      var column = this.grid.columns.getColumn(i);\n      rowWid += column.width;\n    }\n    return rowWid;\n  };\n  return PdfGridRow;\n}();\nexport { PdfGridRow };\n/**\r\n * `PdfGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfGridRow' objects.\r\n * @private\r\n */\nvar PdfGridRowCollection = /** @class */function () {\n  // Constructor\n  /**\r\n   * Initializes a new instance of the `PdfGridRowCollection` class with the parent grid.\r\n   * @private\r\n   */\n  function PdfGridRowCollection(grid) {\n    this.rows = [];\n    this.grid = grid;\n  }\n  Object.defineProperty(PdfGridRowCollection.prototype, \"count\", {\n    //Properties\n    /**\r\n     * Gets the number of header in the `PdfGrid`.[Read-Only].\r\n     * @private\r\n     */\n    get: function () {\n      return this.rows.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRowCollection.prototype, \"rowCollection\", {\n    //Implementation\n    /**\r\n     * Return the row collection of the `grid`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.rows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfGridRowCollection.prototype.addRow = function (arg) {\n    if (typeof arg === 'undefined') {\n      var temprow = new PdfGridRow(this.grid);\n      this.addRow(temprow);\n      return temprow;\n    } else {\n      arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);\n      arg.style.setFont(this.grid.style.font);\n      arg.style.setTextBrush(this.grid.style.textBrush);\n      arg.style.setTextPen(this.grid.style.textPen);\n      if (arg.cells.count === 0) {\n        for (var i = 0; i < this.grid.columns.count; i++) {\n          arg.cells.add(new PdfGridCell());\n        }\n      }\n      this.rows.push(arg);\n    }\n  };\n  /**\r\n   * Return the row by index.\r\n   * @private\r\n   */\n  PdfGridRowCollection.prototype.getRow = function (index) {\n    return this.rows[index];\n  };\n  return PdfGridRowCollection;\n}();\nexport { PdfGridRowCollection };\n/**\r\n * `PdfGridHeaderCollection` class provides customization of the settings for the header.\r\n * @private\r\n */\nvar PdfGridHeaderCollection = /** @class */function () {\n  //constructor\n  /**\r\n   * Initializes a new instance of the `PdfGridHeaderCollection` class with the parent grid.\r\n   * @private\r\n   */\n  function PdfGridHeaderCollection(grid) {\n    /**\r\n     * The array to store the `rows` of the grid header.\r\n     * @private\r\n     */\n    this.rows = [];\n    this.grid = grid;\n    this.rows = [];\n  }\n  //Properties\n  /**\r\n   * Gets a 'PdfGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\r\n   * @private\r\n   */\n  PdfGridHeaderCollection.prototype.getHeader = function (index) {\n    // if (index < 0 || index >= Count) {\n    //     throw new IndexOutOfRangeException();\n    // }\n    return this.rows[index];\n  };\n  Object.defineProperty(PdfGridHeaderCollection.prototype, \"count\", {\n    /**\r\n     * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\r\n     * @private\r\n     */\n    get: function () {\n      return this.rows.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PdfGridHeaderCollection.prototype.add = function (arg) {\n    if (typeof arg === 'number') {\n      var row = void 0;\n      for (var i = 0; i < arg; i++) {\n        row = new PdfGridRow(this.grid);\n        row.isHeaderRow = true;\n        for (var j = 0; j < this.grid.columns.count; j++) {\n          row.cells.add(new PdfGridCell());\n        }\n        this.rows.push(row);\n      }\n      return this.rows;\n    } else {\n      this.rows.push(arg);\n    }\n  };\n  PdfGridHeaderCollection.prototype.indexOf = function (row) {\n    return this.rows.indexOf(row);\n  };\n  return PdfGridHeaderCollection;\n}();\nexport { PdfGridHeaderCollection };","map":{"version":3,"names":["PdfGridCell","PdfGridCellCollection","PdfGridRowStyle","PdfGridRow","grid","gridRowOverflowIndex","rowHeight","rowWidth","isrowFinish","isRowSpanRowHeightSet","noOfPageCount","isRowHeightSet","isPageBreakRowSpanApplied","isRowMergeComplete","repeatFlag","rowFontSplit","isHeaderRow","pdfGrid","Object","defineProperty","prototype","get","bRowSpanExists","set","value","enumerable","configurable","gridCells","rowStyle","setParent","i","cells","count","getCell","style","borders","border","font","backgroundBrush","backgroundImage","textBrush","textPen","gridRowBreakHeight","measureHeight","measureWidth","gridResult","bColumnSpanExists","rows","rowCollection","indexOf","rowSpanRemainingHeight","maxHeight","rowSpan","height","cell","rowMergeComplete","cellIn","rowin","headers","j","getHeader","getRow","hasRowSpan","Math","max","rowWid","columns","column","getColumn","width","PdfGridRowCollection","length","addRow","arg","temprow","setBackgroundBrush","setFont","setTextBrush","setTextPen","add","push","index","PdfGridHeaderCollection","row"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-row.js"],"sourcesContent":["import { PdfGridCell, PdfGridCellCollection } from './pdf-grid-cell';\r\nimport { PdfGridRowStyle } from './styles/style';\r\n/**\r\n * `PdfGridRow` class provides customization of the settings for the particular row.\r\n */\r\nvar PdfGridRow = /** @class */ (function () {\r\n    //Constructor\r\n    /**\r\n     * Initializes a new instance of the `PdfGridRow` class with the parent grid.\r\n     * @private\r\n     */\r\n    function PdfGridRow(grid) {\r\n        /**\r\n         * Stores the index of the overflowing row.\r\n         * @private\r\n         */\r\n        this.gridRowOverflowIndex = 0;\r\n        /**\r\n         * The `height` of the row.\r\n         * @private\r\n         */\r\n        this.rowHeight = 0;\r\n        /**\r\n         * The `width` of the row.\r\n         * @private\r\n         */\r\n        this.rowWidth = 0;\r\n        /**\r\n         * The `isFinish` of the row.\r\n         * @private\r\n         */\r\n        this.isrowFinish = false;\r\n        /**\r\n         * Check whether the Row span row height `is set explicitly`.\r\n         * @default false\r\n         * @public\r\n         */\r\n        this.isRowSpanRowHeightSet = false;\r\n        /**\r\n         * The `page count` of the row.\r\n         * @public\r\n         */\r\n        this.noOfPageCount = 0;\r\n        /**\r\n         * Check whether the row height `is set explicitly`.\r\n         * @default false\r\n         * @private\r\n         */\r\n        this.isRowHeightSet = false;\r\n        this.isPageBreakRowSpanApplied = false;\r\n        /**\r\n         * Check weather the row merge `is completed` or not.\r\n         * @default true\r\n         * @private\r\n         */\r\n        this.isRowMergeComplete = true;\r\n        this.repeatFlag = false;\r\n        this.rowFontSplit = false;\r\n        this.isHeaderRow = false;\r\n        this.pdfGrid = grid;\r\n    }\r\n    Object.defineProperty(PdfGridRow.prototype, \"rowSpanExists\", {\r\n        //Properties\r\n        /**\r\n         * Gets or sets a value indicating [`row span exists`].\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.bRowSpanExists;\r\n        },\r\n        set: function (value) {\r\n            this.bRowSpanExists = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"cells\", {\r\n        /**\r\n         * Gets the `cells` from the selected row.[Read-Only].\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (this.gridCells == null) {\r\n                this.gridCells = new PdfGridCellCollection(this);\r\n            }\r\n            return this.gridCells;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"grid\", {\r\n        /**\r\n         * Gets or sets the parent `grid`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfGrid;\r\n        },\r\n        set: function (value) {\r\n            this.pdfGrid = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"style\", {\r\n        /**\r\n         * Gets or sets the row `style`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (typeof this.rowStyle === 'undefined') {\r\n                this.rowStyle = new PdfGridRowStyle();\r\n                this.rowStyle.setParent(this);\r\n            }\r\n            return this.rowStyle;\r\n        },\r\n        set: function (value) {\r\n            this.rowStyle = value;\r\n            for (var i = 0; i < this.cells.count; i++) {\r\n                this.cells.getCell(i).style.borders = value.border;\r\n                if (typeof value.font !== 'undefined') {\r\n                    this.cells.getCell(i).style.font = value.font;\r\n                }\r\n                if (typeof value.backgroundBrush !== 'undefined') {\r\n                    this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;\r\n                }\r\n                if (typeof value.backgroundImage !== 'undefined') {\r\n                    this.cells.getCell(i).style.backgroundImage = value.backgroundImage;\r\n                }\r\n                if (typeof value.textBrush !== 'undefined') {\r\n                    this.cells.getCell(i).style.textBrush = value.textBrush;\r\n                }\r\n                if (typeof value.textPen !== 'undefined') {\r\n                    this.cells.getCell(i).style.textPen = value.textPen;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"rowBreakHeight\", {\r\n        /**\r\n         * `Height` of the row yet to be drawn after split.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (typeof this.gridRowBreakHeight === 'undefined') {\r\n                this.gridRowBreakHeight = 0;\r\n            }\r\n            return this.gridRowBreakHeight;\r\n        },\r\n        set: function (value) {\r\n            this.gridRowBreakHeight = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"rowOverflowIndex\", {\r\n        /**\r\n         * `over flow index` of the row.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.gridRowOverflowIndex;\r\n        },\r\n        set: function (value) {\r\n            this.gridRowOverflowIndex = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"height\", {\r\n        /**\r\n         * Gets or sets the `height` of the row.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (!this.isRowHeightSet) {\r\n                this.rowHeight = this.measureHeight();\r\n            }\r\n            return this.rowHeight;\r\n        },\r\n        set: function (value) {\r\n            this.rowHeight = value;\r\n            this.isRowHeightSet = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"width\", {\r\n        /**\r\n         * Gets or sets the `width` of the row.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (this.rowWidth === 0 || typeof this.rowWidth === 'undefined') {\r\n                this.rowWidth = this.measureWidth();\r\n            }\r\n            return this.rowWidth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"NestedGridLayoutResult\", {\r\n        /**\r\n         * Gets or sets the row `Nested grid Layout Result`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.gridResult;\r\n        },\r\n        set: function (value) {\r\n            this.gridResult = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"columnSpanExists\", {\r\n        /**\r\n         * Gets or sets a value indicating [`column span exists`].\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.bColumnSpanExists;\r\n        },\r\n        set: function (value) {\r\n            this.bColumnSpanExists = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"rowMergeComplete\", {\r\n        /**\r\n         * Check whether the Row `has row span or row merge continue`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.isRowMergeComplete;\r\n        },\r\n        set: function (value) {\r\n            this.isRowMergeComplete = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRow.prototype, \"rowIndex\", {\r\n        /**\r\n         * Returns `index` of the row.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.grid.rows.rowCollection.indexOf(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Implementation\r\n    /**\r\n     * `Calculates the height`.\r\n     * @private\r\n     */\r\n    PdfGridRow.prototype.measureHeight = function () {\r\n        var rowSpanRemainingHeight = 0;\r\n        var rowHeight;\r\n        var maxHeight = 0;\r\n        if (this.cells.getCell(0).rowSpan > 1) {\r\n            rowHeight = 0;\r\n        }\r\n        else {\r\n            rowHeight = this.cells.getCell(0).height;\r\n        }\r\n        for (var i = 0; i < this.cells.count; i++) {\r\n            var cell = this.cells.getCell(i);\r\n            //get the maximum rowspan remaining height.\r\n            if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {\r\n                rowSpanRemainingHeight = cell.rowSpanRemainingHeight;\r\n            }\r\n            //skip the cell if row spanned.\r\n            // if (cell.isRowMergeContinue) {\r\n            //     continue;\r\n            // }\r\n            // if (!cell.isRowMergeContinue) {\r\n            //     this.rowMergeComplete = false;\r\n            // }\r\n            this.rowMergeComplete = false;\r\n            if (cell.rowSpan > 1) {\r\n                var cellIn = i;\r\n                var rowin = this.isHeaderRow ? this.grid.headers.indexOf(this) : this.grid.rows.rowCollection.indexOf(this);\r\n                for (var j = 0; j < cell.rowSpan; j++) {\r\n                    if ((j + 1) < cell.rowSpan) {\r\n                        (this.isHeaderRow ? this.grid.headers.getHeader(rowin + j + 1) : this.grid.rows.getRow(rowin + j + 1)).cells.getCell(cellIn).hasRowSpan = true;\r\n                    }\r\n                }\r\n                if (maxHeight < cell.height) {\r\n                    maxHeight = cell.height;\r\n                }\r\n                continue;\r\n            }\r\n            rowHeight = Math.max(rowHeight, cell.height);\r\n        }\r\n        if (maxHeight > rowHeight) {\r\n            rowHeight = maxHeight;\r\n        }\r\n        if (rowHeight === 0) {\r\n            rowHeight = maxHeight;\r\n        }\r\n        else if (rowSpanRemainingHeight > 0) {\r\n            rowHeight += rowSpanRemainingHeight;\r\n        }\r\n        return rowHeight;\r\n    };\r\n    PdfGridRow.prototype.measureWidth = function () {\r\n        var rowWid = 0;\r\n        for (var i = 0; i < this.grid.columns.count; i++) {\r\n            var column = this.grid.columns.getColumn(i);\r\n            rowWid += column.width;\r\n        }\r\n        return rowWid;\r\n    };\r\n    return PdfGridRow;\r\n}());\r\nexport { PdfGridRow };\r\n/**\r\n * `PdfGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfGridRow' objects.\r\n * @private\r\n */\r\nvar PdfGridRowCollection = /** @class */ (function () {\r\n    // Constructor\r\n    /**\r\n     * Initializes a new instance of the `PdfGridRowCollection` class with the parent grid.\r\n     * @private\r\n     */\r\n    function PdfGridRowCollection(grid) {\r\n        this.rows = [];\r\n        this.grid = grid;\r\n    }\r\n    Object.defineProperty(PdfGridRowCollection.prototype, \"count\", {\r\n        //Properties\r\n        /**\r\n         * Gets the number of header in the `PdfGrid`.[Read-Only].\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.rows.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridRowCollection.prototype, \"rowCollection\", {\r\n        //Implementation\r\n        /**\r\n         * Return the row collection of the `grid`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.rows;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PdfGridRowCollection.prototype.addRow = function (arg) {\r\n        if (typeof arg === 'undefined') {\r\n            var temprow = new PdfGridRow(this.grid);\r\n            this.addRow(temprow);\r\n            return temprow;\r\n        }\r\n        else {\r\n            arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);\r\n            arg.style.setFont(this.grid.style.font);\r\n            arg.style.setTextBrush(this.grid.style.textBrush);\r\n            arg.style.setTextPen(this.grid.style.textPen);\r\n            if (arg.cells.count === 0) {\r\n                for (var i = 0; i < this.grid.columns.count; i++) {\r\n                    arg.cells.add(new PdfGridCell());\r\n                }\r\n            }\r\n            this.rows.push(arg);\r\n        }\r\n    };\r\n    /**\r\n     * Return the row by index.\r\n     * @private\r\n     */\r\n    PdfGridRowCollection.prototype.getRow = function (index) {\r\n        return this.rows[index];\r\n    };\r\n    return PdfGridRowCollection;\r\n}());\r\nexport { PdfGridRowCollection };\r\n/**\r\n * `PdfGridHeaderCollection` class provides customization of the settings for the header.\r\n * @private\r\n */\r\nvar PdfGridHeaderCollection = /** @class */ (function () {\r\n    //constructor\r\n    /**\r\n     * Initializes a new instance of the `PdfGridHeaderCollection` class with the parent grid.\r\n     * @private\r\n     */\r\n    function PdfGridHeaderCollection(grid) {\r\n        /**\r\n         * The array to store the `rows` of the grid header.\r\n         * @private\r\n         */\r\n        this.rows = [];\r\n        this.grid = grid;\r\n        this.rows = [];\r\n    }\r\n    //Properties\r\n    /**\r\n     * Gets a 'PdfGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\r\n     * @private\r\n     */\r\n    PdfGridHeaderCollection.prototype.getHeader = function (index) {\r\n        // if (index < 0 || index >= Count) {\r\n        //     throw new IndexOutOfRangeException();\r\n        // }\r\n        return (this.rows[index]);\r\n    };\r\n    Object.defineProperty(PdfGridHeaderCollection.prototype, \"count\", {\r\n        /**\r\n         * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.rows.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PdfGridHeaderCollection.prototype.add = function (arg) {\r\n        if (typeof arg === 'number') {\r\n            var row = void 0;\r\n            for (var i = 0; i < arg; i++) {\r\n                row = new PdfGridRow(this.grid);\r\n                row.isHeaderRow = true;\r\n                for (var j = 0; j < this.grid.columns.count; j++) {\r\n                    row.cells.add(new PdfGridCell());\r\n                }\r\n                this.rows.push(row);\r\n            }\r\n            return this.rows;\r\n        }\r\n        else {\r\n            this.rows.push(arg);\r\n        }\r\n    };\r\n    PdfGridHeaderCollection.prototype.indexOf = function (row) {\r\n        return this.rows.indexOf(row);\r\n    };\r\n    return PdfGridHeaderCollection;\r\n}());\r\nexport { PdfGridHeaderCollection };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}