{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty, Complex, Collection, getValue, animationMode } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { StackValues, RectOption, appendChildElement, appendClipElement, getElement } from '../../common/utils/helper';\nimport { firstToLowerCase, CircleOption, getColorByValue } from '../../common/utils/helper';\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { Border, Font, Margin, Animation, EmptyPointSettings, CornerRadius, Connector, DragSettings } from '../../common/model/base';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { Offset } from '../../common/model/base';\nimport { seriesRender } from '../../common/model/constants';\nimport { getVisiblePoints, setRange, findClipRect } from '../../common/utils/helper';\nimport { Browser } from '@syncfusion/ej2-base';\n/**\r\n * Configures the data label in the series.\r\n */\nvar DataLabelSettings = /** @class */function (_super) {\n  __extends(DataLabelSettings, _super);\n  function DataLabelSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], DataLabelSettings.prototype, \"visible\", void 0);\n  __decorate([Property(true)], DataLabelSettings.prototype, \"showZero\", void 0);\n  __decorate([Property(null)], DataLabelSettings.prototype, \"name\", void 0);\n  __decorate([Property('transparent')], DataLabelSettings.prototype, \"fill\", void 0);\n  __decorate([Property(null)], DataLabelSettings.prototype, \"format\", void 0);\n  __decorate([Property(1)], DataLabelSettings.prototype, \"opacity\", void 0);\n  __decorate([Property(0)], DataLabelSettings.prototype, \"angle\", void 0);\n  __decorate([Property(false)], DataLabelSettings.prototype, \"enableRotation\", void 0);\n  __decorate([Property('Auto')], DataLabelSettings.prototype, \"position\", void 0);\n  __decorate([Property(5)], DataLabelSettings.prototype, \"rx\", void 0);\n  __decorate([Property(5)], DataLabelSettings.prototype, \"ry\", void 0);\n  __decorate([Property('Center')], DataLabelSettings.prototype, \"alignment\", void 0);\n  __decorate([Complex({\n    width: null,\n    color: null\n  }, Border)], DataLabelSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    left: 5,\n    right: 5,\n    top: 5,\n    bottom: 5\n  }, Margin)], DataLabelSettings.prototype, \"margin\", void 0);\n  __decorate([Complex({\n    size: null,\n    color: null,\n    fontStyle: null,\n    fontWeight: null,\n    fontFamily: null\n  }, Font)], DataLabelSettings.prototype, \"font\", void 0);\n  __decorate([Property(null)], DataLabelSettings.prototype, \"template\", void 0);\n  __decorate([Property('Hide')], DataLabelSettings.prototype, \"labelIntersectAction\", void 0);\n  return DataLabelSettings;\n}(ChildProperty);\nexport { DataLabelSettings };\n/**\r\n *  Configures the marker in the series.\r\n */\nvar MarkerSettings = /** @class */function (_super) {\n  __extends(MarkerSettings, _super);\n  function MarkerSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], MarkerSettings.prototype, \"visible\", void 0);\n  __decorate([Property(null)], MarkerSettings.prototype, \"shape\", void 0);\n  __decorate([Property('')], MarkerSettings.prototype, \"imageUrl\", void 0);\n  __decorate([Property(5)], MarkerSettings.prototype, \"height\", void 0);\n  __decorate([Property(false)], MarkerSettings.prototype, \"isFilled\", void 0);\n  __decorate([Property(5)], MarkerSettings.prototype, \"width\", void 0);\n  __decorate([Complex({\n    width: 2,\n    color: null\n  }, Border)], MarkerSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    x: 0,\n    y: 0\n  }, Offset)], MarkerSettings.prototype, \"offset\", void 0);\n  __decorate([Property(null)], MarkerSettings.prototype, \"fill\", void 0);\n  __decorate([Property(true)], MarkerSettings.prototype, \"allowHighlight\", void 0);\n  __decorate([Property(1)], MarkerSettings.prototype, \"opacity\", void 0);\n  __decorate([Complex({}, DataLabelSettings)], MarkerSettings.prototype, \"dataLabel\", void 0);\n  return MarkerSettings;\n}(ChildProperty);\nexport { MarkerSettings };\n/**\r\n *  Configures the pareto series.\r\n */\nvar ParetoOptions = /** @class */function (_super) {\n  __extends(ParetoOptions, _super);\n  function ParetoOptions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], ParetoOptions.prototype, \"fill\", void 0);\n  __decorate([Property(1)], ParetoOptions.prototype, \"width\", void 0);\n  __decorate([Property('0')], ParetoOptions.prototype, \"dashArray\", void 0);\n  __decorate([Complex(null, MarkerSettings)], ParetoOptions.prototype, \"marker\", void 0);\n  __decorate([Property(true)], ParetoOptions.prototype, \"showAxis\", void 0);\n  return ParetoOptions;\n}(ChildProperty);\nexport { ParetoOptions };\n/**\r\n * Points model for the series.\r\n *\r\n * @public\r\n */\nvar Points = /** @class */function () {\n  function Points() {\n    /** point symbol location. */\n    this.symbolLocations = null;\n    /** point region. */\n    this.regions = null;\n    /** point percentage value. */\n    this.percentage = null;\n    /** point region data. */\n    this.regionData = null;\n    /** To know the point is selected. */\n    this.isSelect = false;\n    /** point marker. */\n    this.marker = {\n      visible: false\n    };\n    /**\r\n     * To identify point y value with in the range.\r\n     *\r\n     * @private\r\n     */\n    this.isPointInRange = true;\n    /** vertical error value for the point. */\n    this.verticalError = null;\n    /** vertical negative error value for the point. */\n    this.verticalNegativeError = null;\n    /** horizontal error value for the point. */\n    this.horizontalError = null;\n    /** horizontal negative error value for the point. */\n    this.horizontalNegativeError = null;\n    /** vertical positive error value for the point. */\n    this.verticalPositiveError = null;\n    /** horizontal positive error value for the point. */\n    this.horizontalPositiveError = null;\n  }\n  return Points;\n}();\nexport { Points };\n/**\r\n * Defines the behavior of the trendlines.\r\n */\nvar Trendline = /** @class */function (_super) {\n  __extends(Trendline, _super);\n  function Trendline() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    return _this;\n  }\n  /**\r\n   * Sets the data source for the specified series in the provided chart.\r\n   *\r\n   * @private\r\n   * @param {Series} series - The series for which the data source is set.\r\n   * @param {Chart} chart - The chart in which the data source is set.\r\n   * @returns {void}\r\n   */\n  Trendline.prototype.setDataSource = function (series, chart) {\n    if (series) {\n      this.points = series.points;\n    }\n    chart.trendLineModule.initDataSource(this);\n    chart.visibleSeriesCount++;\n  };\n  __decorate([Property('')], Trendline.prototype, \"name\", void 0);\n  __decorate([Property('')], Trendline.prototype, \"dashArray\", void 0);\n  __decorate([Property(true)], Trendline.prototype, \"visible\", void 0);\n  __decorate([Property('Linear')], Trendline.prototype, \"type\", void 0);\n  __decorate([Property(2)], Trendline.prototype, \"period\", void 0);\n  __decorate([Property(2)], Trendline.prototype, \"polynomialOrder\", void 0);\n  __decorate([Property(0)], Trendline.prototype, \"backwardForecast\", void 0);\n  __decorate([Property(0)], Trendline.prototype, \"forwardForecast\", void 0);\n  __decorate([Complex({}, Animation)], Trendline.prototype, \"animation\", void 0);\n  __decorate([Complex({}, MarkerSettings)], Trendline.prototype, \"marker\", void 0);\n  __decorate([Property(true)], Trendline.prototype, \"enableTooltip\", void 0);\n  __decorate([Property(null)], Trendline.prototype, \"intercept\", void 0);\n  __decorate([Property('')], Trendline.prototype, \"fill\", void 0);\n  __decorate([Property(1)], Trendline.prototype, \"width\", void 0);\n  __decorate([Property('SeriesType')], Trendline.prototype, \"legendShape\", void 0);\n  return Trendline;\n}(ChildProperty);\nexport { Trendline };\n/**\r\n * Configures Error bar in series.\r\n */\nvar ErrorBarCapSettings = /** @class */function (_super) {\n  __extends(ErrorBarCapSettings, _super);\n  function ErrorBarCapSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(1)], ErrorBarCapSettings.prototype, \"width\", void 0);\n  __decorate([Property(10)], ErrorBarCapSettings.prototype, \"length\", void 0);\n  __decorate([Property(null)], ErrorBarCapSettings.prototype, \"color\", void 0);\n  __decorate([Property(1)], ErrorBarCapSettings.prototype, \"opacity\", void 0);\n  return ErrorBarCapSettings;\n}(ChildProperty);\nexport { ErrorBarCapSettings };\nvar ChartSegment = /** @class */function (_super) {\n  __extends(ChartSegment, _super);\n  function ChartSegment() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], ChartSegment.prototype, \"value\", void 0);\n  __decorate([Property(null)], ChartSegment.prototype, \"color\", void 0);\n  __decorate([Property('0')], ChartSegment.prototype, \"dashArray\", void 0);\n  return ChartSegment;\n}(ChildProperty);\nexport { ChartSegment };\n/**\r\n * Configures error bar settings.\r\n *\r\n * @public\r\n */\nvar ErrorBarSettings = /** @class */function (_super) {\n  __extends(ErrorBarSettings, _super);\n  function ErrorBarSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], ErrorBarSettings.prototype, \"visible\", void 0);\n  __decorate([Property('Fixed')], ErrorBarSettings.prototype, \"type\", void 0);\n  __decorate([Property('Both')], ErrorBarSettings.prototype, \"direction\", void 0);\n  __decorate([Property('Vertical')], ErrorBarSettings.prototype, \"mode\", void 0);\n  __decorate([Property(null)], ErrorBarSettings.prototype, \"color\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"verticalError\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"width\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"horizontalError\", void 0);\n  __decorate([Property(3)], ErrorBarSettings.prototype, \"verticalPositiveError\", void 0);\n  __decorate([Property(3)], ErrorBarSettings.prototype, \"verticalNegativeError\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"horizontalPositiveError\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"horizontalNegativeError\", void 0);\n  __decorate([Complex(null, ErrorBarCapSettings)], ErrorBarSettings.prototype, \"errorBarCap\", void 0);\n  __decorate([Property('')], ErrorBarSettings.prototype, \"errorBarColorMapping\", void 0);\n  return ErrorBarSettings;\n}(ChildProperty);\nexport { ErrorBarSettings };\n/**\r\n * Defines the common behavior of both series and technical indicators.\r\n */\nvar SeriesBase = /** @class */function (_super) {\n  __extends(SeriesBase, _super);\n  function SeriesBase() {\n    /**\r\n     * The DataSource field that contains the x value.\r\n     * It is applicable for both series and technical indicators.\r\n     *\r\n     * @default ''\r\n     */\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.rangeColorPoints = [];\n    _this.isAdvancedColor = undefined;\n    /** @private */\n    _this.currentViewData = [];\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    /** @private */\n    _this.seriesType = 'XY';\n    _this.isRectTypeSeries = false;\n    _this.removedPointIndex = null;\n    /** @private */\n    _this.isLegendClicked = false;\n    return _this;\n  }\n  /**\r\n   * Process data for the series.\r\n   *\r\n   * @hidden\r\n   * @returns {void}\r\n   */\n  SeriesBase.prototype.processJsonData = function () {\n    var i = 0;\n    var point = new Points();\n    var xName = this instanceof Series && this.type === 'Histogram' ? 'x' : this.xName;\n    var textMappingName = this instanceof Series && this.marker.dataLabel.name ? this.marker.dataLabel.name : '';\n    if (this instanceof Series) {\n      if (this.type === 'Waterfall' || this.type === 'Histogram') {\n        this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], this.currentViewData, null, true), this);\n      }\n      if (this.category === 'Pareto') {\n        this.currentViewData = extend([], this.currentViewData, null, true);\n        if (this.type === 'Line') {\n          this.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.currentViewData, this);\n        }\n      }\n      this.isRectTypeSeries = this.type.indexOf('Column') > -1 || this.type.indexOf('Bar') > -1 || this.type.indexOf('Histogram') > -1;\n    }\n    var len = (this.currentViewData || []).length;\n    this.points = [];\n    this.xMin = Infinity;\n    this.xMax = -Infinity;\n    this.yMin = Infinity;\n    this.yMax = -Infinity;\n    this.sizeMax = -Infinity;\n    this.getSeriesType();\n    if (this.xAxis.valueType === 'Category') {\n      while (i < len) {\n        this.pushCategoryPoint(point, i, textMappingName, xName);\n        i++;\n      }\n    } else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n      var option = {\n        skeleton: 'full',\n        type: 'dateTime'\n      };\n      var dateParser = this.chart.intl.getDateParser(option);\n      var dateFormatter = this.chart.intl.getDateFormat(option);\n      while (i < len) {\n        this.pushDateTimePoint(point, i, textMappingName, xName, dateParser, dateFormatter);\n        i++;\n      }\n    } else {\n      while (i < len) {\n        this.pushDoublePoint(point, i, textMappingName, xName);\n        i++;\n      }\n    }\n    this.updateSplineValue();\n  };\n  /**\r\n   * Pushes a category point to the data collection.\r\n   *\r\n   * @param {Points} point -The point to be pushed.\r\n   * @param {number} index -The index of the point.\r\n   * @param {string} textMappingName -The name of the text mapping.\r\n   * @param {string} xName -The name of the x-coordinate.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  SeriesBase.prototype.pushCategoryPoint = function (point, index, textMappingName, xName) {\n    point = this.dataPoint(index, textMappingName, xName);\n    this.pushCategoryData(point, index, point.x);\n    this.pushData(point, index);\n    this.setEmptyPoint(point, index);\n    this.rangeColorsInterior(point);\n  };\n  /**\r\n   * Pushes a double point to the data collection.\r\n   *\r\n   * @param {Points} point -The point to be pushed.\r\n   * @param {number} index -The index of the point.\r\n   * @param {string} textMappingName -The name of the text mapping.\r\n   * @param {string} xName -The name of the x-coordinate.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  SeriesBase.prototype.pushDoublePoint = function (point, index, textMappingName, xName) {\n    point = this.dataPoint(index, textMappingName, xName);\n    point.xValue = point.x;\n    this.pushData(point, index);\n    this.setEmptyPoint(point, index);\n  };\n  /**\r\n   * Pushes a DateTime point to the data collection.\r\n   *\r\n   * @param {Points} point -The point to be pushed.\r\n   * @param {number} index -The index of the point.\r\n   * @param {string} textMappingName -The name of the text mapping.\r\n   * @param {string} xName -The name of the x-coordinate.\r\n   * @param {Function} dateParser -The date parser function.\r\n   * @param {Function} dateFormatter -The date formatter function.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  SeriesBase.prototype.pushDateTimePoint = function (point, index, textMappingName, xName, dateParser, dateFormatter) {\n    point = this.dataPoint(index, textMappingName, xName);\n    if (!isNullOrUndefined(point.x) && point.x !== '') {\n      point.x = new Date(DataUtil.parse.parseJson({\n        val: point.x\n      }).val);\n      if (this.xAxis.valueType === 'DateTime') {\n        point.xValue = Date.parse(point.x.toString());\n      } else {\n        if (this.chart.isBlazor) {\n          this.pushCategoryData(point, index, Date.parse(point.x.toString()).toString());\n        } else {\n          this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\n        }\n      }\n      this.pushData(point, index);\n      this.setEmptyPoint(point, index);\n    } else {\n      point.visible = false;\n    }\n  };\n  SeriesBase.prototype.updateSplineValue = function () {\n    if (this instanceof Series && !(this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory')) {\n      if (this.type.indexOf('Spline') > -1 || this.drawType.indexOf('Spline') > -1 && this.chart.chartAreaType === 'PolarRadar') {\n        var isArea = this.type.indexOf('Area') > -1 || this.drawType.indexOf('Area') > -1;\n        var isRange = this.type.indexOf('Range') > -1;\n        this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\n      } else if (this.type.indexOf('Histogram') > -1 && (this.xAxis.maximum || this.xAxis.minimum)) {\n        this.chart['histogramSeriesModule'].calculateBinValues(this);\n      }\n      if (this.type.indexOf('Histogram') > -1 && this.points.length === 1) {\n        this.xMin = this.xMin - this.histogramValues.binWidth;\n        this.xMax = this.xMax + this.histogramValues.binWidth;\n      }\n    }\n  };\n  SeriesBase.prototype.rangeColorsInterior = function (point) {\n    if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 && (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' || this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n      if (!this.rangeColorPoints[point.interior]) {\n        this.rangeColorPoints[point.interior] = [];\n      } else if (this.rangeColorPoints[point.interior] !== undefined) {\n        this.rangeColorPoints[point.interior].push(point);\n      }\n    }\n  };\n  /**\r\n   * Sets the empty point values.\r\n   *\r\n   * @param {Points} point - The point to be set.\r\n   * @param {number} i - The index of the point.\r\n   * @private\r\n   * @returns {void}\r\n   */\n  SeriesBase.prototype.pushData = function (point, i) {\n    point.index = i;\n    point.yValue = point.y;\n    point.series = this;\n    // To find the min, max for the axis range.\n    this.xMin = Math.min(this.xMin, point.xValue);\n    this.xMax = Math.max(this.xMax, point.xValue);\n    this.xData.push(point.xValue);\n  };\n  /**\r\n   * Retrieves the data point at the specified index with the given text mapping name and x-name.\r\n   *\r\n   * @protected\r\n   * @param {number} i - The index of the data point to retrieve.\r\n   * @param {string} textMappingName - The name used to map text data.\r\n   * @param {string} xName - The name used for the x-axis.\r\n   * @returns {Points} - The data point at the specified index.\r\n   * @private\r\n   */\n  SeriesBase.prototype.dataPoint = function (i, textMappingName, xName) {\n    this.points[i] = new Points();\n    var point = this.points[i];\n    var currentViewData = this.currentViewData[i];\n    var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\n    point.x = getObjectValueByMappingString(xName, currentViewData);\n    point.high = getObjectValueByMappingString(this.high, currentViewData);\n    point.low = getObjectValueByMappingString(this.low, currentViewData);\n    point.open = getObjectValueByMappingString(this.open, currentViewData);\n    point.close = getObjectValueByMappingString(this.close, currentViewData);\n    point.volume = getObjectValueByMappingString(this.volume, currentViewData);\n    point.interior = getObjectValueByMappingString(this.pointColorMapping, currentViewData);\n    if (this instanceof Series) {\n      if (this.errorBar.visible) {\n        point.errorBarColor = getObjectValueByMappingString(this.errorBar.errorBarColorMapping, currentViewData);\n        point.verticalError = typeof this.errorBar.verticalError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalError, currentViewData) : this.errorBar.verticalError;\n        point.horizontalError = typeof this.errorBar.horizontalError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalError, currentViewData) : this.errorBar.horizontalError;\n        point.verticalNegativeError = typeof this.errorBar.verticalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalNegativeError, currentViewData) : this.errorBar.verticalNegativeError;\n        point.verticalPositiveError = typeof this.errorBar.verticalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalPositiveError, currentViewData) : this.errorBar.verticalPositiveError;\n        point.horizontalNegativeError = typeof this.errorBar.horizontalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalNegativeError, currentViewData) : this.errorBar.horizontalNegativeError;\n        point.horizontalPositiveError = typeof this.errorBar.horizontalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalPositiveError, currentViewData) : this.errorBar.horizontalPositiveError;\n      }\n      point.y = getObjectValueByMappingString(this.yName, currentViewData);\n      point.size = getObjectValueByMappingString(this.size, currentViewData);\n      point.text = getObjectValueByMappingString(textMappingName, currentViewData);\n      point.tooltip = getObjectValueByMappingString(this.tooltipMappingName, currentViewData);\n      if (this.isAdvancedColorSupported()) {\n        this.rangeColorName = this.colorName.length > 0 ? this.colorName : this.yName;\n        point.colorValue = getObjectValueByMappingString(this.rangeColorName, currentViewData);\n        point.interior = this.getPointFillColor(point.interior, point.colorValue);\n      }\n    }\n    return point;\n  };\n  SeriesBase.prototype.isAdvancedColorSupported = function () {\n    if (isNullOrUndefined(this.isAdvancedColor)) {\n      if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' || this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n        this.isAdvancedColor = true;\n      } else {\n        this.isAdvancedColor = false;\n      }\n    }\n    return this.isAdvancedColor;\n  };\n  SeriesBase.prototype.getPointFillColor = function (pointFill, value) {\n    var color = pointFill;\n    if (value && this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0) {\n      for (var _i = 0, _a = this.chart.rangeColorSettings; _i < _a.length; _i++) {\n        var rangeMap = _a[_i];\n        if (value >= rangeMap.start && value <= rangeMap.end) {\n          if (rangeMap.colors.length > 1) {\n            color = getColorByValue(rangeMap, value);\n          } else {\n            color = rangeMap.colors[0];\n          }\n        }\n      }\n    }\n    return color;\n  };\n  /**\r\n   * Pushes a category point to the data collection.\r\n   *\r\n   * @param {string} mappingName - The name of the mapping.\r\n   * @param {Object} data - The data to be pushed.\r\n   * @returns {Object} - The data point at the specified index.\r\n   * @private\r\n   */\n  SeriesBase.prototype.getObjectValue = function (mappingName, data) {\n    return data[mappingName];\n  };\n  /**\r\n   * Sets the specified data point as an empty point at the given index.\r\n   *\r\n   * @private\r\n   * @param {Points} point - The data point to set as empty.\r\n   * @param {number} i - The index of the data point.\r\n   * @returns {void}\r\n   */\n  SeriesBase.prototype.setEmptyPoint = function (point, i) {\n    if (!this.findVisibility(point)) {\n      point.visible = true;\n      return null;\n    }\n    point.isEmpty = true;\n    var mode = this instanceof Series && point.isPointInRange ? this.emptyPointSettings.mode : 'Drop';\n    switch (mode) {\n      case 'Zero':\n        point.visible = true;\n        if (this instanceof Series && this.seriesType.indexOf('HighLow') > -1) {\n          point.high = point.low = 0;\n          if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\n            point.open = point.close = 0;\n          }\n        } else {\n          point.y = point.yValue = this.yData[i] = 0;\n        }\n        break;\n      case 'Average':\n        if (this instanceof Series) {\n          if (this.seriesType.indexOf('HighLow') > -1) {\n            point.high = isNullOrUndefined(point.high) || isNaN(+point.high) ? this.getAverage(this.high, i) : point.high;\n            point.low = isNullOrUndefined(point.low) || isNaN(+point.low) ? this.getAverage(this.low, i) : point.low;\n            if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\n              point.open = isNullOrUndefined(point.open) || isNaN(+point.open) ? this.getAverage(this.open, i) : point.open;\n              point.close = isNullOrUndefined(point.close) || isNaN(+point.close) ? this.getAverage(this.close, i) : point.close;\n            }\n          } else {\n            point.y = point.yValue = this.yData[i] = this.getAverage(this.yName, i);\n          }\n        }\n        point.visible = true;\n        break;\n      case 'Drop':\n      case 'Gap':\n        this.yData[i] = null;\n        point.visible = false;\n        break;\n    }\n  };\n  SeriesBase.prototype.findVisibility = function (point) {\n    var type = this instanceof Series ? this.seriesType : 'HighLowOpenClose';\n    var yValues;\n    var yAxisMin = this.yAxis.minimum;\n    var yAxisMax = this.yAxis.maximum;\n    switch (type) {\n      case 'XY':\n        if (this.chart.chartAreaType === 'PolarRadar' && (!isNullOrUndefined(yAxisMin) && point.yValue < yAxisMin || !isNullOrUndefined(yAxisMax) && point.yValue > yAxisMax)) {\n          point.isPointInRange = false;\n          return true;\n        }\n        this.setXYMinMax(point.yValue);\n        this.yData.push(point.yValue);\n        if (this instanceof Series && this.type === 'Bubble') {\n          this.sizeMax = Math.max(this.sizeMax, isNullOrUndefined(point.size) || isNaN(+point.size) ? this.sizeMax : point.size);\n        }\n        return isNullOrUndefined(point.x) || isNullOrUndefined(point.y) || isNaN(+point.y);\n      case 'HighLow':\n        this.setHiloMinMax(point.high, point.low);\n        return isNullOrUndefined(point.x) || isNullOrUndefined(point.low) || isNaN(+point.low) || isNullOrUndefined(point.high) || isNaN(+point.high);\n      case 'HighLowOpenClose':\n        this.setHiloMinMax(point.high, point.low);\n        return isNullOrUndefined(point.x) || isNullOrUndefined(point.low) || isNaN(+point.low) || isNullOrUndefined(point.open) || isNaN(+point.open) || isNullOrUndefined(point.close) || isNaN(+point.close) || isNullOrUndefined(point.high) || isNaN(+point.high);\n      case 'BoxPlot':\n        yValues = (point.y || [null]).filter(function (value) {\n          return !isNullOrUndefined(value) && !isNaN(value);\n        }).sort(function (a, b) {\n          return a - b;\n        });\n        point.y = yValues;\n        this.yMin = Math.min(this.yMin, Math.min.apply(Math, yValues));\n        this.yMax = Math.max(this.yMax, Math.max.apply(Math, yValues));\n        return !yValues.length;\n    }\n  };\n  /**\r\n   * To get Y min max for the provided point seriesType XY.\r\n   *\r\n   * @param {number} yValue - The y value used to determine the minimum and maximum values for the x and y coordinates.\r\n   * @returns {void}\r\n   */\n  SeriesBase.prototype.setXYMinMax = function (yValue) {\n    var isLogAxis = this.yAxis.valueType === 'Logarithmic' || this.xAxis.valueType === 'Logarithmic';\n    var isNegativeValue = yValue < 0 || this.yAxis.rangePadding === 'None';\n    var seriesMinY;\n    if (this.isRectTypeSeries && !setRange(this.yAxis)) {\n      seriesMinY = isLogAxis ? yValue : isNegativeValue ? yValue : 0;\n    } else {\n      seriesMinY = yValue;\n    }\n    this.yMin = isLogAxis ? Math.min(this.yMin, isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) || seriesMinY === 0 || seriesMinY.toString() === '0' || seriesMinY.toString() === '' ? this.yMin : seriesMinY) : Math.min(this.yMin, isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) ? this.yMin : seriesMinY);\n    this.yMax = Math.max(this.yMax, isNullOrUndefined(yValue) || isNaN(yValue) ? this.yMax : yValue);\n  };\n  /**\r\n   * Sets the minimum and maximum values for the high and low values.\r\n   *\r\n   * @private\r\n   * @param {number} high - The high value used to determine the maximum value.\r\n   * @param {number} low - The low value used to determine the minimum value.\r\n   * @returns {void}\r\n   */\n  SeriesBase.prototype.setHiloMinMax = function (high, low) {\n    this.yMin = Math.min(this.yMin, Math.min(isNullOrUndefined(low) || isNaN(low) ? this.yMin : low, isNullOrUndefined(high) || isNaN(high) ? this.yMin : high));\n    this.yMax = Math.max(this.yMax, Math.max(isNullOrUndefined(low) || isNaN(low) ? this.yMax : low, isNullOrUndefined(high) || isNaN(high) ? this.yMax : high));\n  };\n  /**\r\n   * Finds the type of the series.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n  SeriesBase.prototype.getSeriesType = function () {\n    var type;\n    if (this instanceof Series) {\n      var seriesType = this.chart.chartAreaType === 'PolarRadar' ? this.drawType : this.type;\n      if (seriesType) {\n        switch (seriesType) {\n          case 'RangeColumn':\n          case 'RangeArea':\n          case 'RangeStepArea':\n          case 'SplineRangeArea':\n          case 'Hilo':\n            type = 'HighLow';\n            break;\n          case 'HiloOpenClose':\n          case 'Candle':\n            type = 'HighLowOpenClose';\n            break;\n          case 'BoxAndWhisker':\n            type = 'BoxPlot';\n            break;\n          default:\n            type = 'XY';\n        }\n      }\n    }\n    this.seriesType = type;\n  };\n  /**\r\n   * Pushes category data into the series points.\r\n   *\r\n   * @protected\r\n   * @param {Points} point - The point to which category data will be pushed.\r\n   * @param {number} index - The index of the data point.\r\n   * @param {string} pointX - The x-value of the point.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  SeriesBase.prototype.pushCategoryData = function (point, index, pointX) {\n    if (!this.chart.tooltip.shared) {\n      if (!this.visible) {\n        return null;\n      }\n    }\n    if (!this.xAxis.isIndexed) {\n      if (this.xAxis.indexLabels[pointX] === undefined) {\n        this.xAxis.indexLabels[pointX] = this.xAxis.labels.length;\n        this.xAxis.labels.push(pointX);\n      }\n      point.xValue = this.xAxis.indexLabels[pointX];\n    } else {\n      if (this.xAxis.labels[index]) {\n        this.xAxis.labels[index] += ', ' + pointX;\n      } else {\n        this.xAxis.labels.push(pointX);\n      }\n      // this.xAxis.labels[index as number] ? this.xAxis.labels[index as number] += ', ' + pointX :\n      //     this.xAxis.labels.push(pointX);\n      point.xValue = index;\n    }\n  };\n  /**\r\n   * Gets the average value of a member in the specified data array or current view data.\r\n   *\r\n   * @param {string} member - The member whose average is to be calculated.\r\n   * @param {number} i - The index of the data point.\r\n   * @param {Object} data - The data array from which to calculate the average. Defaults to the current view data.\r\n   * @returns {number} - The average value of the specified member.\r\n   */\n  SeriesBase.prototype.getAverage = function (member, i, data) {\n    if (data === void 0) {\n      data = this.currentViewData;\n    }\n    var previous = data[i - 1] ? data[i - 1][member] || 0 : 0;\n    var next = data[i + 1] ? data[i + 1][member] || 0 : 0;\n    return (previous + next) / 2;\n  };\n  /**\r\n   * Refreshes the data manager for the provided chart.\r\n   *\r\n   * @param {Chart} chart - The chart whose data manager is to be refreshed.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  SeriesBase.prototype.refreshDataManager = function (chart) {\n    var _this = this;\n    this.chart = chart;\n    var dataSource;\n    var isAngular = 'isAngular';\n    if (chart[isAngular]) {\n      dataSource = Object.keys(this.dataSource).length ? this.dataSource : chart.dataSource;\n    } else {\n      dataSource = this.dataSource || chart.dataSource;\n    }\n    if (!(dataSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n      this.dataManagerSuccess({\n        result: dataSource,\n        count: dataSource.length\n      }, false);\n      return;\n    }\n    var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e);\n    });\n  };\n  SeriesBase.prototype.dataManagerSuccess = function (e, isRemoteData) {\n    if (isRemoteData === void 0) {\n      isRemoteData = true;\n    }\n    this.currentViewData = e.count ? e.result : [];\n    this.chart.allowServerDataBinding = false;\n    if (this instanceof Series) {\n      if (this.chart.stockChart) {\n        this.chart.stockChart.series[this.index].localData = this.currentViewData;\n      }\n      var argsData = {\n        name: seriesRender,\n        series: this,\n        data: this.currentViewData,\n        fill: this.interior\n      };\n      this.chart.trigger(seriesRender, argsData);\n      this.interior = argsData.fill;\n      this.currentViewData = argsData.data;\n    }\n    if (this.chart.stockChart && !(this instanceof Series)) {\n      this.currentViewData = this.chart.stockChart.findCurrentData(this.chart.stockChart.series[0].localData, this.chart.stockChart.series[0].xName);\n    }\n    this.processJsonData();\n    this.recordsCount = e.count;\n    this.refreshChart(isRemoteData);\n    this.currentViewData = null;\n  };\n  SeriesBase.prototype.refreshChart = function (isRemoteData) {\n    var chart = this.chart;\n    if (this instanceof Series) {\n      chart.visibleSeriesCount += isRemoteData ? 1 : 0;\n    }\n    chart.refreshTechnicalIndicator(this);\n    if (this instanceof Series && this.category !== 'TrendLine') {\n      for (var _i = 0, _a = this.trendlines; _i < _a.length; _i++) {\n        var trendline = _a[_i];\n        trendline.setDataSource(this, chart);\n      }\n    }\n    //if (chart.visibleSeries.length === (chart.visibleSeriesCount - chart.indicators.length)) {\n    if (chart.visibleSeries.length === chart.visibleSeriesCount) {\n      chart.refreshBound();\n      chart.trigger('loaded', {\n        chart: chart.isBlazor ? {} : chart\n      });\n      if (this.chart.stockChart && this.chart.stockChart.initialRender) {\n        this.chart.stockChart.initialRender = false;\n        this.chart.stockChart.stockChartDataManagerSuccess();\n      }\n    }\n    if (this instanceof Series) {\n      chart.visibleSeriesCount += isRemoteData ? 0 : 1;\n    }\n  };\n  __decorate([Property('')], SeriesBase.prototype, \"xName\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"colorName\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"high\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"low\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"open\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"close\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"volume\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"pointColorMapping\", void 0);\n  __decorate([Property(true)], SeriesBase.prototype, \"visible\", void 0);\n  __decorate([Property(null)], SeriesBase.prototype, \"xAxisName\", void 0);\n  __decorate([Property(null)], SeriesBase.prototype, \"yAxisName\", void 0);\n  __decorate([Complex(null, Animation)], SeriesBase.prototype, \"animation\", void 0);\n  __decorate([Property(null)], SeriesBase.prototype, \"fill\", void 0);\n  __decorate([Property(1)], SeriesBase.prototype, \"width\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"dashArray\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"dataSource\", void 0);\n  __decorate([Property()], SeriesBase.prototype, \"query\", void 0);\n  __decorate([Collection([], ChartSegment)], SeriesBase.prototype, \"segments\", void 0);\n  __decorate([Property('X')], SeriesBase.prototype, \"segmentAxis\", void 0);\n  __decorate([Property(false)], SeriesBase.prototype, \"enableComplexProperty\", void 0);\n  return SeriesBase;\n}(ChildProperty);\nexport { SeriesBase };\n/**\r\n * Configures the series in charts.\r\n *\r\n * @public\r\n */\nvar Series = /** @class */function (_super) {\n  __extends(Series, _super);\n  function Series(parent, propName, defaultValue, isArray) {\n    var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\n    _this.visibleSeriesCount = 0;\n    /** @private */\n    _this.category = 'Series';\n    /** @private */\n    _this.isRectSeries = false;\n    /** @private */\n    _this.drawPoints = [];\n    /** @private */\n    _this.lowDrawPoints = [];\n    /** @private */\n    _this.delayedAnimation = false;\n    /** @private */\n    _this.rangeColorName = _this.colorName.length > 0 ? _this.colorName : _this.yName;\n    return _this;\n  }\n  /**\r\n   * Refresh the axis label.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Series.prototype.refreshAxisLabel = function () {\n    if (this.xAxis.valueType.indexOf('Category') === -1) {\n      return null;\n    }\n    this.xAxis.labels = [];\n    this.xAxis.indexLabels = {};\n    var option = {\n      skeleton: 'full',\n      type: 'dateTime'\n    };\n    var dateParser = this.chart.intl.getDateParser(option);\n    var dateFormatter = this.chart.intl.getDateFormat(option);\n    for (var _i = 0, _a = this.xAxis.series; _i < _a.length; _i++) {\n      var item = _a[_i];\n      if (item.visible && item.category !== 'TrendLine') {\n        item.xMin = Infinity;\n        item.xMax = -Infinity;\n        for (var _b = 0, _c = item.points; _b < _c.length; _b++) {\n          var point = _c[_b];\n          item.pushCategoryData(point, point.index, this.xAxis.valueType === \"DateTimeCategory\" ? Date.parse(dateParser(dateFormatter(point.x))).toString() : point.x);\n          item.xMin = Math.min(item.xMin, point.xValue);\n          item.xMax = Math.max(item.xMax, point.xValue);\n        }\n      }\n    }\n  };\n  /**\r\n   * To get the series collection.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Series.prototype.findSeriesCollection = function (column, row, isStack) {\n    var seriesCollection = [];\n    for (var _i = 0, _a = row.axes; _i < _a.length; _i++) {\n      var rowAxis = _a[_i];\n      for (var _b = 0, _c = rowAxis.series; _b < _c.length; _b++) {\n        var rowSeries = _c[_b];\n        for (var _d = 0, _e = column.axes; _d < _e.length; _d++) {\n          var axis = _e[_d];\n          for (var _f = 0, _g = axis.series; _f < _g.length; _f++) {\n            var series = _g[_f];\n            if (series === rowSeries && series.visible && this.rectSeriesInChart(series, isStack)) {\n              seriesCollection.push(series);\n            }\n          }\n        }\n      }\n    }\n    return seriesCollection;\n  };\n  /**\r\n   * Checks if the series in the chart are rectangular.\r\n   *\r\n   * @param {Series} series - The series to be checked.\r\n   * @param {boolean} isStack - Specifies whether the series are stacked.\r\n   * @returns {boolean} - Returns true if the series in the chart are rectangular, otherwise false.\r\n   */\n  Series.prototype.rectSeriesInChart = function (series, isStack) {\n    var type = series.type.toLowerCase();\n    return type.indexOf('column') !== -1 || type.indexOf('bar') !== -1 || type.indexOf('histogram') !== -1 || type.indexOf('hiloopenclose') !== -1 || type.indexOf('candle') !== -1 || type.indexOf('pareto') !== -1 || type.indexOf('hilo') !== -1 || series.drawType.indexOf('Column') !== -1 || type.indexOf('waterfall') !== -1 || type.indexOf('boxandwhisker') !== -1 || isStack;\n  };\n  /**\r\n   * Calculates the stacked value for the chart.\r\n   *\r\n   * @param {boolean} isStacking100 - Specifies whether the stacking is 100%.\r\n   * @param {Chart} chart - The chart for which the stacked value is calculated.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Series.prototype.calculateStackedValue = function (isStacking100, chart) {\n    for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n      var columnItem = _a[_i];\n      for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\n        var item = _c[_b];\n        this.calculateStackingValues(this.findSeriesCollection(columnItem, item, true), isStacking100);\n      }\n    }\n  };\n  Series.prototype.calculateStackingValues = function (seriesCollection, isStacking100) {\n    var startValues;\n    var endValues;\n    var yValues = [];\n    var lastPositive = [];\n    var lastNegative = [];\n    var stackingGroup;\n    var lastValue;\n    var value;\n    var frequencies = [];\n    if (isStacking100) {\n      frequencies = this.findFrequencies(seriesCollection);\n    }\n    var groupingValues = [];\n    var visiblePoints = [];\n    for (var i = 0; i < seriesCollection.length; i++) {\n      var series = seriesCollection[i];\n      if (!groupingValues[series.stackingGroup]) {\n        groupingValues[series.stackingGroup] = [];\n        groupingValues[series.stackingGroup].push(series);\n      } else if (groupingValues[series.stackingGroup] !== undefined) {\n        groupingValues[series.stackingGroup].push(series);\n      }\n    }\n    var keys = Object.keys(groupingValues);\n    for (var k = 0; k < keys.length; k++) {\n      var stackingSeies = [];\n      var stackedValues = [];\n      var seriesCollection_2 = groupingValues[keys[k]];\n      for (var _i = 0, seriesCollection_1 = seriesCollection_2; _i < seriesCollection_1.length; _i++) {\n        var series = seriesCollection_1[_i];\n        if (series.type.indexOf('Stacking') !== -1 || series.drawType.indexOf('Stacking') !== -1 && series.chart.chartAreaType === 'PolarRadar') {\n          stackingGroup = series.type.indexOf('StackingArea') !== -1 ? 'StackingArea100' : series.type.indexOf('StackingLine') !== -1 ? 'StackingLine100' : series.stackingGroup;\n          if (!lastPositive[stackingGroup]) {\n            lastPositive[stackingGroup] = [];\n            lastNegative[stackingGroup] = [];\n          }\n          yValues = series.yData;\n          startValues = [];\n          endValues = [];\n          stackingSeies.push(series);\n          visiblePoints = getVisiblePoints(series);\n          for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n            lastValue = 0;\n            value = +yValues[j]; // Fix for chart not rendering while y value is given as string issue\n            if (lastPositive[stackingGroup][visiblePoints[j].xValue] === undefined) {\n              lastPositive[stackingGroup][visiblePoints[j].xValue] = 0;\n            }\n            if (lastNegative[stackingGroup][visiblePoints[j].xValue] === undefined) {\n              lastNegative[stackingGroup][visiblePoints[j].xValue] = 0;\n            }\n            if (isStacking100) {\n              value = value / frequencies[stackingGroup][visiblePoints[j].xValue] * 100;\n              value = !isNaN(value) ? value : 0;\n              visiblePoints[j].percentage = +value.toFixed(2);\n            } else {\n              stackedValues[j] = stackedValues[j] ? stackedValues[j] + Math.abs(value) : Math.abs(value);\n            }\n            if (value >= 0) {\n              lastValue = lastPositive[stackingGroup][visiblePoints[j].xValue];\n              lastPositive[stackingGroup][visiblePoints[j].xValue] += value;\n            } else {\n              lastValue = lastNegative[stackingGroup][visiblePoints[j].xValue];\n              lastNegative[stackingGroup][visiblePoints[j].xValue] += value;\n            }\n            startValues.push(lastValue);\n            endValues.push(value + lastValue);\n            if (isStacking100 && endValues[j] > 100) {\n              endValues[j] = 100;\n            }\n          }\n          series.stackedValues = new StackValues(startValues, endValues);\n          var isLogAxis = series.yAxis.valueType === 'Logarithmic';\n          var isColumnBarType = series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1;\n          series.yMin = isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : series.yAxis.startFromZero && series.yAxis.rangePadding === 'Auto' && series.yMin >= 0 ? 0 : parseFloat(Math.min.apply(0, isStacking100 ? startValues : endValues).toFixed(10));\n          series.yMax = Math.max.apply(0, endValues);\n          if (series.yMin > Math.min.apply(0, endValues)) {\n            series.yMin = isStacking100 ? -100 : isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : Math.min.apply(0, endValues);\n          }\n          if (series.yMax < Math.max.apply(0, startValues)) {\n            series.yMax = 0;\n          }\n        }\n      }\n      this.findPercentageOfStacking(stackingSeies, stackedValues, isStacking100);\n    }\n  };\n  Series.prototype.findPercentageOfStacking = function (stackingSeies, values, isStacking100) {\n    for (var _i = 0, stackingSeies_1 = stackingSeies; _i < stackingSeies_1.length; _i++) {\n      var item = stackingSeies_1[_i];\n      if (isStacking100) {\n        return null;\n      }\n      for (var _a = 0, _b = getVisiblePoints(item); _a < _b.length; _a++) {\n        var point = _b[_a];\n        point.percentage = Math.abs(+(point.y / values[point.index] * 100).toFixed(2));\n      }\n    }\n  };\n  Series.prototype.findFrequencies = function (seriesCollection) {\n    var frequencies = [];\n    var stackingGroup;\n    var visiblePoints = [];\n    for (var _i = 0, seriesCollection_3 = seriesCollection; _i < seriesCollection_3.length; _i++) {\n      var series = seriesCollection_3[_i];\n      series.yAxis.isStack100 = series.type.indexOf('100') !== -1 ? true : false;\n      visiblePoints = getVisiblePoints(series);\n      if (series.type.indexOf('Stacking') !== -1) {\n        stackingGroup = series.type.indexOf('StackingArea') !== -1 ? 'StackingArea100' : series.type.indexOf('StackingLine') !== -1 ? 'StackingLine100' : series.stackingGroup;\n        if (!frequencies[stackingGroup]) {\n          frequencies[stackingGroup] = [];\n        }\n        for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n          if (frequencies[stackingGroup][visiblePoints[j].xValue] === undefined) {\n            frequencies[stackingGroup][visiblePoints[j].xValue] = 0;\n          }\n          if (series.yData[j] > 0) {\n            frequencies[stackingGroup][visiblePoints[j].xValue] += series.yData[j];\n          } else {\n            frequencies[stackingGroup][visiblePoints[j].xValue] -= series.yData[j];\n          }\n        }\n      }\n    }\n    return frequencies;\n  };\n  /* private dataManagerFailure(e: { result: Object[] }): void {\r\n       this.currentViewData = [];\r\n       this.refreshChart();\r\n   }*/\n  /**\r\n   * Renders the series on the chart.\r\n   *\r\n   * @param {Chart} chart - The chart on which the series is rendered.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Series.prototype.renderSeries = function (chart) {\n    if (this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory') {\n      for (var i = 0; i < this.points.length; i++) {\n        var index = this.xAxis.labels.indexOf(Date.parse(this.points[i].x.toString()).toString());\n        this.points[i].xValue = index;\n        if (chart.series.length > 1) {\n          this.xData[i] = index;\n          this.xMin = this.xMin > index ? index : this.xMin;\n          this.xMax = this.xMax < index ? index : this.xMax;\n        }\n      }\n      if (this instanceof Series && this.type.indexOf('Spline') > -1) {\n        var isArea = this.type.indexOf('Area') > -1;\n        var isRange = this.type.indexOf('Range') > -1;\n        this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\n      }\n    }\n    var seriesType = firstToLowerCase(this.type);\n    seriesType = seriesType.replace('100', '');\n    if (chart[seriesType + 'SeriesModule']) {\n      if (this.category !== 'Indicator' && this.category !== 'TrendLine') {\n        this.createSeriesElements(chart);\n      }\n      this.visiblePoints = getVisiblePoints(this);\n      chart[seriesType + 'SeriesModule'].render(this, this.xAxis, this.yAxis, chart.requireInvertedAxis);\n      if (this.category !== 'Indicator') {\n        if (this.errorBar.visible) {\n          this.chart.errorBarModule.render(this);\n        }\n        if (this.marker.dataLabel.visible) {\n          chart.dataLabelModule.render(this, this.chart, this.marker.dataLabel);\n        }\n        this.appendSeriesElement(chart.seriesElements, chart);\n      }\n      if (!this.chart.enableCanvas) {\n        this.performAnimation(chart, seriesType, this.errorBar, this.marker, this.marker.dataLabel);\n      }\n    }\n  };\n  /**\r\n   * Creates elements for the series on the chart.\r\n   *\r\n   * @param {Chart} chart - The chart for which series elements are created.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Series.prototype.createSeriesElements = function (chart) {\n    if (this.category !== 'Indicator') {\n      var elementId = chart.element.id;\n      // 8 for extend border value 5 for extend size value\n      var explodeValue = this.marker.border.width + 8 + 5;\n      var render = this.type === 'Bubble' || !this.marker.visible && chart.tooltip.shared && chart.enableCanvas ? chart.svgRenderer : chart.renderer;\n      var index = this.index === undefined ? this.category : this.index;\n      var markerHeight = void 0;\n      var markerWidth = void 0;\n      var options = void 0;\n      if (this.type === 'Scatter' || this.drawType === 'Scatter') {\n        markerHeight = (this.marker.height + explodeValue) / 2;\n        markerWidth = (this.marker.width + explodeValue) / 2;\n      } else {\n        markerHeight = 0;\n        markerWidth = 0;\n      }\n      if (chart.chartAreaType === 'PolarRadar') {\n        var markerMaxValue = this.drawType === 'Scatter' ? Math.max(this.marker.width, this.marker.height) : 0;\n        options = new CircleOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', {\n          width: 1,\n          color: 'Gray'\n        }, 1, this.clipRect.width / 2 + this.clipRect.x, this.clipRect.height / 2 + this.clipRect.y, chart.radius + markerMaxValue);\n        this.clipRectElement = appendClipElement(chart.redraw, options, render, 'drawCircularClipPath');\n      } else {\n        options = new RectOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', {\n          width: 1,\n          color: 'Gray'\n        }, 1, {\n          x: this.xAxis.columnIndex === 0 ? -markerWidth : 0,\n          y: this.yAxis.rowIndex === chart.rows.length - 1 ? -markerHeight : 0,\n          width: this.clipRect.width + (this.xAxis.columnIndex === chart.columns.length - 1 ? markerWidth * 2 : markerWidth),\n          height: this.clipRect.height + (this.yAxis.rowIndex === 0 ? markerHeight * 2 : markerHeight)\n        });\n        this.clipRectElement = appendClipElement(chart.redraw, options, render);\n      }\n      var transform = chart.chartAreaType === 'Cartesian' ? 'translate(' + this.clipRect.x + ',' + this.clipRect.y + ')' : '';\n      this.symbolElement = null;\n      this.seriesElement = render.createGroup({\n        'id': elementId + 'SeriesGroup' + index,\n        'transform': transform,\n        'clip-path': 'url(#' + elementId + '_ChartSeriesClipRect_' + index + ')'\n      });\n      if (this.seriesElement) {\n        this.seriesElement.setAttribute('role', 'region');\n        this.seriesElement.setAttribute('aria-label', this.name + ',' + this.type + ' series with ' + this.points.length + ' data points');\n        this.seriesElement.setAttribute('aria-hidden', 'false');\n      }\n      if (!this.chart.enableCanvas || this.type === 'Bubble') {\n        this.seriesElement.setAttribute('tabindex', index === 0 ? '0' : !this.checkTabindex(chart.visibleSeries, index) ? '0' : '');\n        this.seriesElement.setAttribute('style', 'outline: none');\n        this.seriesElement.appendChild(this.clipRectElement);\n      }\n    }\n  };\n  Series.prototype.checkTabindex = function (visibleSeries, index) {\n    for (var i = 0; i < index; i++) {\n      if (visibleSeries[i].visible) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * Appends a series element to the chart.\r\n   *\r\n   * @param {Element} element - The series element to append.\r\n   * @param {Chart} chart - The chart to which the series element will be appended.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Series.prototype.appendSeriesElement = function (element, chart) {\n    var marker = this.marker;\n    var dataLabel = marker.dataLabel;\n    var redraw = chart.redraw;\n    if (this.category !== 'TrendLine') {\n      appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\n      var errorBar = this.errorBar;\n      if (errorBar.visible) {\n        if (chart.chartAreaType === 'PolarRadar') {\n          appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\n        } else {\n          appendChildElement(chart.enableCanvas, chart.seriesElements, this.errorBarElement, redraw);\n        }\n      }\n    }\n    if (marker.visible && (chart.chartAreaType === 'Cartesian' || this.drawType !== 'Scatter' && chart.chartAreaType === 'PolarRadar') && this.type !== 'Scatter' && this.type !== 'Bubble' && this.type !== 'Candle' && this.type !== 'Hilo' && this.type !== 'HiloOpenClose' && this.symbolElement) {\n      appendChildElement(chart.enableCanvas, chart.seriesElements, this.symbolElement, redraw);\n    }\n    if (dataLabel.visible && this.textElement) {\n      appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.shapeElement, redraw);\n      appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.textElement, redraw);\n    }\n    if (!chart.enableCanvas && chart.dataLabelElements.hasChildNodes()) {\n      chart.seriesElements.appendChild(chart.dataLabelElements);\n    }\n  };\n  /**\r\n   * Performs animation for the specified chart elements.\r\n   *\r\n   * @param {Chart} chart - The chart for which animation is performed.\r\n   * @param {string} type - The type of animation to be performed.\r\n   * @param {ErrorBarSettingsModel} errorBar - The error bar settings for the animation.\r\n   * @param {MarkerSettingsModel} marker - The marker settings for the animation.\r\n   * @param {DataLabelSettingsModel} dataLabel - The data label settings for the animation.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Series.prototype.performAnimation = function (chart, type, errorBar, marker, dataLabel) {\n    if ((this.animation.enable && animationMode !== 'Disable' || animationMode === 'Enable') && chart.animateSeries && (!chart.stockChart || !chart.stockChart.isStockChartRendered)) {\n      chart[type + 'SeriesModule'].doAnimation(this);\n      if (errorBar.visible) {\n        chart.errorBarModule.doErrorBarAnimation(this);\n      }\n      if (marker.visible) {\n        chart.markerRender.doMarkerAnimation(this);\n      }\n      //to datalabel animation disabled for edge and IE\n      if (dataLabel.visible && Browser.info.name !== 'edge' && !Browser.isIE) {\n        chart.dataLabelModule.doDataLabelAnimation(this);\n      }\n    }\n  };\n  /**\r\n   * Sets the color of a data point.\r\n   *\r\n   * @param {Points} point - The data point.\r\n   * @param {string} color - The color to set.\r\n   * @returns {string} - The updated color.\r\n   * @private\r\n   */\n  Series.prototype.setPointColor = function (point, color) {\n    color = point.interior || color;\n    return point.isEmpty ? this.emptyPointSettings.fill || color : color;\n  };\n  /**\r\n   * Sets the border color of a data point.\r\n   *\r\n   * @param {Points} point - The data point.\r\n   * @param {BorderModel} border - The border color to set.\r\n   * @returns {BorderModel} - The updated border color.\r\n   * @private\r\n   */\n  Series.prototype.setBorderColor = function (point, border) {\n    border.width = point.isEmpty ? this.emptyPointSettings.border.width || border.width : border.width;\n    border.color = point.isEmpty ? this.emptyPointSettings.border.color || border.color : border.color;\n    return border;\n  };\n  /**\r\n   * Adds a data point to the data source.\r\n   *\r\n   * @function addPoint\r\n   * @param {Object} dataPoint - The data point to be added.\r\n   * @param {number} duration - The duration for the animation.\r\n   * @returns {void}\r\n   */\n  Series.prototype.addPoint = function (dataPoint, duration) {\n    var yMin = this.yMin;\n    var yMax = this.yMax;\n    this.removeTrackballElements();\n    this.dataSource.push(dataPoint);\n    if (this.type === 'Radar' || this.type === 'Polar') {\n      return this.chart.refresh();\n    }\n    if (this.type === 'Histogram') {\n      this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], this.dataSource, null, true), this);\n      for (var i = 0; i < this.currentViewData.length; i++) {\n        this.updatePoint(i);\n      }\n    } else {\n      this.currentViewData = this.dataSource;\n      var pointIndex = this.points.length === 0 ? 0 : this.points[this.points.length - 1].index + 1;\n      this.updatePoint(pointIndex);\n    }\n    if (this.category === 'Pareto') {\n      var dataSource = extend([], this.dataSource, null, true);\n      var series = this.chart.visibleSeries[this.index + this.chart.series.length];\n      series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(dataSource, this);\n      for (var i = 0; i < series.currentViewData.length; i++) {\n        if (!series.points[i]) {\n          series.updatePoint(i);\n        }\n        series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\n      }\n    }\n    this.updateSplineValue();\n    this.chart.calculateStackValues();\n    this.chart.redraw = this.chart.enableAnimation;\n    var chartDuration = this.chart.duration;\n    this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n    this.chart.animateSeries = false;\n    this.chart.pointsAdded = true;\n    if (this.chart.enableAnimation && !(this.isRectSeries || this.type === 'Bubble' || this.type === 'Scatter') && this.type.indexOf('step') === -1) {\n      if (this.marker && this.marker.visible && this.visible) {\n        for (var i = this.points.length - 2; i >= 0; i--) {\n          if (this.points[i] && this.points[i].symbolLocations[0] !== undefined) {\n            this.chart.markerRender.renderMarker(this, this.points[this.points.length - 2], this.points[i].symbolLocations[0], null, true);\n            break;\n          }\n        }\n      }\n    }\n    if (this.yMin >= yMin && this.yMax <= yMax) {\n      if (!setRange(this.xAxis)) {\n        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n        this.xAxis.updateAxis();\n      }\n      this.chart.pointsAdded = false;\n      this.updateSeries(true, false);\n    }\n    if (this.yMin < yMin || this.yMax > yMax) {\n      this.updateChartAxis();\n      this.chart.pointsAdded = false;\n      this.updateSeries(true, true);\n    }\n    this.chart.redraw = false;\n    this.chart.duration = chartDuration;\n  };\n  /**\r\n   * Removes a data point from the series data source at the specified index.\r\n   *\r\n   * @function removePoint\r\n   * @param {number} index - The index of the data point to be removed.\r\n   * @param {number} duration - The duration for the animation.\r\n   * @returns {void}\r\n   */\n  Series.prototype.removePoint = function (index, duration) {\n    var dataSource = extend([], this.dataSource, null, true);\n    var chartDuration = this.chart.duration;\n    if (dataSource.length > 0 && index >= 0 && index < dataSource.length) {\n      dataSource.splice(index, 1);\n      this.dataSource.splice(index, 1);\n      this.removeTrackballElements(index);\n      if (this.type === 'Radar' || this.type === 'Polar') {\n        return this.chart.refresh();\n      }\n      this.chart.redraw = this.chart.enableAnimation;\n      this.chart.animateSeries = false;\n      this.chart.pointsAdded = true;\n      this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n      if (this.type === 'Histogram') {\n        var length_1 = this.points.length;\n        this.points = [];\n        this.visiblePoints = [];\n        this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], this.dataSource, null, true), this);\n        for (var i = 0; i < this.currentViewData.length; i++) {\n          this.updatePoint(i);\n        }\n        if (length_1 > this.points.length) {\n          this.removedPointIndex = index;\n        }\n      } else {\n        this.removedPointIndex = index;\n        this.points.splice(index, 1);\n        this.visiblePoints.splice(index, 1);\n      }\n      this.yData = [];\n      this.xData = [];\n      var yMin = this.yMin;\n      var yMax = this.yMax;\n      this.yMin = Infinity;\n      this.xMin = Infinity;\n      this.yMax = -Infinity;\n      this.xMax = -Infinity;\n      if (this.xAxis.valueType.indexOf('Category') > -1 && this.chart.series.length === 1) {\n        this.xAxis.labels = [];\n        this.xAxis.indexLabels = {};\n      }\n      if (index === 0) {\n        this.chart.pointsRemoved = this.chart.enableAnimation;\n      }\n      for (var i = 0; i < this.points.length; i++) {\n        this.updatePointsAfterRemoval(i);\n      }\n      if (this.category === 'Pareto') {\n        var series = this.chart.visibleSeries[this.index + this.chart.series.length];\n        series.yMin = Infinity;\n        series.xMin = Infinity;\n        series.yMax = -Infinity;\n        series.xMax = -Infinity;\n        series.points.splice(index, 1);\n        series.visiblePoints.splice(index, 1);\n        series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.dataSource, this);\n        for (var i = 0; i < series.currentViewData.length; i++) {\n          series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\n          series.updatePointsAfterRemoval(i);\n        }\n      }\n      this.updateSplineValue();\n      this.chart.calculateStackValues();\n      if (!setRange(this.xAxis) && yMax === this.yMax && yMin === this.yMin) {\n        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n        this.xAxis.updateAxis();\n        this.createSeriesElements(this.chart);\n        this.chart.pointsAdded = false;\n        this.updateSeries(true, false);\n      } else if (yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) {\n        this.updateChartAxis();\n        this.createSeriesElements(this.chart);\n        this.chart.pointsAdded = false;\n        this.updateSeries(true, true);\n      }\n    }\n    appendChildElement(this.chart.enableCanvas, this.chart.seriesElements, this.seriesElement, true);\n    this.chart.redraw = false;\n    this.chart.duration = chartDuration;\n    this.chart.pointsRemoved = false;\n    this.removedPointIndex = null;\n  };\n  Series.prototype.updatePointsAfterRemoval = function (index) {\n    var point = this.points[index];\n    var option = {\n      skeleton: 'full',\n      type: 'dateTime'\n    };\n    var dateParser = this.chart.intl.getDateParser(option);\n    var dateFormatter = this.chart.intl.getDateFormat(option);\n    if (this.xAxis.valueType === 'Category' && this.chart.series.length === 1) {\n      this.pushCategoryData(point, index, point.x);\n    } else if (this.xAxis.valueType === 'DateTimeCategory' && this.chart.series.length === 1) {\n      this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\n    }\n    this.pushData(point, index);\n    this.setEmptyPoint(this.points[index], index);\n  };\n  /**\r\n   * Removes trackball elements from the series.\r\n   *\r\n   * @param {number} index - The index of the data point.\r\n   * @returns {void}\r\n   */\n  Series.prototype.removeTrackballElements = function (index) {\n    if (this.marker.visible) {\n      if (index !== undefined) {\n        var baseId = this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Trackball_';\n        var trackball0 = getElement(baseId + '0');\n        if (trackball0) {\n          trackball0.remove();\n        }\n        var trackball1 = getElement(baseId + '1');\n        if (trackball1) {\n          trackball1.remove();\n        }\n        var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Symbol');\n        if (symbolElement) {\n          symbolElement.setAttribute('visibility', 'visible');\n        }\n      } else {\n        var baseClassPattern = this.chart.element.id + '_EJ2-Trackball_Series_' + this.index + '_Point_';\n        var elements = document.querySelectorAll(\"[class*=\\\"\" + baseClassPattern + \"\\\"]\");\n        if (elements[0]) {\n          var pointIndexMatch = elements[0].id.match(/_Point_(\\d+)_/);\n          var pointIndex = pointIndexMatch ? parseInt(pointIndexMatch[1], 10) : null;\n          elements[0].remove();\n          var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + pointIndex + '_Symbol');\n          if (symbolElement) {\n            symbolElement.setAttribute('visibility', 'visible');\n          }\n        }\n        if (elements[1]) {\n          elements[1].remove();\n        }\n      }\n    }\n    if (this.chart.tooltip.enable) {\n      this.chart.tooltipModule.previousPoints = [];\n      var tooltipElement = getElement(this.chart.element.id + '_tooltip');\n      if (tooltipElement) {\n        tooltipElement.remove();\n      }\n    }\n  };\n  /**\r\n   * Sets the data source with the provided data.\r\n   *\r\n   * @function setData\r\n   * @param {Object[]} data - An array of objects representing the data points.\r\n   * @param {number} duration - The duration for the animation.\r\n   * @returns {void}\r\n   */\n  Series.prototype.setData = function (data, duration) {\n    if (!data) {\n      return null;\n    }\n    var yMin = this.yMin;\n    var yMax = this.yMax;\n    this.yMin = Infinity;\n    this.yMax = -Infinity;\n    var pointList = [];\n    var samePoints = false;\n    if (this.dataSource.length === data.length && !(this.type === 'Radar' || this.type === 'Polar')) {\n      samePoints = true;\n      this.yData = [];\n      if (this.type === 'Histogram' && this.dataSource.length === data.length) {\n        var newHistogramData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], data, null, true), this);\n        this.currentViewData = newHistogramData;\n        for (var j = 0; j < newHistogramData.length; j++) {\n          this.updatePoint(j);\n        }\n      } else {\n        for (var i = 0; i < data.length; i++) {\n          var newData = data[i][this.xName];\n          var existingData = this.dataSource[i][this.xName];\n          if (data[i][this.xName] instanceof Date) {\n            newData = data[i][this.xName].getTime();\n            existingData = this.dataSource[i][this.xName].getTime();\n          }\n          if (existingData === newData) {\n            var point = this.points[i];\n            var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\n            var existingPoint = this.dataSource[i];\n            var newPoint = data[i];\n            if ((this.seriesType === 'XY' || this.seriesType === 'BoxPlot') && (existingPoint[this.yName] !== newPoint[this.yName] || existingPoint[this.size] !== newPoint[this.size])) {\n              point.y = getObjectValueByMappingString(this.yName, newPoint);\n              if (this.type === 'Bubble' && existingPoint[this.size] !== newPoint[this.size]) {\n                point.size = getObjectValueByMappingString(this.size, newPoint);\n              }\n              pointList.push(i);\n            } else if (existingPoint[this.high] !== newPoint[this.high] || existingPoint[this.low] !== newPoint[this.low] || existingPoint[this.open] !== newPoint[this.open] || existingPoint[this.close] !== newPoint[this.close] || existingPoint[this.volume] !== newPoint[this.volume]) {\n              point.high = getObjectValueByMappingString(this.high, newPoint);\n              point.low = getObjectValueByMappingString(this.low, newPoint);\n              point.open = getObjectValueByMappingString(this.open, newPoint);\n              point.close = getObjectValueByMappingString(this.close, newPoint);\n              point.volume = getObjectValueByMappingString(this.volume, newPoint);\n              pointList.push(i);\n            }\n            point.yValue = point.y;\n            this.setEmptyPoint(point, i);\n            this.dataSource[i] = data[i];\n          } else {\n            samePoints = false;\n            break;\n          }\n        }\n      }\n    }\n    if (!samePoints) {\n      this.dataSource = data;\n    } else {\n      this.chart.redraw = this.chart.enableAnimation;\n      this.chart.animateSeries = false;\n      this.chart.pointsAdded = true;\n      var chartDuration = this.chart.duration;\n      this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n      this.chart.calculateStackValues();\n      this.updateSplineValue();\n      if (yMax === this.yMax && yMin === this.yMin && this.visible) {\n        this.chart.pointsAdded = false;\n        this.chart[firstToLowerCase(this.category === 'Pareto' ? 'Column' : this.type.replace('100', '')) + 'SeriesModule'].updateDirection(this, pointList, this.chart.requireInvertedAxis);\n        if (this.chart.annotationModule) {\n          this.chart.annotationModule.renderAnnotations(getElement(this.chart.element.id + '_Secondary_Element'));\n        }\n      } else if ((yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) && this.visible) {\n        var maximumLabelWidth = this.yAxis.maxLabelSize.width;\n        this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\n        if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\n          this.chart.calculateBounds();\n          this.chart.axisCollections.forEach(function (axis) {\n            if (!setRange(axis)) {\n              axis.updateAxis();\n            }\n          });\n          this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\n          this.chart.renderAreaBorder();\n        } else {\n          if (!setRange(this.yAxis)) {\n            this.yAxis.updateAxis();\n          }\n          if (this.type === 'Histogram' && !setRange(this.xAxis)) {\n            this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n            this.xAxis.updateAxis();\n          }\n        }\n        this.chart.pointsAdded = false;\n        this.updateSeries(false, true);\n        if (this.marker.dataLabel.visible && this.chart.dataLabelModule) {\n          this.chart.dataLabelModule.doDataLabelAnimation(this);\n        }\n        if (this.chart.stripLineModule) {\n          this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\n        }\n      }\n      this.chart.redraw = false;\n      this.chart.pointsRemoved = false;\n      this.chart.duration = chartDuration;\n    }\n  };\n  /**\r\n   * Updates the chart axes based on current data and axis bounds.\r\n   *\r\n   * @returns {void}\r\n   */\n  Series.prototype.updateChartAxis = function () {\n    var maximumLabelWidth = this.yAxis.maxLabelSize.width;\n    this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\n    if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\n      this.chart.calculateBounds();\n      this.chart.axisCollections.forEach(function (axis) {\n        if (!setRange(axis)) {\n          axis.updateAxis();\n        }\n      });\n      this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\n      this.chart.renderAreaBorder();\n    } else {\n      if (!setRange(this.xAxis)) {\n        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n        this.xAxis.updateAxis();\n      }\n      if (!setRange(this.yAxis)) {\n        this.yAxis.updateAxis();\n      }\n    }\n    if (this.chart.stripLineModule) {\n      this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\n    }\n  };\n  Series.prototype.updateSeries = function (xAxis, yAxis) {\n    var seriesCollection = [];\n    if (xAxis && yAxis) {\n      var set = new Set(this.xAxis.series.concat(this.yAxis.series));\n      set.forEach(function (series) {\n        seriesCollection.push(series);\n      });\n    } else {\n      seriesCollection = xAxis ? this.xAxis.series.slice() : this.yAxis.series.slice();\n    }\n    for (var _i = 0, seriesCollection_4 = seriesCollection; _i < seriesCollection_4.length; _i++) {\n      var series = seriesCollection_4[_i];\n      if (series.visible) {\n        findClipRect(series, this.chart.enableCanvas);\n        var transform = 'translate(' + this.clipRect.x + ',' + this.clipRect.y + ')';\n        series.seriesElement.setAttribute('transform', transform);\n        series.chart[firstToLowerCase(series.type.replace('100', '')) + 'SeriesModule'].render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, series.chart.enableAnimation);\n        if (series.marker.visible && series.chart.chartAreaType === 'Cartesian' && series.type !== 'Scatter' && series.type !== 'Bubble' && series.type !== 'Candle' && series.type !== 'Hilo' && series.type !== 'HiloOpenClose' && series.symbolElement) {\n          series.symbolElement.setAttribute('transform', transform);\n          appendChildElement(series.chart.enableCanvas, series.chart.seriesElements, series.symbolElement, true);\n        }\n        if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n          series.chart.dataLabelCollections = [];\n          series.chart.dataLabelModule.render(series, series.chart, series.marker.dataLabel);\n          if (series.textElement) {\n            if (series.shapeElement) {\n              series.shapeElement.setAttribute('transform', transform);\n            }\n            appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.shapeElement, true);\n            series.textElement.setAttribute('transform', transform);\n            appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.textElement, true);\n          }\n        }\n        if (series.chart.annotationModule) {\n          series.chart.annotationModule.renderAnnotations(getElement(series.chart.element.id + '_Secondary_Element'));\n        }\n      }\n    }\n  };\n  Series.prototype.updatePoint = function (index) {\n    var point = new Points();\n    var textMappingName = this instanceof Series && this.marker.dataLabel.name ? this.marker.dataLabel.name : '';\n    var xName = this instanceof Series && this.type === 'Histogram' ? 'x' : this.xName;\n    if (this.xAxis.valueType === 'Category') {\n      this.pushCategoryPoint(point, index, textMappingName, xName);\n    } else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n      var point_1 = this.points[index];\n      var option = {\n        skeleton: 'full',\n        type: 'dateTime'\n      };\n      var dateParser = this.chart.intl.getDateParser(option);\n      var dateFormatter = this.chart.intl.getDateFormat(option);\n      this.pushDateTimePoint(point_1, index, textMappingName, xName, dateParser, dateFormatter);\n    } else {\n      this.pushDoublePoint(point, index, textMappingName, xName);\n    }\n  };\n  __decorate([Property('')], Series.prototype, \"name\", void 0);\n  __decorate([Property('')], Series.prototype, \"yName\", void 0);\n  __decorate([Property('Line')], Series.prototype, \"drawType\", void 0);\n  __decorate([Property(true)], Series.prototype, \"isClosed\", void 0);\n  __decorate([Property(null)], Series.prototype, \"bearFillColor\", void 0);\n  __decorate([Property(null)], Series.prototype, \"bullFillColor\", void 0);\n  __decorate([Property(false)], Series.prototype, \"enableSolidCandles\", void 0);\n  __decorate([Property('')], Series.prototype, \"size\", void 0);\n  __decorate([Property(null)], Series.prototype, \"binInterval\", void 0);\n  __decorate([Property(false)], Series.prototype, \"showNormalDistribution\", void 0);\n  __decorate([Property('')], Series.prototype, \"stackingGroup\", void 0);\n  __decorate([Complex({\n    color: null,\n    width: 0\n  }, Border)], Series.prototype, \"border\", void 0);\n  __decorate([Property(1)], Series.prototype, \"opacity\", void 0);\n  __decorate([Property(0)], Series.prototype, \"zOrder\", void 0);\n  __decorate([Property('')], Series.prototype, \"groupName\", void 0);\n  __decorate([Property('Line')], Series.prototype, \"type\", void 0);\n  __decorate([Complex(null, ErrorBarSettings)], Series.prototype, \"errorBar\", void 0);\n  __decorate([Complex(null, MarkerSettings)], Series.prototype, \"marker\", void 0);\n  __decorate([Complex(null, ParetoOptions)], Series.prototype, \"paretoOptions\", void 0);\n  __decorate([Complex({}, DragSettings)], Series.prototype, \"dragSettings\", void 0);\n  __decorate([Collection([], Trendline)], Series.prototype, \"trendlines\", void 0);\n  __decorate([Property(true)], Series.prototype, \"enableTooltip\", void 0);\n  __decorate([Property('')], Series.prototype, \"tooltipFormat\", void 0);\n  __decorate([Property('')], Series.prototype, \"tooltipMappingName\", void 0);\n  __decorate([Property('SeriesType')], Series.prototype, \"legendShape\", void 0);\n  __decorate([Property('')], Series.prototype, \"legendImageUrl\", void 0);\n  __decorate([Property(null)], Series.prototype, \"selectionStyle\", void 0);\n  __decorate([Property(null)], Series.prototype, \"unSelectedStyle\", void 0);\n  __decorate([Property(null)], Series.prototype, \"nonHighlightStyle\", void 0);\n  __decorate([Property(1)], Series.prototype, \"minRadius\", void 0);\n  __decorate([Property(3)], Series.prototype, \"maxRadius\", void 0);\n  __decorate([Property('Natural')], Series.prototype, \"splineType\", void 0);\n  __decorate([Property(0.5)], Series.prototype, \"cardinalSplineTension\", void 0);\n  __decorate([Complex(null, EmptyPointSettings)], Series.prototype, \"emptyPointSettings\", void 0);\n  __decorate([Property(true)], Series.prototype, \"showMean\", void 0);\n  __decorate([Property('Normal')], Series.prototype, \"boxPlotMode\", void 0);\n  __decorate([Property(null)], Series.prototype, \"columnWidth\", void 0);\n  __decorate([Property(null)], Series.prototype, \"columnWidthInPixel\", void 0);\n  __decorate([Property('Rectangle')], Series.prototype, \"columnFacet\", void 0);\n  __decorate([Property(0)], Series.prototype, \"columnSpacing\", void 0);\n  __decorate([Property('#C64E4A')], Series.prototype, \"negativeFillColor\", void 0);\n  __decorate([Property('#4E81BC')], Series.prototype, \"summaryFillColor\", void 0);\n  __decorate([Property()], Series.prototype, \"intermediateSumIndexes\", void 0);\n  __decorate([Property()], Series.prototype, \"sumIndexes\", void 0);\n  __decorate([Property('Left')], Series.prototype, \"step\", void 0);\n  __decorate([Complex({\n    color: 'black',\n    width: 2\n  }, Connector)], Series.prototype, \"connector\", void 0);\n  __decorate([Complex(null, CornerRadius)], Series.prototype, \"cornerRadius\", void 0);\n  return Series;\n}(SeriesBase);\nexport { Series };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","ChildProperty","Complex","Collection","getValue","animationMode","isNullOrUndefined","extend","StackValues","RectOption","appendChildElement","appendClipElement","getElement","firstToLowerCase","CircleOption","getColorByValue","Rect","Size","Border","Font","Margin","Animation","EmptyPointSettings","CornerRadius","Connector","DragSettings","DataManager","DataUtil","Offset","seriesRender","getVisiblePoints","setRange","findClipRect","Browser","DataLabelSettings","_super","apply","width","color","left","right","top","bottom","size","fontStyle","fontWeight","fontFamily","MarkerSettings","x","y","ParetoOptions","Points","symbolLocations","regions","percentage","regionData","isSelect","marker","visible","isPointInRange","verticalError","verticalNegativeError","horizontalError","horizontalNegativeError","verticalPositiveError","horizontalPositiveError","Trendline","_this","clipRect","setDataSource","series","chart","points","trendLineModule","initDataSource","visibleSeriesCount","ErrorBarCapSettings","ChartSegment","ErrorBarSettings","SeriesBase","rangeColorPoints","isAdvancedColor","undefined","currentViewData","seriesType","isRectTypeSeries","removedPointIndex","isLegendClicked","processJsonData","point","xName","Series","type","textMappingName","dataLabel","name","processInternalData","category","paretoSeriesModule","performCumulativeCalculation","indexOf","len","xMin","Infinity","xMax","yMin","yMax","sizeMax","getSeriesType","xAxis","valueType","pushCategoryPoint","option","skeleton","dateParser","intl","getDateParser","dateFormatter","getDateFormat","pushDateTimePoint","pushDoublePoint","updateSplineValue","index","dataPoint","pushCategoryData","pushData","setEmptyPoint","rangeColorsInterior","xValue","Date","parse","parseJson","val","toString","isBlazor","stockChart","drawType","chartAreaType","isArea","isRange","findSplinePoint","maximum","minimum","calculateBinValues","histogramValues","binWidth","rangeColorSettings","visibleSeries","interior","push","yValue","Math","min","max","xData","getObjectValueByMappingString","enableComplexProperty","getObjectValue","high","low","open","close","volume","pointColorMapping","errorBar","errorBarColor","errorBarColorMapping","yName","text","tooltip","tooltipMappingName","isAdvancedColorSupported","rangeColorName","colorName","colorValue","getPointFillColor","pointFill","value","_i","_a","rangeMap","start","end","colors","mappingName","data","findVisibility","isEmpty","mode","emptyPointSettings","yData","isNaN","getAverage","yValues","yAxisMin","yAxis","yAxisMax","setXYMinMax","setHiloMinMax","filter","sort","a","isLogAxis","isNegativeValue","rangePadding","seriesMinY","pointX","shared","isIndexed","indexLabels","labels","member","previous","next","refreshDataManager","dataSource","isAngular","keys","query","dataManagerSuccess","result","count","dataManager","dataModule","getData","generateQuery","requiresCount","then","e","isRemoteData","allowServerDataBinding","localData","argsData","fill","trigger","findCurrentData","recordsCount","refreshChart","refreshTechnicalIndicator","trendlines","trendline","refreshBound","initialRender","stockChartDataManagerSuccess","parent","propName","defaultValue","isArray","call","isRectSeries","drawPoints","lowDrawPoints","delayedAnimation","refreshAxisLabel","item","_b","_c","findSeriesCollection","column","row","isStack","seriesCollection","axes","rowAxis","rowSeries","_d","_e","axis","_f","_g","rectSeriesInChart","toLowerCase","calculateStackedValue","isStacking100","columns","columnItem","rows","calculateStackingValues","startValues","endValues","lastPositive","lastNegative","stackingGroup","lastValue","frequencies","findFrequencies","groupingValues","visiblePoints","k","stackingSeies","stackedValues","seriesCollection_2","seriesCollection_1","j","pointsLength","toFixed","abs","isColumnBarType","startFromZero","parseFloat","findPercentageOfStacking","values","stackingSeies_1","seriesCollection_3","isStack100","renderSeries","replace","createSeriesElements","render","requireInvertedAxis","errorBarModule","dataLabelModule","appendSeriesElement","seriesElements","enableCanvas","performAnimation","elementId","element","id","explodeValue","border","svgRenderer","renderer","markerHeight","markerWidth","options","height","markerMaxValue","radius","clipRectElement","redraw","columnIndex","rowIndex","transform","symbolElement","seriesElement","createGroup","setAttribute","checkTabindex","appendChild","errorBarElement","textElement","dataLabelElements","shapeElement","hasChildNodes","animation","enable","animateSeries","isStockChartRendered","doAnimation","doErrorBarAnimation","markerRender","doMarkerAnimation","info","isIE","doDataLabelAnimation","setPointColor","setBorderColor","addPoint","duration","removeTrackballElements","refresh","updatePoint","pointIndex","calculateStackValues","enableAnimation","chartDuration","pointsAdded","renderMarker","baseModule","calculateRangeAndInterval","rect","availableSize","updateAxis","updateSeries","updateChartAxis","removePoint","splice","length_1","pointsRemoved","updatePointsAfterRemoval","baseId","trackball0","remove","trackball1","baseClassPattern","elements","document","querySelectorAll","pointIndexMatch","match","parseInt","tooltipModule","previousPoints","tooltipElement","setData","pointList","samePoints","newHistogramData","newData","existingData","getTime","existingPoint","newPoint","updateDirection","annotationModule","renderAnnotations","maximumLabelWidth","maxLabelSize","calculateBounds","axisCollections","forEach","chartAxisLayoutPanel","drawPaneLines","renderAreaBorder","stripLineModule","renderStripLine","set","Set","concat","slice","seriesCollection_4","dataLabelCollections","point_1"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Property, ChildProperty, Complex, Collection, getValue, animationMode } from '@syncfusion/ej2-base';\r\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\r\nimport { StackValues, RectOption, appendChildElement, appendClipElement, getElement } from '../../common/utils/helper';\r\nimport { firstToLowerCase, CircleOption, getColorByValue } from '../../common/utils/helper';\r\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\r\nimport { Border, Font, Margin, Animation, EmptyPointSettings, CornerRadius, Connector, DragSettings } from '../../common/model/base';\r\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\r\nimport { Offset } from '../../common/model/base';\r\nimport { seriesRender } from '../../common/model/constants';\r\nimport { getVisiblePoints, setRange, findClipRect } from '../../common/utils/helper';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\n/**\r\n * Configures the data label in the series.\r\n */\r\nvar DataLabelSettings = /** @class */ (function (_super) {\r\n    __extends(DataLabelSettings, _super);\r\n    function DataLabelSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(false)\r\n    ], DataLabelSettings.prototype, \"visible\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], DataLabelSettings.prototype, \"showZero\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], DataLabelSettings.prototype, \"name\", void 0);\r\n    __decorate([\r\n        Property('transparent')\r\n    ], DataLabelSettings.prototype, \"fill\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], DataLabelSettings.prototype, \"format\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], DataLabelSettings.prototype, \"opacity\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], DataLabelSettings.prototype, \"angle\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], DataLabelSettings.prototype, \"enableRotation\", void 0);\r\n    __decorate([\r\n        Property('Auto')\r\n    ], DataLabelSettings.prototype, \"position\", void 0);\r\n    __decorate([\r\n        Property(5)\r\n    ], DataLabelSettings.prototype, \"rx\", void 0);\r\n    __decorate([\r\n        Property(5)\r\n    ], DataLabelSettings.prototype, \"ry\", void 0);\r\n    __decorate([\r\n        Property('Center')\r\n    ], DataLabelSettings.prototype, \"alignment\", void 0);\r\n    __decorate([\r\n        Complex({ width: null, color: null }, Border)\r\n    ], DataLabelSettings.prototype, \"border\", void 0);\r\n    __decorate([\r\n        Complex({ left: 5, right: 5, top: 5, bottom: 5 }, Margin)\r\n    ], DataLabelSettings.prototype, \"margin\", void 0);\r\n    __decorate([\r\n        Complex({ size: null, color: null, fontStyle: null, fontWeight: null, fontFamily: null }, Font)\r\n    ], DataLabelSettings.prototype, \"font\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], DataLabelSettings.prototype, \"template\", void 0);\r\n    __decorate([\r\n        Property('Hide')\r\n    ], DataLabelSettings.prototype, \"labelIntersectAction\", void 0);\r\n    return DataLabelSettings;\r\n}(ChildProperty));\r\nexport { DataLabelSettings };\r\n/**\r\n *  Configures the marker in the series.\r\n */\r\nvar MarkerSettings = /** @class */ (function (_super) {\r\n    __extends(MarkerSettings, _super);\r\n    function MarkerSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(false)\r\n    ], MarkerSettings.prototype, \"visible\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], MarkerSettings.prototype, \"shape\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], MarkerSettings.prototype, \"imageUrl\", void 0);\r\n    __decorate([\r\n        Property(5)\r\n    ], MarkerSettings.prototype, \"height\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], MarkerSettings.prototype, \"isFilled\", void 0);\r\n    __decorate([\r\n        Property(5)\r\n    ], MarkerSettings.prototype, \"width\", void 0);\r\n    __decorate([\r\n        Complex({ width: 2, color: null }, Border)\r\n    ], MarkerSettings.prototype, \"border\", void 0);\r\n    __decorate([\r\n        Complex({ x: 0, y: 0 }, Offset)\r\n    ], MarkerSettings.prototype, \"offset\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], MarkerSettings.prototype, \"fill\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], MarkerSettings.prototype, \"allowHighlight\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], MarkerSettings.prototype, \"opacity\", void 0);\r\n    __decorate([\r\n        Complex({}, DataLabelSettings)\r\n    ], MarkerSettings.prototype, \"dataLabel\", void 0);\r\n    return MarkerSettings;\r\n}(ChildProperty));\r\nexport { MarkerSettings };\r\n/**\r\n *  Configures the pareto series.\r\n */\r\nvar ParetoOptions = /** @class */ (function (_super) {\r\n    __extends(ParetoOptions, _super);\r\n    function ParetoOptions() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(null)\r\n    ], ParetoOptions.prototype, \"fill\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], ParetoOptions.prototype, \"width\", void 0);\r\n    __decorate([\r\n        Property('0')\r\n    ], ParetoOptions.prototype, \"dashArray\", void 0);\r\n    __decorate([\r\n        Complex(null, MarkerSettings)\r\n    ], ParetoOptions.prototype, \"marker\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], ParetoOptions.prototype, \"showAxis\", void 0);\r\n    return ParetoOptions;\r\n}(ChildProperty));\r\nexport { ParetoOptions };\r\n/**\r\n * Points model for the series.\r\n *\r\n * @public\r\n */\r\nvar Points = /** @class */ (function () {\r\n    function Points() {\r\n        /** point symbol location. */\r\n        this.symbolLocations = null;\r\n        /** point region. */\r\n        this.regions = null;\r\n        /** point percentage value. */\r\n        this.percentage = null;\r\n        /** point region data. */\r\n        this.regionData = null;\r\n        /** To know the point is selected. */\r\n        this.isSelect = false;\r\n        /** point marker. */\r\n        this.marker = {\r\n            visible: false\r\n        };\r\n        /**\r\n         * To identify point y value with in the range.\r\n         *\r\n         * @private\r\n         */\r\n        this.isPointInRange = true;\r\n        /** vertical error value for the point. */\r\n        this.verticalError = null;\r\n        /** vertical negative error value for the point. */\r\n        this.verticalNegativeError = null;\r\n        /** horizontal error value for the point. */\r\n        this.horizontalError = null;\r\n        /** horizontal negative error value for the point. */\r\n        this.horizontalNegativeError = null;\r\n        /** vertical positive error value for the point. */\r\n        this.verticalPositiveError = null;\r\n        /** horizontal positive error value for the point. */\r\n        this.horizontalPositiveError = null;\r\n    }\r\n    return Points;\r\n}());\r\nexport { Points };\r\n/**\r\n * Defines the behavior of the trendlines.\r\n */\r\nvar Trendline = /** @class */ (function (_super) {\r\n    __extends(Trendline, _super);\r\n    function Trendline() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /** @private */\r\n        _this.clipRect = new Rect(0, 0, 0, 0);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets the data source for the specified series in the provided chart.\r\n     *\r\n     * @private\r\n     * @param {Series} series - The series for which the data source is set.\r\n     * @param {Chart} chart - The chart in which the data source is set.\r\n     * @returns {void}\r\n     */\r\n    Trendline.prototype.setDataSource = function (series, chart) {\r\n        if (series) {\r\n            this.points = series.points;\r\n        }\r\n        chart.trendLineModule.initDataSource(this);\r\n        chart.visibleSeriesCount++;\r\n    };\r\n    __decorate([\r\n        Property('')\r\n    ], Trendline.prototype, \"name\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Trendline.prototype, \"dashArray\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], Trendline.prototype, \"visible\", void 0);\r\n    __decorate([\r\n        Property('Linear')\r\n    ], Trendline.prototype, \"type\", void 0);\r\n    __decorate([\r\n        Property(2)\r\n    ], Trendline.prototype, \"period\", void 0);\r\n    __decorate([\r\n        Property(2)\r\n    ], Trendline.prototype, \"polynomialOrder\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], Trendline.prototype, \"backwardForecast\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], Trendline.prototype, \"forwardForecast\", void 0);\r\n    __decorate([\r\n        Complex({}, Animation)\r\n    ], Trendline.prototype, \"animation\", void 0);\r\n    __decorate([\r\n        Complex({}, MarkerSettings)\r\n    ], Trendline.prototype, \"marker\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], Trendline.prototype, \"enableTooltip\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Trendline.prototype, \"intercept\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Trendline.prototype, \"fill\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], Trendline.prototype, \"width\", void 0);\r\n    __decorate([\r\n        Property('SeriesType')\r\n    ], Trendline.prototype, \"legendShape\", void 0);\r\n    return Trendline;\r\n}(ChildProperty));\r\nexport { Trendline };\r\n/**\r\n * Configures Error bar in series.\r\n */\r\nvar ErrorBarCapSettings = /** @class */ (function (_super) {\r\n    __extends(ErrorBarCapSettings, _super);\r\n    function ErrorBarCapSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(1)\r\n    ], ErrorBarCapSettings.prototype, \"width\", void 0);\r\n    __decorate([\r\n        Property(10)\r\n    ], ErrorBarCapSettings.prototype, \"length\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], ErrorBarCapSettings.prototype, \"color\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], ErrorBarCapSettings.prototype, \"opacity\", void 0);\r\n    return ErrorBarCapSettings;\r\n}(ChildProperty));\r\nexport { ErrorBarCapSettings };\r\nvar ChartSegment = /** @class */ (function (_super) {\r\n    __extends(ChartSegment, _super);\r\n    function ChartSegment() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(null)\r\n    ], ChartSegment.prototype, \"value\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], ChartSegment.prototype, \"color\", void 0);\r\n    __decorate([\r\n        Property('0')\r\n    ], ChartSegment.prototype, \"dashArray\", void 0);\r\n    return ChartSegment;\r\n}(ChildProperty));\r\nexport { ChartSegment };\r\n/**\r\n * Configures error bar settings.\r\n *\r\n * @public\r\n */\r\nvar ErrorBarSettings = /** @class */ (function (_super) {\r\n    __extends(ErrorBarSettings, _super);\r\n    function ErrorBarSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(false)\r\n    ], ErrorBarSettings.prototype, \"visible\", void 0);\r\n    __decorate([\r\n        Property('Fixed')\r\n    ], ErrorBarSettings.prototype, \"type\", void 0);\r\n    __decorate([\r\n        Property('Both')\r\n    ], ErrorBarSettings.prototype, \"direction\", void 0);\r\n    __decorate([\r\n        Property('Vertical')\r\n    ], ErrorBarSettings.prototype, \"mode\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], ErrorBarSettings.prototype, \"color\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], ErrorBarSettings.prototype, \"verticalError\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], ErrorBarSettings.prototype, \"width\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], ErrorBarSettings.prototype, \"horizontalError\", void 0);\r\n    __decorate([\r\n        Property(3)\r\n    ], ErrorBarSettings.prototype, \"verticalPositiveError\", void 0);\r\n    __decorate([\r\n        Property(3)\r\n    ], ErrorBarSettings.prototype, \"verticalNegativeError\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], ErrorBarSettings.prototype, \"horizontalPositiveError\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], ErrorBarSettings.prototype, \"horizontalNegativeError\", void 0);\r\n    __decorate([\r\n        Complex(null, ErrorBarCapSettings)\r\n    ], ErrorBarSettings.prototype, \"errorBarCap\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], ErrorBarSettings.prototype, \"errorBarColorMapping\", void 0);\r\n    return ErrorBarSettings;\r\n}(ChildProperty));\r\nexport { ErrorBarSettings };\r\n/**\r\n * Defines the common behavior of both series and technical indicators.\r\n */\r\nvar SeriesBase = /** @class */ (function (_super) {\r\n    __extends(SeriesBase, _super);\r\n    function SeriesBase() {\r\n        /**\r\n         * The DataSource field that contains the x value.\r\n         * It is applicable for both series and technical indicators.\r\n         *\r\n         * @default ''\r\n         */\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.rangeColorPoints = [];\r\n        _this.isAdvancedColor = undefined;\r\n        /** @private */\r\n        _this.currentViewData = [];\r\n        /** @private */\r\n        _this.clipRect = new Rect(0, 0, 0, 0);\r\n        /** @private */\r\n        _this.seriesType = 'XY';\r\n        _this.isRectTypeSeries = false;\r\n        _this.removedPointIndex = null;\r\n        /** @private */\r\n        _this.isLegendClicked = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Process data for the series.\r\n     *\r\n     * @hidden\r\n     * @returns {void}\r\n     */\r\n    SeriesBase.prototype.processJsonData = function () {\r\n        var i = 0;\r\n        var point = new Points();\r\n        var xName = (this instanceof Series && this.type === 'Histogram') ? 'x' : this.xName;\r\n        var textMappingName = this instanceof Series && this.marker.dataLabel.name ?\r\n            this.marker.dataLabel.name : '';\r\n        if (this instanceof Series) {\r\n            if ((this.type === 'Waterfall' || this.type === 'Histogram')) {\r\n                this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\r\n                    processInternalData(extend([], this.currentViewData, null, true), this);\r\n            }\r\n            if (this.category === 'Pareto') {\r\n                this.currentViewData = extend([], this.currentViewData, null, true);\r\n                if (this.type === 'Line') {\r\n                    this.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.currentViewData, this);\r\n                }\r\n            }\r\n            this.isRectTypeSeries = this.type.indexOf('Column') > -1 || this.type.indexOf('Bar') > -1\r\n                || this.type.indexOf('Histogram') > -1;\r\n        }\r\n        var len = (this.currentViewData || []).length;\r\n        this.points = [];\r\n        this.xMin = Infinity;\r\n        this.xMax = -Infinity;\r\n        this.yMin = Infinity;\r\n        this.yMax = -Infinity;\r\n        this.sizeMax = -Infinity;\r\n        this.getSeriesType();\r\n        if (this.xAxis.valueType === 'Category') {\r\n            while (i < len) {\r\n                this.pushCategoryPoint(point, i, textMappingName, xName);\r\n                i++;\r\n            }\r\n        }\r\n        else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\r\n            var option = {\r\n                skeleton: 'full',\r\n                type: 'dateTime'\r\n            };\r\n            var dateParser = this.chart.intl.getDateParser(option);\r\n            var dateFormatter = this.chart.intl.getDateFormat(option);\r\n            while (i < len) {\r\n                this.pushDateTimePoint(point, i, textMappingName, xName, dateParser, dateFormatter);\r\n                i++;\r\n            }\r\n        }\r\n        else {\r\n            while (i < len) {\r\n                this.pushDoublePoint(point, i, textMappingName, xName);\r\n                i++;\r\n            }\r\n        }\r\n        this.updateSplineValue();\r\n    };\r\n    /**\r\n     * Pushes a category point to the data collection.\r\n     *\r\n     * @param {Points} point -The point to be pushed.\r\n     * @param {number} index -The index of the point.\r\n     * @param {string} textMappingName -The name of the text mapping.\r\n     * @param {string} xName -The name of the x-coordinate.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    SeriesBase.prototype.pushCategoryPoint = function (point, index, textMappingName, xName) {\r\n        point = this.dataPoint(index, textMappingName, xName);\r\n        this.pushCategoryData(point, index, point.x);\r\n        this.pushData(point, index);\r\n        this.setEmptyPoint(point, index);\r\n        this.rangeColorsInterior(point);\r\n    };\r\n    /**\r\n     * Pushes a double point to the data collection.\r\n     *\r\n     * @param {Points} point -The point to be pushed.\r\n     * @param {number} index -The index of the point.\r\n     * @param {string} textMappingName -The name of the text mapping.\r\n     * @param {string} xName -The name of the x-coordinate.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    SeriesBase.prototype.pushDoublePoint = function (point, index, textMappingName, xName) {\r\n        point = this.dataPoint(index, textMappingName, xName);\r\n        point.xValue = point.x;\r\n        this.pushData(point, index);\r\n        this.setEmptyPoint(point, index);\r\n    };\r\n    /**\r\n     * Pushes a DateTime point to the data collection.\r\n     *\r\n     * @param {Points} point -The point to be pushed.\r\n     * @param {number} index -The index of the point.\r\n     * @param {string} textMappingName -The name of the text mapping.\r\n     * @param {string} xName -The name of the x-coordinate.\r\n     * @param {Function} dateParser -The date parser function.\r\n     * @param {Function} dateFormatter -The date formatter function.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    SeriesBase.prototype.pushDateTimePoint = function (point, index, textMappingName, xName, dateParser, dateFormatter) {\r\n        point = this.dataPoint(index, textMappingName, xName);\r\n        if (!isNullOrUndefined(point.x) && point.x !== '') {\r\n            point.x = new Date(DataUtil.parse.parseJson({ val: point.x }).val);\r\n            if (this.xAxis.valueType === 'DateTime') {\r\n                point.xValue = Date.parse(point.x.toString());\r\n            }\r\n            else {\r\n                if (this.chart.isBlazor) {\r\n                    this.pushCategoryData(point, index, Date.parse(point.x.toString()).toString());\r\n                }\r\n                else {\r\n                    this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\r\n                }\r\n            }\r\n            this.pushData(point, index);\r\n            this.setEmptyPoint(point, index);\r\n        }\r\n        else {\r\n            point.visible = false;\r\n        }\r\n    };\r\n    SeriesBase.prototype.updateSplineValue = function () {\r\n        if (this instanceof Series && !(this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory')) {\r\n            if (this.type.indexOf('Spline') > -1 || (this.drawType.indexOf('Spline') > -1 && this.chart.chartAreaType === 'PolarRadar')) {\r\n                var isArea = (this.type.indexOf('Area') > -1 || this.drawType.indexOf('Area') > -1);\r\n                var isRange = this.type.indexOf('Range') > -1;\r\n                this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\r\n            }\r\n            else if (this.type.indexOf('Histogram') > -1 && (this.xAxis.maximum || this.xAxis.minimum)) {\r\n                this.chart['histogramSeriesModule'].calculateBinValues(this);\r\n            }\r\n            if (this.type.indexOf('Histogram') > -1 && this.points.length === 1) {\r\n                this.xMin = this.xMin - this.histogramValues.binWidth;\r\n                this.xMax = this.xMax + this.histogramValues.binWidth;\r\n            }\r\n        }\r\n    };\r\n    SeriesBase.prototype.rangeColorsInterior = function (point) {\r\n        if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 &&\r\n            (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' ||\r\n                this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\r\n            if (!this.rangeColorPoints[point.interior]) {\r\n                this.rangeColorPoints[point.interior] = [];\r\n            }\r\n            else if (this.rangeColorPoints[point.interior] !== undefined) {\r\n                this.rangeColorPoints[point.interior].push(point);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the empty point values.\r\n     *\r\n     * @param {Points} point - The point to be set.\r\n     * @param {number} i - The index of the point.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    SeriesBase.prototype.pushData = function (point, i) {\r\n        point.index = i;\r\n        point.yValue = point.y;\r\n        point.series = this;\r\n        // To find the min, max for the axis range.\r\n        this.xMin = Math.min(this.xMin, point.xValue);\r\n        this.xMax = Math.max(this.xMax, point.xValue);\r\n        this.xData.push(point.xValue);\r\n    };\r\n    /**\r\n     * Retrieves the data point at the specified index with the given text mapping name and x-name.\r\n     *\r\n     * @protected\r\n     * @param {number} i - The index of the data point to retrieve.\r\n     * @param {string} textMappingName - The name used to map text data.\r\n     * @param {string} xName - The name used for the x-axis.\r\n     * @returns {Points} - The data point at the specified index.\r\n     * @private\r\n     */\r\n    SeriesBase.prototype.dataPoint = function (i, textMappingName, xName) {\r\n        this.points[i] = new Points();\r\n        var point = this.points[i];\r\n        var currentViewData = this.currentViewData[i];\r\n        var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\r\n        point.x = getObjectValueByMappingString(xName, currentViewData);\r\n        point.high = getObjectValueByMappingString(this.high, currentViewData);\r\n        point.low = getObjectValueByMappingString(this.low, currentViewData);\r\n        point.open = getObjectValueByMappingString(this.open, currentViewData);\r\n        point.close = getObjectValueByMappingString(this.close, currentViewData);\r\n        point.volume = getObjectValueByMappingString(this.volume, currentViewData);\r\n        point.interior = getObjectValueByMappingString(this.pointColorMapping, currentViewData);\r\n        if (this instanceof Series) {\r\n            if (this.errorBar.visible) {\r\n                point.errorBarColor = getObjectValueByMappingString(this.errorBar.errorBarColorMapping, currentViewData);\r\n                point.verticalError = typeof this.errorBar.verticalError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalError, currentViewData) : this.errorBar.verticalError;\r\n                point.horizontalError = typeof this.errorBar.horizontalError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalError, currentViewData) : this.errorBar.horizontalError;\r\n                point.verticalNegativeError = typeof this.errorBar.verticalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalNegativeError, currentViewData) : this.errorBar.verticalNegativeError;\r\n                point.verticalPositiveError = typeof this.errorBar.verticalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalPositiveError, currentViewData) : this.errorBar.verticalPositiveError;\r\n                point.horizontalNegativeError = typeof this.errorBar.horizontalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalNegativeError, currentViewData) : this.errorBar.horizontalNegativeError;\r\n                point.horizontalPositiveError = typeof this.errorBar.horizontalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalPositiveError, currentViewData) : this.errorBar.horizontalPositiveError;\r\n            }\r\n            point.y = getObjectValueByMappingString(this.yName, currentViewData);\r\n            point.size = getObjectValueByMappingString(this.size, currentViewData);\r\n            point.text = getObjectValueByMappingString(textMappingName, currentViewData);\r\n            point.tooltip = getObjectValueByMappingString(this.tooltipMappingName, currentViewData);\r\n            if (this.isAdvancedColorSupported()) {\r\n                this.rangeColorName = this.colorName.length > 0 ? this.colorName : this.yName;\r\n                point.colorValue = getObjectValueByMappingString(this.rangeColorName, currentViewData);\r\n                point.interior = this.getPointFillColor(point.interior, point.colorValue);\r\n            }\r\n        }\r\n        return point;\r\n    };\r\n    SeriesBase.prototype.isAdvancedColorSupported = function () {\r\n        if (isNullOrUndefined(this.isAdvancedColor)) {\r\n            if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 &&\r\n                (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' ||\r\n                    this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\r\n                this.isAdvancedColor = true;\r\n            }\r\n            else {\r\n                this.isAdvancedColor = false;\r\n            }\r\n        }\r\n        return this.isAdvancedColor;\r\n    };\r\n    SeriesBase.prototype.getPointFillColor = function (pointFill, value) {\r\n        var color = pointFill;\r\n        if (value && this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0) {\r\n            for (var _i = 0, _a = this.chart.rangeColorSettings; _i < _a.length; _i++) {\r\n                var rangeMap = _a[_i];\r\n                if (value >= rangeMap.start && value <= rangeMap.end) {\r\n                    if (rangeMap.colors.length > 1) {\r\n                        color = getColorByValue(rangeMap, value);\r\n                    }\r\n                    else {\r\n                        color = rangeMap.colors[0];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return color;\r\n    };\r\n    /**\r\n     * Pushes a category point to the data collection.\r\n     *\r\n     * @param {string} mappingName - The name of the mapping.\r\n     * @param {Object} data - The data to be pushed.\r\n     * @returns {Object} - The data point at the specified index.\r\n     * @private\r\n     */\r\n    SeriesBase.prototype.getObjectValue = function (mappingName, data) {\r\n        return data[mappingName];\r\n    };\r\n    /**\r\n     * Sets the specified data point as an empty point at the given index.\r\n     *\r\n     * @private\r\n     * @param {Points} point - The data point to set as empty.\r\n     * @param {number} i - The index of the data point.\r\n     * @returns {void}\r\n     */\r\n    SeriesBase.prototype.setEmptyPoint = function (point, i) {\r\n        if (!this.findVisibility(point)) {\r\n            point.visible = true;\r\n            return null;\r\n        }\r\n        point.isEmpty = true;\r\n        var mode = this instanceof Series && point.isPointInRange ? this.emptyPointSettings.mode : 'Drop';\r\n        switch (mode) {\r\n            case 'Zero':\r\n                point.visible = true;\r\n                if (this instanceof Series && this.seriesType.indexOf('HighLow') > -1) {\r\n                    point.high = point.low = 0;\r\n                    if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\r\n                        point.open = point.close = 0;\r\n                    }\r\n                }\r\n                else {\r\n                    point.y = point.yValue = this.yData[i] = 0;\r\n                }\r\n                break;\r\n            case 'Average':\r\n                if (this instanceof Series) {\r\n                    if (this.seriesType.indexOf('HighLow') > -1) {\r\n                        point.high = (isNullOrUndefined(point.high) || isNaN(+point.high)) ? this.getAverage(this.high, i) : point.high;\r\n                        point.low = (isNullOrUndefined(point.low) || isNaN(+point.low)) ? this.getAverage(this.low, i) : point.low;\r\n                        if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\r\n                            point.open = (isNullOrUndefined(point.open) || isNaN(+point.open)) ? this.getAverage(this.open, i) : point.open;\r\n                            point.close = (isNullOrUndefined(point.close) || isNaN(+point.close)) ? this.getAverage(this.close, i) :\r\n                                point.close;\r\n                        }\r\n                    }\r\n                    else {\r\n                        point.y = point.yValue = this.yData[i] = this.getAverage(this.yName, i);\r\n                    }\r\n                }\r\n                point.visible = true;\r\n                break;\r\n            case 'Drop':\r\n            case 'Gap':\r\n                this.yData[i] = null;\r\n                point.visible = false;\r\n                break;\r\n        }\r\n    };\r\n    SeriesBase.prototype.findVisibility = function (point) {\r\n        var type = this instanceof Series ? this.seriesType : 'HighLowOpenClose';\r\n        var yValues;\r\n        var yAxisMin = this.yAxis.minimum;\r\n        var yAxisMax = this.yAxis.maximum;\r\n        switch (type) {\r\n            case 'XY':\r\n                if (this.chart.chartAreaType === 'PolarRadar' && ((!isNullOrUndefined(yAxisMin) && point.yValue < yAxisMin) ||\r\n                    (!isNullOrUndefined(yAxisMax) && point.yValue > yAxisMax))) {\r\n                    point.isPointInRange = false;\r\n                    return true;\r\n                }\r\n                this.setXYMinMax(point.yValue);\r\n                this.yData.push(point.yValue);\r\n                if (this instanceof Series && this.type === 'Bubble') {\r\n                    this.sizeMax = Math.max(this.sizeMax, (isNullOrUndefined(point.size) || isNaN(+point.size)) ? this.sizeMax\r\n                        : point.size);\r\n                }\r\n                return isNullOrUndefined(point.x) || (isNullOrUndefined(point.y) || isNaN(+point.y));\r\n            case 'HighLow':\r\n                this.setHiloMinMax(point.high, point.low);\r\n                return isNullOrUndefined(point.x) || (isNullOrUndefined(point.low) || isNaN(+point.low)) ||\r\n                    (isNullOrUndefined(point.high) || isNaN(+point.high));\r\n            case 'HighLowOpenClose':\r\n                this.setHiloMinMax(point.high, point.low);\r\n                return isNullOrUndefined(point.x) || (isNullOrUndefined(point.low) || isNaN(+point.low)) ||\r\n                    (isNullOrUndefined(point.open) || isNaN(+point.open)) || (isNullOrUndefined(point.close) || isNaN(+point.close))\r\n                    || (isNullOrUndefined(point.high) || isNaN(+point.high));\r\n            case 'BoxPlot':\r\n                yValues = (point.y || [null]).filter(function (value) {\r\n                    return !isNullOrUndefined(value) && !isNaN(value);\r\n                }).sort(function (a, b) {\r\n                    return a - b;\r\n                });\r\n                point.y = yValues;\r\n                this.yMin = Math.min(this.yMin, Math.min.apply(Math, yValues));\r\n                this.yMax = Math.max(this.yMax, Math.max.apply(Math, yValues));\r\n                return !yValues.length;\r\n        }\r\n    };\r\n    /**\r\n     * To get Y min max for the provided point seriesType XY.\r\n     *\r\n     * @param {number} yValue - The y value used to determine the minimum and maximum values for the x and y coordinates.\r\n     * @returns {void}\r\n     */\r\n    SeriesBase.prototype.setXYMinMax = function (yValue) {\r\n        var isLogAxis = (this.yAxis.valueType === 'Logarithmic' || this.xAxis.valueType === 'Logarithmic');\r\n        var isNegativeValue = yValue < 0 || this.yAxis.rangePadding === 'None';\r\n        var seriesMinY;\r\n        if (this.isRectTypeSeries && !setRange(this.yAxis)) {\r\n            seriesMinY = ((isLogAxis ? (yValue) : isNegativeValue ? yValue : 0));\r\n        }\r\n        else {\r\n            seriesMinY = yValue;\r\n        }\r\n        this.yMin = isLogAxis ?\r\n            Math.min(this.yMin, (isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) || (seriesMinY === 0) ||\r\n                (seriesMinY.toString() === '0') || (seriesMinY.toString() === '')) ? this.yMin : seriesMinY) :\r\n            Math.min(this.yMin, (isNullOrUndefined(seriesMinY) || isNaN(seriesMinY)) ? this.yMin : seriesMinY);\r\n        this.yMax = Math.max(this.yMax, (isNullOrUndefined(yValue) || isNaN(yValue)) ? this.yMax : yValue);\r\n    };\r\n    /**\r\n     * Sets the minimum and maximum values for the high and low values.\r\n     *\r\n     * @private\r\n     * @param {number} high - The high value used to determine the maximum value.\r\n     * @param {number} low - The low value used to determine the minimum value.\r\n     * @returns {void}\r\n     */\r\n    SeriesBase.prototype.setHiloMinMax = function (high, low) {\r\n        this.yMin = Math.min(this.yMin, Math.min((isNullOrUndefined(low) || isNaN(low)) ? this.yMin : low, (isNullOrUndefined(high) || isNaN(high)) ? this.yMin : high));\r\n        this.yMax = Math.max(this.yMax, Math.max((isNullOrUndefined(low) || isNaN(low)) ? this.yMax : low, (isNullOrUndefined(high) || isNaN(high)) ? this.yMax : high));\r\n    };\r\n    /**\r\n     * Finds the type of the series.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    SeriesBase.prototype.getSeriesType = function () {\r\n        var type;\r\n        if (this instanceof Series) {\r\n            var seriesType = this.chart.chartAreaType === 'PolarRadar' ? this.drawType : this.type;\r\n            if (seriesType) {\r\n                switch (seriesType) {\r\n                    case 'RangeColumn':\r\n                    case 'RangeArea':\r\n                    case 'RangeStepArea':\r\n                    case 'SplineRangeArea':\r\n                    case 'Hilo':\r\n                        type = 'HighLow';\r\n                        break;\r\n                    case 'HiloOpenClose':\r\n                    case 'Candle':\r\n                        type = 'HighLowOpenClose';\r\n                        break;\r\n                    case 'BoxAndWhisker':\r\n                        type = 'BoxPlot';\r\n                        break;\r\n                    default:\r\n                        type = 'XY';\r\n                }\r\n            }\r\n        }\r\n        this.seriesType = type;\r\n    };\r\n    /**\r\n     * Pushes category data into the series points.\r\n     *\r\n     * @protected\r\n     * @param {Points} point - The point to which category data will be pushed.\r\n     * @param {number} index - The index of the data point.\r\n     * @param {string} pointX - The x-value of the point.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    SeriesBase.prototype.pushCategoryData = function (point, index, pointX) {\r\n        if (!this.chart.tooltip.shared) {\r\n            if (!this.visible) {\r\n                return null;\r\n            }\r\n        }\r\n        if (!this.xAxis.isIndexed) {\r\n            if (this.xAxis.indexLabels[pointX] === undefined) {\r\n                this.xAxis.indexLabels[pointX] = this.xAxis.labels.length;\r\n                this.xAxis.labels.push(pointX);\r\n            }\r\n            point.xValue = this.xAxis.indexLabels[pointX];\r\n        }\r\n        else {\r\n            if (this.xAxis.labels[index]) {\r\n                this.xAxis.labels[index] += ', ' + pointX;\r\n            }\r\n            else {\r\n                this.xAxis.labels.push(pointX);\r\n            }\r\n            // this.xAxis.labels[index as number] ? this.xAxis.labels[index as number] += ', ' + pointX :\r\n            //     this.xAxis.labels.push(pointX);\r\n            point.xValue = index;\r\n        }\r\n    };\r\n    /**\r\n     * Gets the average value of a member in the specified data array or current view data.\r\n     *\r\n     * @param {string} member - The member whose average is to be calculated.\r\n     * @param {number} i - The index of the data point.\r\n     * @param {Object} data - The data array from which to calculate the average. Defaults to the current view data.\r\n     * @returns {number} - The average value of the specified member.\r\n     */\r\n    SeriesBase.prototype.getAverage = function (member, i, data) {\r\n        if (data === void 0) { data = this.currentViewData; }\r\n        var previous = data[i - 1] ? (data[i - 1][member] || 0) : 0;\r\n        var next = data[i + 1] ? (data[i + 1][member] || 0) : 0;\r\n        return (previous + next) / 2;\r\n    };\r\n    /**\r\n     * Refreshes the data manager for the provided chart.\r\n     *\r\n     * @param {Chart} chart - The chart whose data manager is to be refreshed.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    SeriesBase.prototype.refreshDataManager = function (chart) {\r\n        var _this = this;\r\n        this.chart = chart;\r\n        var dataSource;\r\n        var isAngular = 'isAngular';\r\n        if (chart[isAngular]) {\r\n            dataSource = Object.keys(this.dataSource).length ? this.dataSource : chart.dataSource;\r\n        }\r\n        else {\r\n            dataSource = this.dataSource || chart.dataSource;\r\n        }\r\n        if (!(dataSource instanceof DataManager) && isNullOrUndefined(this.query)) {\r\n            this.dataManagerSuccess({ result: dataSource, count: dataSource.length }, false);\r\n            return;\r\n        }\r\n        var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\r\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e); });\r\n    };\r\n    SeriesBase.prototype.dataManagerSuccess = function (e, isRemoteData) {\r\n        if (isRemoteData === void 0) { isRemoteData = true; }\r\n        this.currentViewData = e.count ? e.result : [];\r\n        this.chart.allowServerDataBinding = false;\r\n        if (this instanceof Series) {\r\n            if (this.chart.stockChart) {\r\n                this.chart.stockChart.series[this.index].localData = this.currentViewData;\r\n            }\r\n            var argsData = {\r\n                name: seriesRender, series: this, data: this.currentViewData, fill: this.interior\r\n            };\r\n            this.chart.trigger(seriesRender, argsData);\r\n            this.interior = argsData.fill;\r\n            this.currentViewData = argsData.data;\r\n        }\r\n        if (this.chart.stockChart && !(this instanceof Series)) {\r\n            this.currentViewData = this.chart.stockChart.findCurrentData(this.chart.stockChart.series[0].localData, this.chart.stockChart.series[0].xName);\r\n        }\r\n        this.processJsonData();\r\n        this.recordsCount = e.count;\r\n        this.refreshChart(isRemoteData);\r\n        this.currentViewData = null;\r\n    };\r\n    SeriesBase.prototype.refreshChart = function (isRemoteData) {\r\n        var chart = this.chart;\r\n        if (this instanceof Series) {\r\n            chart.visibleSeriesCount += isRemoteData ? 1 : 0;\r\n        }\r\n        chart.refreshTechnicalIndicator(this);\r\n        if (this instanceof Series && this.category !== 'TrendLine') {\r\n            for (var _i = 0, _a = this.trendlines; _i < _a.length; _i++) {\r\n                var trendline = _a[_i];\r\n                trendline.setDataSource(this, chart);\r\n            }\r\n        }\r\n        //if (chart.visibleSeries.length === (chart.visibleSeriesCount - chart.indicators.length)) {\r\n        if (chart.visibleSeries.length === (chart.visibleSeriesCount)) {\r\n            chart.refreshBound();\r\n            chart.trigger('loaded', { chart: chart.isBlazor ? {} : chart });\r\n            if (this.chart.stockChart && this.chart.stockChart.initialRender) {\r\n                this.chart.stockChart.initialRender = false;\r\n                this.chart.stockChart.stockChartDataManagerSuccess();\r\n            }\r\n        }\r\n        if (this instanceof Series) {\r\n            chart.visibleSeriesCount += isRemoteData ? 0 : 1;\r\n        }\r\n    };\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"xName\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"colorName\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"high\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"low\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"open\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"close\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"volume\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"pointColorMapping\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], SeriesBase.prototype, \"visible\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], SeriesBase.prototype, \"xAxisName\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], SeriesBase.prototype, \"yAxisName\", void 0);\r\n    __decorate([\r\n        Complex(null, Animation)\r\n    ], SeriesBase.prototype, \"animation\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], SeriesBase.prototype, \"fill\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], SeriesBase.prototype, \"width\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"dashArray\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], SeriesBase.prototype, \"dataSource\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], SeriesBase.prototype, \"query\", void 0);\r\n    __decorate([\r\n        Collection([], ChartSegment)\r\n    ], SeriesBase.prototype, \"segments\", void 0);\r\n    __decorate([\r\n        Property('X')\r\n    ], SeriesBase.prototype, \"segmentAxis\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], SeriesBase.prototype, \"enableComplexProperty\", void 0);\r\n    return SeriesBase;\r\n}(ChildProperty));\r\nexport { SeriesBase };\r\n/**\r\n * Configures the series in charts.\r\n *\r\n * @public\r\n */\r\nvar Series = /** @class */ (function (_super) {\r\n    __extends(Series, _super);\r\n    function Series(parent, propName, defaultValue, isArray) {\r\n        var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\r\n        _this.visibleSeriesCount = 0;\r\n        /** @private */\r\n        _this.category = 'Series';\r\n        /** @private */\r\n        _this.isRectSeries = false;\r\n        /** @private */\r\n        _this.drawPoints = [];\r\n        /** @private */\r\n        _this.lowDrawPoints = [];\r\n        /** @private */\r\n        _this.delayedAnimation = false;\r\n        /** @private */\r\n        _this.rangeColorName = _this.colorName.length > 0 ? _this.colorName : _this.yName;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Refresh the axis label.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Series.prototype.refreshAxisLabel = function () {\r\n        if (this.xAxis.valueType.indexOf('Category') === -1) {\r\n            return null;\r\n        }\r\n        this.xAxis.labels = [];\r\n        this.xAxis.indexLabels = {};\r\n        var option = {\r\n            skeleton: 'full',\r\n            type: 'dateTime'\r\n        };\r\n        var dateParser = this.chart.intl.getDateParser(option);\r\n        var dateFormatter = this.chart.intl.getDateFormat(option);\r\n        for (var _i = 0, _a = this.xAxis.series; _i < _a.length; _i++) {\r\n            var item = _a[_i];\r\n            if (item.visible && item.category !== 'TrendLine') {\r\n                item.xMin = Infinity;\r\n                item.xMax = -Infinity;\r\n                for (var _b = 0, _c = item.points; _b < _c.length; _b++) {\r\n                    var point = _c[_b];\r\n                    item.pushCategoryData(point, point.index, this.xAxis.valueType === \"DateTimeCategory\" ? Date.parse(dateParser(dateFormatter(point.x))).toString() : point.x);\r\n                    item.xMin = Math.min(item.xMin, point.xValue);\r\n                    item.xMax = Math.max(item.xMax, point.xValue);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To get the series collection.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Series.prototype.findSeriesCollection = function (column, row, isStack) {\r\n        var seriesCollection = [];\r\n        for (var _i = 0, _a = row.axes; _i < _a.length; _i++) {\r\n            var rowAxis = _a[_i];\r\n            for (var _b = 0, _c = rowAxis.series; _b < _c.length; _b++) {\r\n                var rowSeries = _c[_b];\r\n                for (var _d = 0, _e = column.axes; _d < _e.length; _d++) {\r\n                    var axis = _e[_d];\r\n                    for (var _f = 0, _g = axis.series; _f < _g.length; _f++) {\r\n                        var series = _g[_f];\r\n                        if (series === rowSeries && series.visible && this.rectSeriesInChart(series, isStack)) {\r\n                            seriesCollection.push(series);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return seriesCollection;\r\n    };\r\n    /**\r\n     * Checks if the series in the chart are rectangular.\r\n     *\r\n     * @param {Series} series - The series to be checked.\r\n     * @param {boolean} isStack - Specifies whether the series are stacked.\r\n     * @returns {boolean} - Returns true if the series in the chart are rectangular, otherwise false.\r\n     */\r\n    Series.prototype.rectSeriesInChart = function (series, isStack) {\r\n        var type = (series.type).toLowerCase();\r\n        return (type.indexOf('column') !== -1 || type.indexOf('bar') !== -1 || type.indexOf('histogram') !== -1 ||\r\n            type.indexOf('hiloopenclose') !== -1 || type.indexOf('candle') !== -1 || type.indexOf('pareto') !== -1 ||\r\n            type.indexOf('hilo') !== -1 || series.drawType.indexOf('Column') !== -1 ||\r\n            type.indexOf('waterfall') !== -1 || type.indexOf('boxandwhisker') !== -1 || isStack);\r\n    };\r\n    /**\r\n     * Calculates the stacked value for the chart.\r\n     *\r\n     * @param {boolean} isStacking100 - Specifies whether the stacking is 100%.\r\n     * @param {Chart} chart - The chart for which the stacked value is calculated.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Series.prototype.calculateStackedValue = function (isStacking100, chart) {\r\n        for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\r\n            var columnItem = _a[_i];\r\n            for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\r\n                var item = _c[_b];\r\n                this.calculateStackingValues(this.findSeriesCollection(columnItem, item, true), isStacking100);\r\n            }\r\n        }\r\n    };\r\n    Series.prototype.calculateStackingValues = function (seriesCollection, isStacking100) {\r\n        var startValues;\r\n        var endValues;\r\n        var yValues = [];\r\n        var lastPositive = [];\r\n        var lastNegative = [];\r\n        var stackingGroup;\r\n        var lastValue;\r\n        var value;\r\n        var frequencies = [];\r\n        if (isStacking100) {\r\n            frequencies = this.findFrequencies(seriesCollection);\r\n        }\r\n        var groupingValues = [];\r\n        var visiblePoints = [];\r\n        for (var i = 0; i < seriesCollection.length; i++) {\r\n            var series = seriesCollection[i];\r\n            if (!groupingValues[series.stackingGroup]) {\r\n                groupingValues[series.stackingGroup] = [];\r\n                groupingValues[series.stackingGroup].push(series);\r\n            }\r\n            else if (groupingValues[series.stackingGroup] !== undefined) {\r\n                groupingValues[series.stackingGroup].push(series);\r\n            }\r\n        }\r\n        var keys = Object.keys(groupingValues);\r\n        for (var k = 0; k < keys.length; k++) {\r\n            var stackingSeies = [];\r\n            var stackedValues = [];\r\n            var seriesCollection_2 = groupingValues[keys[k]];\r\n            for (var _i = 0, seriesCollection_1 = seriesCollection_2; _i < seriesCollection_1.length; _i++) {\r\n                var series = seriesCollection_1[_i];\r\n                if (series.type.indexOf('Stacking') !== -1 || (series.drawType.indexOf('Stacking') !== -1 &&\r\n                    (series.chart.chartAreaType === 'PolarRadar'))) {\r\n                    stackingGroup = (series.type.indexOf('StackingArea') !== -1) ? 'StackingArea100' :\r\n                        (series.type.indexOf('StackingLine') !== -1) ? 'StackingLine100' : series.stackingGroup;\r\n                    if (!lastPositive[stackingGroup]) {\r\n                        lastPositive[stackingGroup] = [];\r\n                        lastNegative[stackingGroup] = [];\r\n                    }\r\n                    yValues = series.yData;\r\n                    startValues = [];\r\n                    endValues = [];\r\n                    stackingSeies.push(series);\r\n                    visiblePoints = getVisiblePoints(series);\r\n                    for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\r\n                        lastValue = 0;\r\n                        value = +yValues[j]; // Fix for chart not rendering while y value is given as string issue\r\n                        if (lastPositive[stackingGroup][visiblePoints[j].xValue] === undefined) {\r\n                            lastPositive[stackingGroup][visiblePoints[j].xValue] = 0;\r\n                        }\r\n                        if (lastNegative[stackingGroup][visiblePoints[j].xValue] === undefined) {\r\n                            lastNegative[stackingGroup][visiblePoints[j].xValue] = 0;\r\n                        }\r\n                        if (isStacking100) {\r\n                            value = value / frequencies[stackingGroup][visiblePoints[j].xValue] * 100;\r\n                            value = !isNaN(value) ? value : 0;\r\n                            visiblePoints[j].percentage = +(value.toFixed(2));\r\n                        }\r\n                        else {\r\n                            stackedValues[j] = stackedValues[j] ?\r\n                                stackedValues[j] + Math.abs(value) : Math.abs(value);\r\n                        }\r\n                        if (value >= 0) {\r\n                            lastValue = lastPositive[stackingGroup][visiblePoints[j].xValue];\r\n                            lastPositive[stackingGroup][visiblePoints[j].xValue] += value;\r\n                        }\r\n                        else {\r\n                            lastValue = lastNegative[stackingGroup][visiblePoints[j].xValue];\r\n                            lastNegative[stackingGroup][visiblePoints[j].xValue] += value;\r\n                        }\r\n                        startValues.push(lastValue);\r\n                        endValues.push(value + lastValue);\r\n                        if (isStacking100 && (endValues[j] > 100)) {\r\n                            endValues[j] = 100;\r\n                        }\r\n                    }\r\n                    series.stackedValues = new StackValues(startValues, endValues);\r\n                    var isLogAxis = series.yAxis.valueType === 'Logarithmic';\r\n                    var isColumnBarType = (series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1);\r\n                    series.yMin = isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : (series.yAxis.startFromZero && series.yAxis.rangePadding === 'Auto' && series.yMin >= 0) ? 0 : parseFloat((Math.min.apply(0, isStacking100 ? startValues : endValues)).toFixed(10));\r\n                    series.yMax = Math.max.apply(0, endValues);\r\n                    if (series.yMin > Math.min.apply(0, endValues)) {\r\n                        series.yMin = (isStacking100) ? -100 :\r\n                            isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : Math.min.apply(0, endValues);\r\n                    }\r\n                    if (series.yMax < Math.max.apply(0, startValues)) {\r\n                        series.yMax = 0;\r\n                    }\r\n                }\r\n            }\r\n            this.findPercentageOfStacking(stackingSeies, stackedValues, isStacking100);\r\n        }\r\n    };\r\n    Series.prototype.findPercentageOfStacking = function (stackingSeies, values, isStacking100) {\r\n        for (var _i = 0, stackingSeies_1 = stackingSeies; _i < stackingSeies_1.length; _i++) {\r\n            var item = stackingSeies_1[_i];\r\n            if (isStacking100) {\r\n                return null;\r\n            }\r\n            for (var _a = 0, _b = getVisiblePoints(item); _a < _b.length; _a++) {\r\n                var point = _b[_a];\r\n                point.percentage = Math.abs(+(point.y / values[point.index] * 100).toFixed(2));\r\n            }\r\n        }\r\n    };\r\n    Series.prototype.findFrequencies = function (seriesCollection) {\r\n        var frequencies = [];\r\n        var stackingGroup;\r\n        var visiblePoints = [];\r\n        for (var _i = 0, seriesCollection_3 = seriesCollection; _i < seriesCollection_3.length; _i++) {\r\n            var series = seriesCollection_3[_i];\r\n            series.yAxis.isStack100 = series.type.indexOf('100') !== -1 ? true : false;\r\n            visiblePoints = getVisiblePoints(series);\r\n            if (series.type.indexOf('Stacking') !== -1) {\r\n                stackingGroup = (series.type.indexOf('StackingArea') !== -1) ? 'StackingArea100' :\r\n                    (series.type.indexOf('StackingLine') !== -1) ? 'StackingLine100' : series.stackingGroup;\r\n                if (!frequencies[stackingGroup]) {\r\n                    frequencies[stackingGroup] = [];\r\n                }\r\n                for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\r\n                    if (frequencies[stackingGroup][visiblePoints[j].xValue] === undefined) {\r\n                        frequencies[stackingGroup][visiblePoints[j].xValue] = 0;\r\n                    }\r\n                    if (series.yData[j] > 0) {\r\n                        frequencies[stackingGroup][visiblePoints[j].xValue] += series.yData[j];\r\n                    }\r\n                    else {\r\n                        frequencies[stackingGroup][visiblePoints[j].xValue] -= series.yData[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return frequencies;\r\n    };\r\n    /* private dataManagerFailure(e: { result: Object[] }): void {\r\n         this.currentViewData = [];\r\n         this.refreshChart();\r\n     }*/\r\n    /**\r\n     * Renders the series on the chart.\r\n     *\r\n     * @param {Chart} chart - The chart on which the series is rendered.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Series.prototype.renderSeries = function (chart) {\r\n        if (this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory') {\r\n            for (var i = 0; i < this.points.length; i++) {\r\n                var index = this.xAxis.labels.indexOf(Date.parse(this.points[i].x.toString()).toString());\r\n                this.points[i].xValue = index;\r\n                if (chart.series.length > 1) {\r\n                    this.xData[i] = index;\r\n                    this.xMin = (this.xMin > index) ? index : this.xMin;\r\n                    this.xMax = (this.xMax < index) ? index : this.xMax;\r\n                }\r\n            }\r\n            if (this instanceof Series && this.type.indexOf('Spline') > -1) {\r\n                var isArea = this.type.indexOf('Area') > -1;\r\n                var isRange = this.type.indexOf('Range') > -1;\r\n                this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\r\n            }\r\n        }\r\n        var seriesType = firstToLowerCase(this.type);\r\n        seriesType = seriesType.replace('100', '');\r\n        if (chart[seriesType + 'SeriesModule']) {\r\n            if (this.category !== 'Indicator' && this.category !== 'TrendLine') {\r\n                this.createSeriesElements(chart);\r\n            }\r\n            this.visiblePoints = getVisiblePoints(this);\r\n            chart[seriesType + 'SeriesModule'].render(this, this.xAxis, this.yAxis, chart.requireInvertedAxis);\r\n            if (this.category !== 'Indicator') {\r\n                if (this.errorBar.visible) {\r\n                    this.chart.errorBarModule.render(this);\r\n                }\r\n                if (this.marker.dataLabel.visible) {\r\n                    chart.dataLabelModule.render(this, this.chart, this.marker.dataLabel);\r\n                }\r\n                this.appendSeriesElement(chart.seriesElements, chart);\r\n            }\r\n            if (!this.chart.enableCanvas) {\r\n                this.performAnimation(chart, seriesType, this.errorBar, this.marker, this.marker.dataLabel);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates elements for the series on the chart.\r\n     *\r\n     * @param {Chart} chart - The chart for which series elements are created.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Series.prototype.createSeriesElements = function (chart) {\r\n        if (this.category !== 'Indicator') {\r\n            var elementId = chart.element.id;\r\n            // 8 for extend border value 5 for extend size value\r\n            var explodeValue = this.marker.border.width + 8 + 5;\r\n            var render = (this.type === 'Bubble') || (!this.marker.visible && chart.tooltip.shared && chart.enableCanvas) ?\r\n                chart.svgRenderer : chart.renderer;\r\n            var index = this.index === undefined ? this.category : this.index;\r\n            var markerHeight = void 0;\r\n            var markerWidth = void 0;\r\n            var options = void 0;\r\n            if (this.type === 'Scatter' || this.drawType === 'Scatter') {\r\n                markerHeight = (this.marker.height + explodeValue) / 2;\r\n                markerWidth = (this.marker.width + explodeValue) / 2;\r\n            }\r\n            else {\r\n                markerHeight = 0;\r\n                markerWidth = 0;\r\n            }\r\n            if (chart.chartAreaType === 'PolarRadar') {\r\n                var markerMaxValue = (this.drawType === 'Scatter') ? Math.max(this.marker.width, this.marker.height) : 0;\r\n                options = new CircleOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, this.clipRect.width / 2 + this.clipRect.x, this.clipRect.height / 2 + this.clipRect.y, chart.radius + markerMaxValue);\r\n                this.clipRectElement = appendClipElement(chart.redraw, options, render, 'drawCircularClipPath');\r\n            }\r\n            else {\r\n                options = new RectOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, {\r\n                    x: (this.xAxis.columnIndex === 0) ? -markerWidth : 0, y: (this.yAxis.rowIndex === chart.rows.length - 1) ? -markerHeight : 0,\r\n                    width: this.clipRect.width + (this.xAxis.columnIndex === chart.columns.length - 1 ? markerWidth * 2 : markerWidth),\r\n                    height: this.clipRect.height + (this.yAxis.rowIndex === 0 ? markerHeight * 2 : markerHeight)\r\n                });\r\n                this.clipRectElement = appendClipElement(chart.redraw, options, render);\r\n            }\r\n            var transform = chart.chartAreaType === 'Cartesian' ? 'translate(' + this.clipRect.x + ',' + (this.clipRect.y) + ')' : '';\r\n            this.symbolElement = null;\r\n            this.seriesElement = render.createGroup({\r\n                'id': elementId + 'SeriesGroup' + index,\r\n                'transform': transform,\r\n                'clip-path': 'url(#' + elementId + '_ChartSeriesClipRect_' + index + ')'\r\n            });\r\n            if (this.seriesElement) {\r\n                this.seriesElement.setAttribute('role', 'region');\r\n                this.seriesElement.setAttribute('aria-label', (this.name + ',' + this.type + ' series with ' + this.points.length + ' data points'));\r\n                this.seriesElement.setAttribute('aria-hidden', 'false');\r\n            }\r\n            if (!this.chart.enableCanvas || this.type === 'Bubble') {\r\n                this.seriesElement.setAttribute('tabindex', index === 0 ? '0' : !this.checkTabindex(chart.visibleSeries, index) ? '0' : '');\r\n                this.seriesElement.setAttribute('style', 'outline: none');\r\n                this.seriesElement.appendChild(this.clipRectElement);\r\n            }\r\n        }\r\n    };\r\n    Series.prototype.checkTabindex = function (visibleSeries, index) {\r\n        for (var i = 0; i < index; i++) {\r\n            if (visibleSeries[i].visible) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Appends a series element to the chart.\r\n     *\r\n     * @param {Element} element - The series element to append.\r\n     * @param {Chart} chart - The chart to which the series element will be appended.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Series.prototype.appendSeriesElement = function (element, chart) {\r\n        var marker = this.marker;\r\n        var dataLabel = marker.dataLabel;\r\n        var redraw = chart.redraw;\r\n        if (this.category !== 'TrendLine') {\r\n            appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\r\n            var errorBar = this.errorBar;\r\n            if (errorBar.visible) {\r\n                if (chart.chartAreaType === 'PolarRadar') {\r\n                    appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\r\n                }\r\n                else {\r\n                    appendChildElement(chart.enableCanvas, chart.seriesElements, this.errorBarElement, redraw);\r\n                }\r\n            }\r\n        }\r\n        if (marker.visible && (chart.chartAreaType === 'Cartesian' ||\r\n            ((this.drawType !== 'Scatter') && chart.chartAreaType === 'PolarRadar')) && this.type !== 'Scatter' &&\r\n            this.type !== 'Bubble' && this.type !== 'Candle' && this.type !== 'Hilo' && this.type !== 'HiloOpenClose' && this.symbolElement) {\r\n            appendChildElement(chart.enableCanvas, chart.seriesElements, this.symbolElement, redraw);\r\n        }\r\n        if (dataLabel.visible && this.textElement) {\r\n            appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.shapeElement, redraw);\r\n            appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.textElement, redraw);\r\n        }\r\n        if (!chart.enableCanvas && chart.dataLabelElements.hasChildNodes()) {\r\n            chart.seriesElements.appendChild(chart.dataLabelElements);\r\n        }\r\n    };\r\n    /**\r\n     * Performs animation for the specified chart elements.\r\n     *\r\n     * @param {Chart} chart - The chart for which animation is performed.\r\n     * @param {string} type - The type of animation to be performed.\r\n     * @param {ErrorBarSettingsModel} errorBar - The error bar settings for the animation.\r\n     * @param {MarkerSettingsModel} marker - The marker settings for the animation.\r\n     * @param {DataLabelSettingsModel} dataLabel - The data label settings for the animation.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Series.prototype.performAnimation = function (chart, type, errorBar, marker, dataLabel) {\r\n        if (((this.animation.enable && animationMode !== 'Disable') || animationMode === 'Enable') && chart.animateSeries && (!chart.stockChart || !chart.stockChart.isStockChartRendered)) {\r\n            chart[type + 'SeriesModule'].doAnimation(this);\r\n            if (errorBar.visible) {\r\n                chart.errorBarModule.doErrorBarAnimation(this);\r\n            }\r\n            if (marker.visible) {\r\n                chart.markerRender.doMarkerAnimation(this);\r\n            }\r\n            //to datalabel animation disabled for edge and IE\r\n            if (dataLabel.visible && Browser.info.name !== 'edge' && !Browser.isIE) {\r\n                chart.dataLabelModule.doDataLabelAnimation(this);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the color of a data point.\r\n     *\r\n     * @param {Points} point - The data point.\r\n     * @param {string} color - The color to set.\r\n     * @returns {string} - The updated color.\r\n     * @private\r\n     */\r\n    Series.prototype.setPointColor = function (point, color) {\r\n        color = point.interior || color;\r\n        return point.isEmpty ? (this.emptyPointSettings.fill || color) : color;\r\n    };\r\n    /**\r\n     * Sets the border color of a data point.\r\n     *\r\n     * @param {Points} point - The data point.\r\n     * @param {BorderModel} border - The border color to set.\r\n     * @returns {BorderModel} - The updated border color.\r\n     * @private\r\n     */\r\n    Series.prototype.setBorderColor = function (point, border) {\r\n        border.width = point.isEmpty ? (this.emptyPointSettings.border.width || border.width) : border.width;\r\n        border.color = point.isEmpty ? (this.emptyPointSettings.border.color || border.color) : border.color;\r\n        return border;\r\n    };\r\n    /**\r\n     * Adds a data point to the data source.\r\n     *\r\n     * @function addPoint\r\n     * @param {Object} dataPoint - The data point to be added.\r\n     * @param {number} duration - The duration for the animation.\r\n     * @returns {void}\r\n     */\r\n    Series.prototype.addPoint = function (dataPoint, duration) {\r\n        var yMin = this.yMin;\r\n        var yMax = this.yMax;\r\n        this.removeTrackballElements();\r\n        this.dataSource.push(dataPoint);\r\n        if (this.type === 'Radar' || this.type === 'Polar') {\r\n            return this.chart.refresh();\r\n        }\r\n        if (this.type === 'Histogram') {\r\n            this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\r\n                processInternalData(extend([], this.dataSource, null, true), this);\r\n            for (var i = 0; i < this.currentViewData.length; i++) {\r\n                this.updatePoint(i);\r\n            }\r\n        }\r\n        else {\r\n            this.currentViewData = this.dataSource;\r\n            var pointIndex = this.points.length === 0 ? 0 : this.points[this.points.length - 1].index + 1;\r\n            this.updatePoint(pointIndex);\r\n        }\r\n        if (this.category === 'Pareto') {\r\n            var dataSource = extend([], this.dataSource, null, true);\r\n            var series = this.chart.visibleSeries[this.index + this.chart.series.length];\r\n            series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(dataSource, this);\r\n            for (var i = 0; i < series.currentViewData.length; i++) {\r\n                if (!series.points[i]) {\r\n                    series.updatePoint(i);\r\n                }\r\n                series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\r\n            }\r\n        }\r\n        this.updateSplineValue();\r\n        this.chart.calculateStackValues();\r\n        this.chart.redraw = this.chart.enableAnimation;\r\n        var chartDuration = this.chart.duration;\r\n        this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\r\n        this.chart.animateSeries = false;\r\n        this.chart.pointsAdded = true;\r\n        if (this.chart.enableAnimation && (!(this.isRectSeries || this.type === 'Bubble' || this.type === 'Scatter')) && (this.type.indexOf('step') === -1)) {\r\n            if (this.marker && this.marker.visible && this.visible) {\r\n                for (var i = this.points.length - 2; i >= 0; i--) {\r\n                    if (this.points[i] && this.points[i].symbolLocations[0] !== undefined) {\r\n                        this.chart.markerRender.renderMarker(this, this.points[this.points.length - 2], this.points[i].symbolLocations[0], null, true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.yMin >= yMin && this.yMax <= yMax) {\r\n            if (!setRange(this.xAxis)) {\r\n                this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\r\n                this.xAxis.updateAxis();\r\n            }\r\n            this.chart.pointsAdded = false;\r\n            this.updateSeries(true, false);\r\n        }\r\n        if (this.yMin < yMin || this.yMax > yMax) {\r\n            this.updateChartAxis();\r\n            this.chart.pointsAdded = false;\r\n            this.updateSeries(true, true);\r\n        }\r\n        this.chart.redraw = false;\r\n        this.chart.duration = chartDuration;\r\n    };\r\n    /**\r\n     * Removes a data point from the series data source at the specified index.\r\n     *\r\n     * @function removePoint\r\n     * @param {number} index - The index of the data point to be removed.\r\n     * @param {number} duration - The duration for the animation.\r\n     * @returns {void}\r\n     */\r\n    Series.prototype.removePoint = function (index, duration) {\r\n        var dataSource = extend([], this.dataSource, null, true);\r\n        var chartDuration = this.chart.duration;\r\n        if (dataSource.length > 0 && index >= 0 && index < dataSource.length) {\r\n            dataSource.splice(index, 1);\r\n            this.dataSource.splice(index, 1);\r\n            this.removeTrackballElements(index);\r\n            if (this.type === 'Radar' || this.type === 'Polar') {\r\n                return this.chart.refresh();\r\n            }\r\n            this.chart.redraw = this.chart.enableAnimation;\r\n            this.chart.animateSeries = false;\r\n            this.chart.pointsAdded = true;\r\n            this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\r\n            if (this.type === 'Histogram') {\r\n                var length_1 = this.points.length;\r\n                this.points = [];\r\n                this.visiblePoints = [];\r\n                this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\r\n                    processInternalData(extend([], this.dataSource, null, true), this);\r\n                for (var i = 0; i < this.currentViewData.length; i++) {\r\n                    this.updatePoint(i);\r\n                }\r\n                if (length_1 > this.points.length) {\r\n                    this.removedPointIndex = index;\r\n                }\r\n            }\r\n            else {\r\n                this.removedPointIndex = index;\r\n                this.points.splice(index, 1);\r\n                this.visiblePoints.splice(index, 1);\r\n            }\r\n            this.yData = [];\r\n            this.xData = [];\r\n            var yMin = this.yMin;\r\n            var yMax = this.yMax;\r\n            this.yMin = Infinity;\r\n            this.xMin = Infinity;\r\n            this.yMax = -Infinity;\r\n            this.xMax = -Infinity;\r\n            if (this.xAxis.valueType.indexOf('Category') > -1 && this.chart.series.length === 1) {\r\n                this.xAxis.labels = [];\r\n                this.xAxis.indexLabels = {};\r\n            }\r\n            if (index === 0) {\r\n                this.chart.pointsRemoved = this.chart.enableAnimation;\r\n            }\r\n            for (var i = 0; i < this.points.length; i++) {\r\n                this.updatePointsAfterRemoval(i);\r\n            }\r\n            if (this.category === 'Pareto') {\r\n                var series = this.chart.visibleSeries[this.index + this.chart.series.length];\r\n                series.yMin = Infinity;\r\n                series.xMin = Infinity;\r\n                series.yMax = -Infinity;\r\n                series.xMax = -Infinity;\r\n                series.points.splice(index, 1);\r\n                series.visiblePoints.splice(index, 1);\r\n                series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.dataSource, this);\r\n                for (var i = 0; i < series.currentViewData.length; i++) {\r\n                    series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\r\n                    series.updatePointsAfterRemoval(i);\r\n                }\r\n            }\r\n            this.updateSplineValue();\r\n            this.chart.calculateStackValues();\r\n            if (!setRange(this.xAxis) && yMax === this.yMax && yMin === this.yMin) {\r\n                this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\r\n                this.xAxis.updateAxis();\r\n                this.createSeriesElements(this.chart);\r\n                this.chart.pointsAdded = false;\r\n                this.updateSeries(true, false);\r\n            }\r\n            else if (yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) {\r\n                this.updateChartAxis();\r\n                this.createSeriesElements(this.chart);\r\n                this.chart.pointsAdded = false;\r\n                this.updateSeries(true, true);\r\n            }\r\n        }\r\n        appendChildElement(this.chart.enableCanvas, this.chart.seriesElements, this.seriesElement, true);\r\n        this.chart.redraw = false;\r\n        this.chart.duration = chartDuration;\r\n        this.chart.pointsRemoved = false;\r\n        this.removedPointIndex = null;\r\n    };\r\n    Series.prototype.updatePointsAfterRemoval = function (index) {\r\n        var point = this.points[index];\r\n        var option = {\r\n            skeleton: 'full',\r\n            type: 'dateTime'\r\n        };\r\n        var dateParser = this.chart.intl.getDateParser(option);\r\n        var dateFormatter = this.chart.intl.getDateFormat(option);\r\n        if (this.xAxis.valueType === 'Category' && this.chart.series.length === 1) {\r\n            this.pushCategoryData(point, index, point.x);\r\n        }\r\n        else if (this.xAxis.valueType === 'DateTimeCategory' && this.chart.series.length === 1) {\r\n            this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\r\n        }\r\n        this.pushData(point, index);\r\n        this.setEmptyPoint(this.points[index], index);\r\n    };\r\n    /**\r\n     * Removes trackball elements from the series.\r\n     *\r\n     * @param {number} index - The index of the data point.\r\n     * @returns {void}\r\n     */\r\n    Series.prototype.removeTrackballElements = function (index) {\r\n        if (this.marker.visible) {\r\n            if (index !== undefined) {\r\n                var baseId = this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Trackball_';\r\n                var trackball0 = getElement(baseId + '0');\r\n                if (trackball0) {\r\n                    trackball0.remove();\r\n                }\r\n                var trackball1 = getElement(baseId + '1');\r\n                if (trackball1) {\r\n                    trackball1.remove();\r\n                }\r\n                var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Symbol');\r\n                if (symbolElement) {\r\n                    symbolElement.setAttribute('visibility', 'visible');\r\n                }\r\n            }\r\n            else {\r\n                var baseClassPattern = this.chart.element.id + '_EJ2-Trackball_Series_' + this.index + '_Point_';\r\n                var elements = document.querySelectorAll(\"[class*=\\\"\" + baseClassPattern + \"\\\"]\");\r\n                if (elements[0]) {\r\n                    var pointIndexMatch = elements[0].id.match(/_Point_(\\d+)_/);\r\n                    var pointIndex = pointIndexMatch ? parseInt(pointIndexMatch[1], 10) : null;\r\n                    elements[0].remove();\r\n                    var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + pointIndex + '_Symbol');\r\n                    if (symbolElement) {\r\n                        symbolElement.setAttribute('visibility', 'visible');\r\n                    }\r\n                }\r\n                if (elements[1]) {\r\n                    elements[1].remove();\r\n                }\r\n            }\r\n        }\r\n        if (this.chart.tooltip.enable) {\r\n            this.chart.tooltipModule.previousPoints = [];\r\n            var tooltipElement = getElement(this.chart.element.id + '_tooltip');\r\n            if (tooltipElement) {\r\n                tooltipElement.remove();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the data source with the provided data.\r\n     *\r\n     * @function setData\r\n     * @param {Object[]} data - An array of objects representing the data points.\r\n     * @param {number} duration - The duration for the animation.\r\n     * @returns {void}\r\n     */\r\n    Series.prototype.setData = function (data, duration) {\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        var yMin = this.yMin;\r\n        var yMax = this.yMax;\r\n        this.yMin = Infinity;\r\n        this.yMax = -Infinity;\r\n        var pointList = [];\r\n        var samePoints = false;\r\n        if (this.dataSource.length === data.length && !(this.type === 'Radar' || this.type === 'Polar')) {\r\n            samePoints = true;\r\n            this.yData = [];\r\n            if (this.type === 'Histogram' && this.dataSource.length === data.length) {\r\n                var newHistogramData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\r\n                    processInternalData(extend([], data, null, true), this);\r\n                this.currentViewData = newHistogramData;\r\n                for (var j = 0; j < newHistogramData.length; j++) {\r\n                    this.updatePoint(j);\r\n                }\r\n            }\r\n            else {\r\n                for (var i = 0; i < data.length; i++) {\r\n                    var newData = data[i][this.xName];\r\n                    var existingData = this.dataSource[i][this.xName];\r\n                    if (data[i][this.xName] instanceof Date) {\r\n                        newData = data[i][this.xName].getTime();\r\n                        existingData = this.dataSource[i][this.xName].getTime();\r\n                    }\r\n                    if (existingData === newData) {\r\n                        var point = this.points[i];\r\n                        var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\r\n                        var existingPoint = this.dataSource[i];\r\n                        var newPoint = data[i];\r\n                        if ((this.seriesType === 'XY' || this.seriesType === 'BoxPlot') && (existingPoint[this.yName] !== newPoint[this.yName] || existingPoint[this.size] !== newPoint[this.size])) {\r\n                            point.y = getObjectValueByMappingString(this.yName, newPoint);\r\n                            if (this.type === 'Bubble' && existingPoint[this.size] !== newPoint[this.size]) {\r\n                                point.size = getObjectValueByMappingString(this.size, newPoint);\r\n                            }\r\n                            pointList.push(i);\r\n                        }\r\n                        else if (existingPoint[this.high] !== newPoint[this.high] || existingPoint[this.low] !== newPoint[this.low] ||\r\n                            existingPoint[this.open] !== newPoint[this.open] || existingPoint[this.close] !== newPoint[this.close] ||\r\n                            existingPoint[this.volume] !== newPoint[this.volume]) {\r\n                            point.high = getObjectValueByMappingString(this.high, newPoint);\r\n                            point.low = getObjectValueByMappingString(this.low, newPoint);\r\n                            point.open = getObjectValueByMappingString(this.open, newPoint);\r\n                            point.close = getObjectValueByMappingString(this.close, newPoint);\r\n                            point.volume = getObjectValueByMappingString(this.volume, newPoint);\r\n                            pointList.push(i);\r\n                        }\r\n                        point.yValue = point.y;\r\n                        this.setEmptyPoint(point, i);\r\n                        this.dataSource[i] = data[i];\r\n                    }\r\n                    else {\r\n                        samePoints = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!samePoints) {\r\n            this.dataSource = data;\r\n        }\r\n        else {\r\n            this.chart.redraw = this.chart.enableAnimation;\r\n            this.chart.animateSeries = false;\r\n            this.chart.pointsAdded = true;\r\n            var chartDuration = this.chart.duration;\r\n            this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\r\n            this.chart.calculateStackValues();\r\n            this.updateSplineValue();\r\n            if (yMax === this.yMax && yMin === this.yMin && this.visible) {\r\n                this.chart.pointsAdded = false;\r\n                this.chart[firstToLowerCase((this.category === 'Pareto' ? 'Column' : this.type.replace('100', ''))) + 'SeriesModule'].updateDirection(this, pointList, this.chart.requireInvertedAxis);\r\n                if (this.chart.annotationModule) {\r\n                    this.chart.annotationModule.renderAnnotations(getElement((this.chart.element.id) + '_Secondary_Element'));\r\n                }\r\n            }\r\n            else if ((yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) && this.visible) {\r\n                var maximumLabelWidth = this.yAxis.maxLabelSize.width;\r\n                this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\r\n                if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\r\n                    this.chart.calculateBounds();\r\n                    this.chart.axisCollections.forEach(function (axis) {\r\n                        if (!setRange(axis)) {\r\n                            axis.updateAxis();\r\n                        }\r\n                    });\r\n                    this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\r\n                    this.chart.renderAreaBorder();\r\n                }\r\n                else {\r\n                    if (!setRange(this.yAxis)) {\r\n                        this.yAxis.updateAxis();\r\n                    }\r\n                    if (this.type === 'Histogram' && !setRange(this.xAxis)) {\r\n                        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\r\n                        this.xAxis.updateAxis();\r\n                    }\r\n                }\r\n                this.chart.pointsAdded = false;\r\n                this.updateSeries(false, true);\r\n                if (this.marker.dataLabel.visible && this.chart.dataLabelModule) {\r\n                    this.chart.dataLabelModule.doDataLabelAnimation(this);\r\n                }\r\n                if (this.chart.stripLineModule) {\r\n                    this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\r\n                }\r\n            }\r\n            this.chart.redraw = false;\r\n            this.chart.pointsRemoved = false;\r\n            this.chart.duration = chartDuration;\r\n        }\r\n    };\r\n    /**\r\n     * Updates the chart axes based on current data and axis bounds.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    Series.prototype.updateChartAxis = function () {\r\n        var maximumLabelWidth = this.yAxis.maxLabelSize.width;\r\n        this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\r\n        if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\r\n            this.chart.calculateBounds();\r\n            this.chart.axisCollections.forEach(function (axis) {\r\n                if (!setRange(axis)) {\r\n                    axis.updateAxis();\r\n                }\r\n            });\r\n            this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\r\n            this.chart.renderAreaBorder();\r\n        }\r\n        else {\r\n            if (!setRange(this.xAxis)) {\r\n                this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\r\n                this.xAxis.updateAxis();\r\n            }\r\n            if (!setRange(this.yAxis)) {\r\n                this.yAxis.updateAxis();\r\n            }\r\n        }\r\n        if (this.chart.stripLineModule) {\r\n            this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\r\n        }\r\n    };\r\n    Series.prototype.updateSeries = function (xAxis, yAxis) {\r\n        var seriesCollection = [];\r\n        if (xAxis && yAxis) {\r\n            var set = new Set(this.xAxis.series.concat(this.yAxis.series));\r\n            set.forEach(function (series) {\r\n                seriesCollection.push(series);\r\n            });\r\n        }\r\n        else {\r\n            seriesCollection = xAxis ? this.xAxis.series.slice() : this.yAxis.series.slice();\r\n        }\r\n        for (var _i = 0, seriesCollection_4 = seriesCollection; _i < seriesCollection_4.length; _i++) {\r\n            var series = seriesCollection_4[_i];\r\n            if (series.visible) {\r\n                findClipRect(series, this.chart.enableCanvas);\r\n                var transform = 'translate(' + this.clipRect.x + ',' + (this.clipRect.y) + ')';\r\n                series.seriesElement.setAttribute('transform', transform);\r\n                series.chart[firstToLowerCase(series.type.replace('100', '')) + 'SeriesModule'].render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, series.chart.enableAnimation);\r\n                if (series.marker.visible && (series.chart.chartAreaType === 'Cartesian') && series.type !== 'Scatter' && series.type !== 'Bubble'\r\n                    && series.type !== 'Candle' && series.type !== 'Hilo' && series.type !== 'HiloOpenClose' && series.symbolElement) {\r\n                    series.symbolElement.setAttribute('transform', transform);\r\n                    appendChildElement(series.chart.enableCanvas, series.chart.seriesElements, series.symbolElement, true);\r\n                }\r\n                if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\r\n                    series.chart.dataLabelCollections = [];\r\n                    series.chart.dataLabelModule.render(series, series.chart, series.marker.dataLabel);\r\n                    if (series.textElement) {\r\n                        if (series.shapeElement) {\r\n                            series.shapeElement.setAttribute('transform', transform);\r\n                        }\r\n                        appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.shapeElement, true);\r\n                        series.textElement.setAttribute('transform', transform);\r\n                        appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.textElement, true);\r\n                    }\r\n                }\r\n                if (series.chart.annotationModule) {\r\n                    series.chart.annotationModule.renderAnnotations(getElement((series.chart.element.id) + '_Secondary_Element'));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Series.prototype.updatePoint = function (index) {\r\n        var point = new Points();\r\n        var textMappingName = this instanceof Series && this.marker.dataLabel.name ?\r\n            this.marker.dataLabel.name : '';\r\n        var xName = (this instanceof Series && this.type === 'Histogram') ? 'x' : this.xName;\r\n        if (this.xAxis.valueType === 'Category') {\r\n            this.pushCategoryPoint(point, index, textMappingName, xName);\r\n        }\r\n        else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\r\n            var point_1 = this.points[index];\r\n            var option = {\r\n                skeleton: 'full',\r\n                type: 'dateTime'\r\n            };\r\n            var dateParser = this.chart.intl.getDateParser(option);\r\n            var dateFormatter = this.chart.intl.getDateFormat(option);\r\n            this.pushDateTimePoint(point_1, index, textMappingName, xName, dateParser, dateFormatter);\r\n        }\r\n        else {\r\n            this.pushDoublePoint(point, index, textMappingName, xName);\r\n        }\r\n    };\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"name\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"yName\", void 0);\r\n    __decorate([\r\n        Property('Line')\r\n    ], Series.prototype, \"drawType\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], Series.prototype, \"isClosed\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"bearFillColor\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"bullFillColor\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], Series.prototype, \"enableSolidCandles\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"size\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"binInterval\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], Series.prototype, \"showNormalDistribution\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"stackingGroup\", void 0);\r\n    __decorate([\r\n        Complex({ color: null, width: 0 }, Border)\r\n    ], Series.prototype, \"border\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], Series.prototype, \"opacity\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], Series.prototype, \"zOrder\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"groupName\", void 0);\r\n    __decorate([\r\n        Property('Line')\r\n    ], Series.prototype, \"type\", void 0);\r\n    __decorate([\r\n        Complex(null, ErrorBarSettings)\r\n    ], Series.prototype, \"errorBar\", void 0);\r\n    __decorate([\r\n        Complex(null, MarkerSettings)\r\n    ], Series.prototype, \"marker\", void 0);\r\n    __decorate([\r\n        Complex(null, ParetoOptions)\r\n    ], Series.prototype, \"paretoOptions\", void 0);\r\n    __decorate([\r\n        Complex({}, DragSettings)\r\n    ], Series.prototype, \"dragSettings\", void 0);\r\n    __decorate([\r\n        Collection([], Trendline)\r\n    ], Series.prototype, \"trendlines\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], Series.prototype, \"enableTooltip\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"tooltipFormat\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"tooltipMappingName\", void 0);\r\n    __decorate([\r\n        Property('SeriesType')\r\n    ], Series.prototype, \"legendShape\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], Series.prototype, \"legendImageUrl\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"selectionStyle\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"unSelectedStyle\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"nonHighlightStyle\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], Series.prototype, \"minRadius\", void 0);\r\n    __decorate([\r\n        Property(3)\r\n    ], Series.prototype, \"maxRadius\", void 0);\r\n    __decorate([\r\n        Property('Natural')\r\n    ], Series.prototype, \"splineType\", void 0);\r\n    __decorate([\r\n        Property(0.5)\r\n    ], Series.prototype, \"cardinalSplineTension\", void 0);\r\n    __decorate([\r\n        Complex(null, EmptyPointSettings)\r\n    ], Series.prototype, \"emptyPointSettings\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], Series.prototype, \"showMean\", void 0);\r\n    __decorate([\r\n        Property('Normal')\r\n    ], Series.prototype, \"boxPlotMode\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"columnWidth\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], Series.prototype, \"columnWidthInPixel\", void 0);\r\n    __decorate([\r\n        Property('Rectangle')\r\n    ], Series.prototype, \"columnFacet\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], Series.prototype, \"columnSpacing\", void 0);\r\n    __decorate([\r\n        Property('#C64E4A')\r\n    ], Series.prototype, \"negativeFillColor\", void 0);\r\n    __decorate([\r\n        Property('#4E81BC')\r\n    ], Series.prototype, \"summaryFillColor\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], Series.prototype, \"intermediateSumIndexes\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], Series.prototype, \"sumIndexes\", void 0);\r\n    __decorate([\r\n        Property('Left')\r\n    ], Series.prototype, \"step\", void 0);\r\n    __decorate([\r\n        Complex({ color: 'black', width: 2 }, Connector)\r\n    ], Series.prototype, \"connector\", void 0);\r\n    __decorate([\r\n        Complex(null, CornerRadius)\r\n    ], Series.prototype, \"cornerRadius\", void 0);\r\n    return Series;\r\n}(SeriesBase));\r\nexport { Series };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}