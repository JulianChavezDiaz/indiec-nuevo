{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * AccumulationChart legend\r\n */\nimport { Browser, isNullOrUndefined, Animation } from '@syncfusion/ej2-base';\nimport { pointByIndex } from '../model/acc-base';\nimport { BaseLegend, LegendOptions } from '../../common/legend/legend';\nimport { Rect, measureText } from '@syncfusion/ej2-svg-base';\nimport { textTrim, getElement, blazorTemplatesReset } from '../../common/utils/helper';\nimport { textWrap } from '../../common/utils/helper';\nimport { legendClick } from '../../common/model/constants';\n/**\r\n * AccumulationLegend module used to render `Legend` for Accumulation chart.\r\n */\nvar AccumulationLegend = /** @class */function (_super) {\n  __extends(AccumulationLegend, _super);\n  /**\r\n   * Constructor for Accumulation Legend.\r\n   *\r\n   * @param {AccumulationChart} chart Get a chart as a parameter.\r\n   */\n  function AccumulationLegend(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.library = _this;\n    _this.titleRect = new Rect(0, chart.margin.top, 0, 0);\n    _this.addEventListener();\n    return _this;\n  }\n  /**\r\n   * Binding events for legend module.\r\n   *\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\n    this.chart.on('click', this.click, this);\n  };\n  /**\r\n   * UnBinding events for legend module.\r\n   *\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('click', this.click);\n    this.chart.off(Browser.touchEndEvent, this.mouseEnd);\n  };\n  /**\r\n   * To handle mosue move for legend module.\r\n   *\r\n   * @param {MouseEvent} e - The mouse move event for legend module.\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.mouseMove = function (e) {\n    if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n      if (this.chart.accumulationHighlightModule && this.chart.highlightMode !== 'None') {\n        if (!this.chart.legendSettings.toggleVisibility) {\n          this.click(e);\n        }\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_', this.legendID + '_shape_', this.legendID + '_g_'];\n        var targetId = e.target.id;\n        var index = void 0;\n        for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n          var id = legendItemsId_1[_i];\n          if (targetId.indexOf(id) > -1) {\n            index = parseInt(targetId.split(id)[1], 10);\n            this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, index, e.target, e.type);\n            break;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * To handle mosue end for legend module.\r\n   *\r\n   * @param {MouseEvent} e - The mouse end event for legend module.\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.mouseEnd = function (e) {\n    if (this.chart.legendSettings.visible && this.chart.isTouch) {\n      this.move(e);\n    }\n  };\n  /**\r\n   * Get the legend options.\r\n   *\r\n   * @param {AccumulationChart} chart - The accumulation chart control.\r\n   * @param {AccumulationSeries[]} series - The array of series in the accumulation chart.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  AccumulationLegend.prototype.getLegendOptions = function (chart, series) {\n    this.legendCollections = [];\n    this.isRtlEnable = chart.enableRtl;\n    this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n    for (var i = 0; i < 1; i++) {\n      var seriesType = series[i].type;\n      if (seriesType === 'Pie' || seriesType === 'Doughnut') {\n        seriesType = series[i].innerRadius !== '0' && series[i].innerRadius !== '0%' ? 'Doughnut' : 'Pie';\n      }\n      for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\n        var point = _a[_i];\n        if (!isNullOrUndefined(point.x) && !isNullOrUndefined(point.y)) {\n          this.legendCollections.push(new LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, seriesType, point.legendImageUrl, null, null, point.index, series[i].index));\n        }\n      }\n      if (this.isReverse) {\n        this.legendCollections.reverse();\n      }\n    }\n  };\n  /**\r\n   * To find legend bounds for accumulation chart.\r\n   *\r\n   * @param {Size} availableSize - The available size for the legend.\r\n   * @param {Rect} legendBounds - The boundary of the legend.\r\n   * @param {LegendSettingsModel} legend - The legend settings.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  AccumulationLegend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\n    this.calculateLegendTitle(legend, legendBounds);\n    this.isTitle = legend.title ? true : false;\n    var extraWidth = 0;\n    var extraHeight = 0;\n    var legendOption;\n    this.chartRowCount = 1;\n    this.rowHeights = [];\n    this.columnHeights = [];\n    this.pageHeights = [];\n    var padding = legend.padding;\n    var titlePosition = legend.titlePosition;\n    var titlePlusArrowSpace = 0;\n    var arrowWidth = this.arrowWidth;\n    var arrowHeight = legend.enablePages ? 0 : this.arrowHeight;\n    if (!this.isVertical) {\n      extraHeight = !legend.height ? availableSize.height / 100 * 5 : 0;\n    } else {\n      extraWidth = !legend.width ? availableSize.width / 100 * 5 : 0;\n    }\n    legendBounds.width += extraWidth;\n    legendBounds.height += extraHeight;\n    var shapePadding = legend.shapePadding;\n    var maximumWidth = legend.maximumLabelWidth ? legend.maximumLabelWidth : 0;\n    var shapeWidth = legend.shapeWidth;\n    var rowWidth = 0;\n    var columnCount = 0;\n    var rowCount = 0;\n    var columnWidth = [];\n    var pageWidth = [];\n    var pageRowWidth = 0;\n    var previousRowCount = 0;\n    var columnHeight = 0;\n    var legendWidth = 0;\n    var titleHeight = 0;\n    this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\n    var legendEventArgs;\n    var render = false;\n    for (var i = 0; i < this.legendCollections.length; i++) {\n      legendOption = this.legendCollections[i];\n      legendEventArgs = {\n        fill: legendOption.fill,\n        text: legendOption.text,\n        shape: legendOption.shape,\n        name: 'legendRender',\n        cancel: false\n      };\n      this.chart.trigger('legendRender', legendEventArgs);\n      legendOption.render = !legendEventArgs.cancel;\n      legendOption.text = legendEventArgs.text.indexOf('&') > -1 ? this.convertHtmlEntities(legendEventArgs.text) : legendEventArgs.text;\n      legendOption.fill = legendEventArgs.fill;\n      legendOption.shape = legendEventArgs.shape;\n      legendOption.textSize = measureText(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n      if (legendOption.render && legendOption.text !== '') {\n        render = true;\n        legendWidth = shapeWidth + shapePadding + (legend.maximumLabelWidth ? legend.maximumLabelWidth : legendOption.textSize.width) + (!this.isVertical ? i === 0 ? padding : this.itemPadding : padding);\n        this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\n        if (this.isVertical) {\n          columnHeight += legendOption.textSize.height + (i === 0 ? padding : this.itemPadding);\n          if (columnHeight + this.itemPadding + arrowHeight / this.pageButtonSize > legendBounds.height) {\n            //columnHeight = Math.max(columnHeight, (rowCount * (this.maxItemHeight + padding)) + padding + arrowHeight);\n            rowWidth = rowWidth + maximumWidth;\n            pageRowWidth = this.getPageWidth(pageWidth);\n            this.totalPages = Math.max(rowCount, this.totalPages || 1);\n            if (rowWidth - pageRowWidth + legendWidth > legendBounds.width) {\n              pageWidth.push(rowWidth - pageRowWidth);\n              rowCount = this.rowHeights.length;\n              previousRowCount = rowCount;\n            } else {\n              rowCount = previousRowCount;\n            }\n            columnWidth.push(maximumWidth);\n            maximumWidth = 0;\n            columnHeight = legendOption.textSize.height + padding;\n            columnCount++;\n          }\n          this.columnHeights[columnCount] = (this.columnHeights[columnCount] ? this.columnHeights[columnCount] : 0) + legendOption.textSize.height + (i === 0 ? padding : this.itemPadding);\n          maximumWidth = Math.max(legendWidth, maximumWidth);\n          this.rowHeights[rowCount] = Math.max(this.rowHeights[rowCount] ? this.rowHeights[rowCount] : 0, legendOption.textSize.height);\n          rowCount++;\n        } else {\n          if (!legend.enablePages) {\n            // For new legend navigation support\n            titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n            titlePlusArrowSpace += arrowWidth;\n          }\n          rowWidth = rowWidth + legendWidth;\n          if (legendBounds.width < padding + rowWidth + titlePlusArrowSpace) {\n            maximumWidth = Math.max(maximumWidth, rowWidth + padding + titlePlusArrowSpace - legendWidth);\n            if (rowCount === 0 && legendWidth !== rowWidth) {\n              rowCount = 1;\n            }\n            rowWidth = legendWidth;\n            rowCount++;\n            columnCount = 0;\n            //  columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding + this.legendTitleSize.height;\n          }\n          var len = rowCount ? rowCount - 1 : rowCount;\n          this.rowHeights[len] = Math.max(this.rowHeights[len] ? this.rowHeights[len] : 0, legendOption.textSize.height);\n          this.columnHeights[columnCount] = (this.columnHeights[columnCount] ? this.columnHeights[columnCount] : 0) + legendOption.textSize.height + padding;\n          columnCount++;\n        }\n      }\n    }\n    titleHeight = titlePosition === 'Top' ? this.legendTitleSize.height : 0;\n    if (this.isVertical) {\n      rowWidth = rowWidth + maximumWidth;\n      this.isPaging = legendBounds.width < rowWidth + padding;\n      columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n      columnHeight = Math.max(columnHeight, (this.totalPages || 1) * (this.maxItemHeight + padding) + padding + arrowHeight);\n      this.isPaging = this.isPaging && this.totalPages > 1;\n      columnWidth.push(maximumWidth);\n    } else {\n      this.totalPages = this.totalRowCount = rowCount;\n      columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n      this.isPaging = legendBounds.height < columnHeight;\n      columnHeight = !legend.enablePages && this.isPaging ? this.maxItemHeight + padding + padding + titleHeight : columnHeight;\n      columnHeight = Math.max(columnHeight, this.maxItemHeight + padding + padding + titleHeight);\n      if (!this.isPaging) {\n        // For title left and right position\n        rowWidth += this.isTitle && titlePosition !== 'Top' ? this.fivePixel + this.legendTitleSize.width + this.fivePixel : 0;\n      }\n    }\n    this.maxColumns = 0; // initialization for max columns\n    var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) : Math.max(rowWidth + padding, maximumWidth);\n    if (render) {\n      // if any legends not skipped in event check\n      this.setBounds(width, columnHeight, legend, legendBounds);\n    } else {\n      this.setBounds(0, 0, legend, legendBounds);\n    }\n  };\n  AccumulationLegend.prototype.getPageWidth = function (pageWidth) {\n    var sum = 0;\n    for (var i = 0; i < pageWidth.length; i++) {\n      sum += pageWidth[i];\n    }\n    return sum;\n  };\n  /** @private */\n  AccumulationLegend.prototype.getLegendHeight = function (option, legend, bounds, rowWidth, legendHeight, padding) {\n    var legendWidth = option.textSize.width;\n    var textPadding = legend.shapePadding + padding * 2 + legend.shapeWidth;\n    switch (legend.textWrap) {\n      case 'Wrap':\n      case 'AnyWhere':\n        if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > bounds.width) {\n          option.textCollection = textWrap(option.text, legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, bounds.width - textPadding) : bounds.width - textPadding, legend.textStyle, this.chart.enableRtl, legend.textWrap === 'AnyWhere', null, this.chart.themeStyle.legendLabelFont);\n        } else {\n          option.textCollection.push(option.text);\n        }\n        option.textSize.height = legendHeight * option.textCollection.length;\n        break;\n    }\n  };\n  /**\r\n   * To find html entities value for legend.\r\n   *\r\n   * @param {string} legendText - The text of the legend item.\r\n   * @returns {string} - Converts the entities to normal string.\r\n   */\n  AccumulationLegend.prototype.convertHtmlEntities = function (legendText) {\n    var text = legendText.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&nbsp;', ' ').replace('&cent;', '¢').replace('&pound;', '£').replace('&yen;', '¥').replace('&euro;', '€').replace('&copy;', '©').replace('&reg;', '®');\n    text = text.replace('&#38;', '&').replace('&#60;', '<').replace('&#62;', '>').replace('&#34;', '\"').replace('&#160;', ' ').replace('&#162;', '¢').replace('&#163;', '£').replace('&#165;', '¥').replace('&#8364;', '€').replace('&#169;', '©').replace('&#174;', '®');\n    return text;\n  };\n  /**\r\n   * To find maximum column size for legend.\r\n   *\r\n   * @param {number[]} columns - Array containing the number of legend items in each column.\r\n   * @param {number} width - The total width available.\r\n   * @param {number} padding - The padding between legend items.\r\n   * @param {number} rowWidth - The width of each row of legend items.\r\n   * @returns {number} - Get a maximum columns.\r\n   */\n  AccumulationLegend.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\n    var maxPageColumn = padding;\n    this.maxColumnWidth = Math.max.apply(null, columns);\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n      var column = columns_1[_i];\n      maxPageColumn += this.maxColumnWidth;\n      this.maxColumns++;\n      if (maxPageColumn + padding > width) {\n        maxPageColumn -= this.maxColumnWidth;\n        this.maxColumns--;\n        break;\n      }\n    }\n    this.isPaging = maxPageColumn < rowWidth && this.totalPages > 1;\n    if (maxPageColumn === padding) {\n      maxPageColumn = width;\n    }\n    this.maxColumns = Math.max(1, this.maxColumns);\n    this.maxWidth = maxPageColumn;\n    var columnWidth = this.maxColumnWidth + padding;\n    var prevPage = 0;\n    var columnCount = this.columnHeights.length;\n    if (this.isPaging && this.isVertical) {\n      for (var i = 1; i < columnCount; i++) {\n        columnWidth += this.maxColumnWidth + padding;\n        if (columnWidth > width) {\n          this.pageHeights.push(prevPage !== i - 1 ? Math.max.apply(null, this.columnHeights.slice(prevPage, i - 1)) : this.columnHeights[prevPage]);\n          columnWidth = this.maxColumnWidth + padding;\n          prevPage = i;\n        }\n      }\n      this.pageHeights.push(prevPage !== columnCount - 1 ? Math.max.apply(null, this.columnHeights.slice(prevPage, columnCount - 1)) : this.columnHeights[prevPage]);\n      this.totalPages = this.pageHeights.length;\n    }\n    return maxPageColumn;\n  };\n  /**\r\n   * To find available width from legend x position.\r\n   *\r\n   * @param {number} tx - The x-coordinate of the legend.\r\n   * @param {number} width - The total width available.\r\n   * @returns {number} - Get a available width.\r\n   */\n  AccumulationLegend.prototype.getAvailWidth = function (tx, width) {\n    if (this.isVertical) {\n      width = this.maxWidth;\n    } else if (!this.isVertical && this.isPaging && !this.legend.enablePages) {\n      return width - tx - this.fivePixel;\n    }\n    return width - (this.legend.padding * 2 + this.legend.shapeWidth + this.legend.shapePadding);\n  };\n  /**\r\n   * To find legend rendering locations from legend items.\r\n   *\r\n   * @param {LegendOptions} legendOption - The legend options.\r\n   * @param {ChartLocation} start - The starting location for legend rendering.\r\n   * @param {number} textPadding - The padding between legend text items.\r\n   * @param {LegendOptions} prevLegend - The previous legend options.\r\n   * @param {Rect} rect - The bounding of the legend.\r\n   * @param {number} count - The count of legend items.\r\n   * @param {number} firstLegend - The index of the first legend item.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  AccumulationLegend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n    var padding = this.legend.padding;\n    var previousLocation = prevLegend.location.y + this.maxItemHeight / 4 + (prevLegend.textCollection.length > 0 ? (prevLegend.textCollection.length - 1) * this.maxItemHeight : 0);\n    if (this.isVertical) {\n      if (count === firstLegend || previousLocation + legendOption.textSize.height + padding > rect.y + rect.height) {\n        legendOption.location.x = prevLegend.location.x + (count === firstLegend ? 0 : !this.isRtlEnable ? this.maxColumnWidth : -this.maxColumnWidth);\n        legendOption.location.y = start.y;\n        var textStartLoc = this.legend.shapeWidth / 2 + padding;\n        this.pageXCollections.push(legendOption.location.x + (!this.isRtlEnable ? -textStartLoc : textStartLoc));\n      } else {\n        legendOption.location.x = prevLegend.location.x;\n        legendOption.location.y = prevLegend.location.y + prevLegend.textSize.height + this.itemPadding;\n      }\n    } else {\n      var textWidth = textPadding + (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth : prevLegend.textSize.width);\n      var previousBound = prevLegend.location.x + (!this.isRtlEnable ? textWidth : -textWidth);\n      if (this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth : legendOption.textSize.width) + textPadding - this.itemPadding, rect, this.legend.shapeWidth / 2)) {\n        if (count !== firstLegend) {\n          this.chartRowCount++;\n        }\n        legendOption.location.y = count === firstLegend ? prevLegend.location.y : prevLegend.location.y + this.rowHeights[this.chartRowCount - 2] + padding;\n        legendOption.location.x = start.x;\n      } else {\n        legendOption.location.y = prevLegend.location.y;\n        legendOption.location.x = count === firstLegend ? prevLegend.location.x : previousBound;\n      }\n    }\n    var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width);\n    availablewidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availablewidth) : availablewidth;\n    if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\n      legendOption.text = textTrim(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\n    }\n  };\n  /**\r\n   * Check whether legend group within legend bounds or not.\r\n   *\r\n   * @param {number} previousBound - The previous bound value.\r\n   * @param {number} textWidth - The width of the legend text.\r\n   * @param {Rect} legendBounds - The bounding of the legend.\r\n   * @param {number} shapeWidth - The width of the legend shape.\r\n   * @returns {boolean} - A boolean indicating whether the legend group is within the legend bounds.\r\n   */\n  AccumulationLegend.prototype.isWithinBounds = function (previousBound, textWidth, legendBounds, shapeWidth) {\n    if (!this.isRtlEnable) {\n      return previousBound + textWidth > legendBounds.x + legendBounds.width + shapeWidth;\n    } else {\n      return previousBound - textWidth < legendBounds.x - shapeWidth;\n    }\n  };\n  /**\r\n   * Finding the smart legend place according to positions.\r\n   *\r\n   * @param {Rect} labelBound - The bounding of the label.\r\n   * @param {Rect} legendBound - The bounding of the legend.\r\n   * @param {MarginModel} margin - The margin of the legend.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  AccumulationLegend.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\n    var space;\n    switch (this.position) {\n      case 'Left':\n        space = (labelBound.x - legendBound.width - margin.left) / 2;\n        legendBound.x = labelBound.x - legendBound.width < margin.left ? legendBound.x : labelBound.x - legendBound.width - space;\n        break;\n      case 'Right':\n        space = (this.chart.availableSize.width - margin.right - (labelBound.x + labelBound.width + legendBound.width)) / 2;\n        legendBound.x = labelBound.x + labelBound.width + legendBound.width > this.chart.availableSize.width - margin.right ? legendBound.x : labelBound.x + labelBound.width + space;\n        break;\n      case 'Top':\n        this.getTitleRect(this.chart);\n        space = (labelBound.y - legendBound.height - (this.titleRect.y + this.titleRect.height)) / 2;\n        legendBound.y = labelBound.y - legendBound.height < margin.top ? legendBound.y : labelBound.y - legendBound.height - space;\n        break;\n      case 'Bottom':\n        space = (this.chart.availableSize.height - margin.bottom - (labelBound.y + labelBound.height + legendBound.height)) / 2;\n        legendBound.y = labelBound.y + labelBound.height + legendBound.height > this.chart.availableSize.height - margin.bottom ? legendBound.y : labelBound.y + labelBound.height + space;\n        break;\n    }\n  };\n  /**\r\n   * To get title rect.\r\n   *\r\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.getTitleRect = function (accumulation) {\n    if (!accumulation.title) {\n      return null;\n    }\n    var titleSize = measureText(accumulation.title, accumulation.titleStyle, this.chart.themeStyle.legendTitleFont);\n    this.titleRect = new Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);\n  };\n  /**\r\n   * To get legend by index.\r\n   *\r\n   * @param {number} index - The index of the legend.\r\n   * @param {LegendOptions[]} legendCollections - The array of legend options.\r\n   * @returns {LegendOptions} - Return legend index.\r\n   */\n  AccumulationLegend.prototype.legendByIndex = function (index, legendCollections) {\n    for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\n      var legend = legendCollections_1[_i];\n      if (legend.pointIndex === index) {\n        return legend;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * To show or hide the legend on clicking the legend.\r\n   *\r\n   * @param {Event} event - The click event.\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.click = function (event) {\n    var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ? event.target.firstChild['id'] : event.target.id;\n    var chart = this.chart;\n    var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\n    // if ((<AccumulationChart>this.chart).accumulationSelectionModule) {\n    //     // const selectedDataIndexes: Indexes[] = <Indexes[]>extend([], (<AccumulationChart>this.chart)\n    //     //     .accumulationSelectionModule.selectedDataIndexes, null, true);\n    // }\n    this.chart.animateSeries = false;\n    for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\n      var id = legendItemsId_2[_i];\n      if (targetId.indexOf(id) > -1) {\n        var pointIndex = parseInt(targetId.split(id)[1], 10);\n        if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\n          var currentSeries = this.chart.visibleSeries[0];\n          var point = pointByIndex(pointIndex, currentSeries.points);\n          var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\n          var legendClickArgs = {\n            legendText: legendOption.text,\n            legendShape: legendOption.shape,\n            chart: chart.isBlazor ? {} : chart,\n            series: currentSeries,\n            point: point,\n            name: legendClick,\n            cancel: false\n          };\n          this.chart.trigger(legendClick, legendClickArgs);\n          if (!legendClickArgs.cancel) {\n            point.visible = !point.visible;\n            legendOption.visible = point.visible;\n            currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\n            chart.redraw = chart.enableAnimation;\n            this.sliceVisibility(pointIndex, point.visible);\n            chart.removeSvg();\n            //To remove the blazor templates\n            blazorTemplatesReset(chart);\n            this.chart.refreshPoints(currentSeries.points);\n            this.chart.calculateBounds();\n            this.chart.renderElements();\n          }\n        } else if (this.chart.accumulationSelectionModule && !isNaN(pointIndex)) {\n          this.chart.accumulationSelectionModule.legendSelection(this.chart, 0, pointIndex, event.target, event.type);\n        } else if (this.chart.accumulationHighlightModule && !isNaN(pointIndex)) {\n          this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, pointIndex, event.target, event.type);\n        }\n      }\n    }\n    if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n      this.changePage(event, true);\n    } else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n      this.changePage(event, false);\n    }\n    chart.redraw = false;\n  };\n  /**\r\n   * To translate the point elements by index and position.\r\n   *\r\n   * @param {number} index - The index of the point element.\r\n   * @param {boolean} isVisible - A boolean value indicating whether the point is visible.\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.sliceVisibility = function (index, isVisible) {\n    var sliceId = this.chart.element.id + '_Series_0_Point_';\n    if (this.chart.visibleSeries[0].dataLabel.visible) {\n      sliceId = this.chart.element.id + '_datalabel_Series_0_';\n      this.sliceAnimate(getElement(sliceId + 'g_' + index), isVisible);\n    }\n  };\n  /**\r\n   * Slice animation.\r\n   *\r\n   * @param {Element} element - slice element.\r\n   * @param {boolean} isVisible - boolean value of slice.\r\n   * @returns {void}\r\n   */\n  AccumulationLegend.prototype.sliceAnimate = function (element, isVisible) {\n    if (!element) {\n      return null;\n    }\n    new Animation({}).animate(element, {\n      duration: 300,\n      delay: 0,\n      name: isVisible ? 'FadeIn' : 'FadeOut',\n      end: function (args) {\n        args.element.style.visibility = isVisible ? 'visible' : 'hidden';\n      }\n    });\n  };\n  /**\r\n   * Get module name.\r\n   *\r\n   * @returns {string} - Return module name.\r\n   */\n  AccumulationLegend.prototype.getModuleName = function () {\n    return 'AccumulationLegend';\n  };\n  /**\r\n   * To destroy the Legend.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  AccumulationLegend.prototype.destroy = function () {\n    /**\r\n     * Destroy method calling here.\r\n     */\n    this.removeEventListener();\n  };\n  return AccumulationLegend;\n}(BaseLegend);\nexport { AccumulationLegend };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","isNullOrUndefined","Animation","pointByIndex","BaseLegend","LegendOptions","Rect","measureText","textTrim","getElement","blazorTemplatesReset","textWrap","legendClick","AccumulationLegend","_super","chart","_this","call","library","titleRect","margin","top","addEventListener","isDestroyed","on","touchMoveEvent","mouseMove","touchEndEvent","mouseEnd","click","removeEventListener","off","e","legendSettings","visible","isTouch","accumulationHighlightModule","highlightMode","toggleVisibility","legendItemsId","legendID","targetId","target","id","index","_i","legendItemsId_1","length","indexOf","parseInt","split","legendSelection","type","move","getLegendOptions","series","legendCollections","isRtlEnable","enableRtl","isReverse","reverse","i","seriesType","innerRadius","_a","points","point","x","y","push","toString","color","legendShape","legendImageUrl","getLegendBounds","availableSize","legendBounds","legend","calculateLegendTitle","isTitle","title","extraWidth","extraHeight","legendOption","chartRowCount","rowHeights","columnHeights","pageHeights","padding","titlePosition","titlePlusArrowSpace","arrowWidth","arrowHeight","enablePages","isVertical","height","width","shapePadding","maximumWidth","maximumLabelWidth","shapeWidth","rowWidth","columnCount","rowCount","columnWidth","pageWidth","pageRowWidth","previousRowCount","columnHeight","legendWidth","titleHeight","maxItemHeight","Math","max","textStyle","themeStyle","legendLabelFont","shapeHeight","legendEventArgs","render","fill","text","shape","name","cancel","trigger","convertHtmlEntities","textSize","itemPadding","getLegendHeight","pageButtonSize","getPageWidth","totalPages","legendTitleSize","fivePixel","len","isPaging","apply","totalRowCount","maxColumns","getMaxColumn","setBounds","sum","option","bounds","legendHeight","textPadding","textCollection","min","legendText","replace","columns","maxPageColumn","maxColumnWidth","columns_1","column","maxWidth","prevPage","slice","getAvailWidth","tx","getRenderPoint","start","prevLegend","rect","count","firstLegend","previousLocation","location","textStartLoc","pageXCollections","textWidth","previousBound","isWithinBounds","availablewidth","textOverflow","toFixed","getSmartLegendLocation","labelBound","legendBound","space","position","left","right","getTitleRect","bottom","accumulation","titleSize","titleStyle","legendTitleFont","legendByIndex","legendCollections_1","pointIndex","event","firstChild","animateSeries","legendItemsId_2","isNaN","currentSeries","visibleSeries","legendClickArgs","isBlazor","sumOfPoints","redraw","enableAnimation","sliceVisibility","removeSvg","refreshPoints","calculateBounds","renderElements","accumulationSelectionModule","changePage","isVisible","sliceId","element","dataLabel","sliceAnimate","animate","duration","delay","end","args","style","visibility","getModuleName","destroy"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/legend.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * AccumulationChart legend\r\n */\r\nimport { Browser, isNullOrUndefined, Animation } from '@syncfusion/ej2-base';\r\nimport { pointByIndex } from '../model/acc-base';\r\nimport { BaseLegend, LegendOptions } from '../../common/legend/legend';\r\nimport { Rect, measureText } from '@syncfusion/ej2-svg-base';\r\nimport { textTrim, getElement, blazorTemplatesReset } from '../../common/utils/helper';\r\nimport { textWrap } from '../../common/utils/helper';\r\nimport { legendClick } from '../../common/model/constants';\r\n/**\r\n * AccumulationLegend module used to render `Legend` for Accumulation chart.\r\n */\r\nvar AccumulationLegend = /** @class */ (function (_super) {\r\n    __extends(AccumulationLegend, _super);\r\n    /**\r\n     * Constructor for Accumulation Legend.\r\n     *\r\n     * @param {AccumulationChart} chart Get a chart as a parameter.\r\n     */\r\n    function AccumulationLegend(chart) {\r\n        var _this = _super.call(this, chart) || this;\r\n        _this.library = _this;\r\n        _this.titleRect = new Rect(0, chart.margin.top, 0, 0);\r\n        _this.addEventListener();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Binding events for legend module.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.addEventListener = function () {\r\n        if (this.chart.isDestroyed) {\r\n            return;\r\n        }\r\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\r\n        this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\r\n        this.chart.on('click', this.click, this);\r\n    };\r\n    /**\r\n     * UnBinding events for legend module.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.removeEventListener = function () {\r\n        if (this.chart.isDestroyed) {\r\n            return;\r\n        }\r\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\r\n        this.chart.off('click', this.click);\r\n        this.chart.off(Browser.touchEndEvent, this.mouseEnd);\r\n    };\r\n    /**\r\n     * To handle mosue move for legend module.\r\n     *\r\n     * @param {MouseEvent} e - The mouse move event for legend module.\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.mouseMove = function (e) {\r\n        if (this.chart.legendSettings.visible && !this.chart.isTouch) {\r\n            if (this.chart.accumulationHighlightModule && this.chart.highlightMode !== 'None') {\r\n                if (!this.chart.legendSettings.toggleVisibility) {\r\n                    this.click(e);\r\n                }\r\n                var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',\r\n                    this.legendID + '_shape_', this.legendID + '_g_'];\r\n                var targetId = e.target.id;\r\n                var index = void 0;\r\n                for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\r\n                    var id = legendItemsId_1[_i];\r\n                    if (targetId.indexOf(id) > -1) {\r\n                        index = parseInt(targetId.split(id)[1], 10);\r\n                        this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, index, e.target, e.type);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To handle mosue end for legend module.\r\n     *\r\n     * @param {MouseEvent} e - The mouse end event for legend module.\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.mouseEnd = function (e) {\r\n        if (this.chart.legendSettings.visible && this.chart.isTouch) {\r\n            this.move(e);\r\n        }\r\n    };\r\n    /**\r\n     * Get the legend options.\r\n     *\r\n     * @param {AccumulationChart} chart - The accumulation chart control.\r\n     * @param {AccumulationSeries[]} series - The array of series in the accumulation chart.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    AccumulationLegend.prototype.getLegendOptions = function (chart, series) {\r\n        this.legendCollections = [];\r\n        this.isRtlEnable = chart.enableRtl;\r\n        this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\r\n        for (var i = 0; i < 1; i++) {\r\n            var seriesType = series[i].type;\r\n            if (seriesType === 'Pie' || seriesType === 'Doughnut') {\r\n                seriesType = (series[i].innerRadius !== '0' && series[i].innerRadius !== '0%') ?\r\n                    'Doughnut' : 'Pie';\r\n            }\r\n            for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\r\n                var point = _a[_i];\r\n                if (!isNullOrUndefined(point.x) && !isNullOrUndefined(point.y)) {\r\n                    this.legendCollections.push(new LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, seriesType, point.legendImageUrl, null, null, point.index, series[i].index));\r\n                }\r\n            }\r\n            if (this.isReverse) {\r\n                this.legendCollections.reverse();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To find legend bounds for accumulation chart.\r\n     *\r\n     * @param {Size} availableSize - The available size for the legend.\r\n     * @param {Rect} legendBounds - The boundary of the legend.\r\n     * @param {LegendSettingsModel} legend - The legend settings.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    AccumulationLegend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\r\n        this.calculateLegendTitle(legend, legendBounds);\r\n        this.isTitle = legend.title ? true : false;\r\n        var extraWidth = 0;\r\n        var extraHeight = 0;\r\n        var legendOption;\r\n        this.chartRowCount = 1;\r\n        this.rowHeights = [];\r\n        this.columnHeights = [];\r\n        this.pageHeights = [];\r\n        var padding = legend.padding;\r\n        var titlePosition = legend.titlePosition;\r\n        var titlePlusArrowSpace = 0;\r\n        var arrowWidth = this.arrowWidth;\r\n        var arrowHeight = legend.enablePages ? 0 : this.arrowHeight;\r\n        if (!this.isVertical) {\r\n            extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;\r\n        }\r\n        else {\r\n            extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;\r\n        }\r\n        legendBounds.width += extraWidth;\r\n        legendBounds.height += extraHeight;\r\n        var shapePadding = legend.shapePadding;\r\n        var maximumWidth = legend.maximumLabelWidth ? legend.maximumLabelWidth : 0;\r\n        var shapeWidth = legend.shapeWidth;\r\n        var rowWidth = 0;\r\n        var columnCount = 0;\r\n        var rowCount = 0;\r\n        var columnWidth = [];\r\n        var pageWidth = [];\r\n        var pageRowWidth = 0;\r\n        var previousRowCount = 0;\r\n        var columnHeight = 0;\r\n        var legendWidth = 0;\r\n        var titleHeight = 0;\r\n        this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\r\n        var legendEventArgs;\r\n        var render = false;\r\n        for (var i = 0; i < this.legendCollections.length; i++) {\r\n            legendOption = this.legendCollections[i];\r\n            legendEventArgs = { fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,\r\n                name: 'legendRender', cancel: false };\r\n            this.chart.trigger('legendRender', legendEventArgs);\r\n            legendOption.render = !legendEventArgs.cancel;\r\n            legendOption.text = ((legendEventArgs.text.indexOf('&') > -1) ?\r\n                this.convertHtmlEntities(legendEventArgs.text) : legendEventArgs.text);\r\n            legendOption.fill = legendEventArgs.fill;\r\n            legendOption.shape = legendEventArgs.shape;\r\n            legendOption.textSize = measureText(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\r\n            if (legendOption.render && legendOption.text !== '') {\r\n                render = true;\r\n                legendWidth = shapeWidth + shapePadding + (legend.maximumLabelWidth ? legend.maximumLabelWidth :\r\n                    legendOption.textSize.width) + (!this.isVertical ? (i === 0) ? padding : this.itemPadding : padding);\r\n                this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\r\n                if (this.isVertical) {\r\n                    columnHeight += legendOption.textSize.height + ((i === 0) ? padding : this.itemPadding);\r\n                    if (columnHeight + this.itemPadding + (arrowHeight / this.pageButtonSize) > (legendBounds.height)) {\r\n                        //columnHeight = Math.max(columnHeight, (rowCount * (this.maxItemHeight + padding)) + padding + arrowHeight);\r\n                        rowWidth = rowWidth + maximumWidth;\r\n                        pageRowWidth = this.getPageWidth(pageWidth);\r\n                        this.totalPages = Math.max(rowCount, this.totalPages || 1);\r\n                        if ((rowWidth - pageRowWidth + legendWidth) > legendBounds.width) {\r\n                            pageWidth.push(rowWidth - pageRowWidth);\r\n                            rowCount = this.rowHeights.length;\r\n                            previousRowCount = rowCount;\r\n                        }\r\n                        else {\r\n                            rowCount = previousRowCount;\r\n                        }\r\n                        columnWidth.push(maximumWidth);\r\n                        maximumWidth = 0;\r\n                        columnHeight = legendOption.textSize.height + padding;\r\n                        columnCount++;\r\n                    }\r\n                    this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\r\n                        this.columnHeights[columnCount] : 0) + legendOption.textSize.height + ((i === 0) ?\r\n                        padding : this.itemPadding);\r\n                    maximumWidth = Math.max(legendWidth, maximumWidth);\r\n                    this.rowHeights[rowCount] = Math.max((this.rowHeights[rowCount] ?\r\n                        this.rowHeights[rowCount] : 0), legendOption.textSize.height);\r\n                    rowCount++;\r\n                }\r\n                else {\r\n                    if (!legend.enablePages) { // For new legend navigation support\r\n                        titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\r\n                        titlePlusArrowSpace += arrowWidth;\r\n                    }\r\n                    rowWidth = rowWidth + legendWidth;\r\n                    if (legendBounds.width < (padding + rowWidth + titlePlusArrowSpace)) {\r\n                        maximumWidth = Math.max(maximumWidth, (rowWidth + padding + titlePlusArrowSpace - legendWidth));\r\n                        if (rowCount === 0 && (legendWidth !== rowWidth)) {\r\n                            rowCount = 1;\r\n                        }\r\n                        rowWidth = legendWidth;\r\n                        rowCount++;\r\n                        columnCount = 0;\r\n                        //  columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding + this.legendTitleSize.height;\r\n                    }\r\n                    var len = rowCount ? (rowCount - 1) : rowCount;\r\n                    this.rowHeights[len] = Math.max((this.rowHeights[len] ? this.rowHeights[len] : 0), legendOption.textSize.height);\r\n                    this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\r\n                        this.columnHeights[columnCount] : 0) +\r\n                        legendOption.textSize.height + padding;\r\n                    columnCount++;\r\n                }\r\n            }\r\n        }\r\n        titleHeight = titlePosition === 'Top' ? this.legendTitleSize.height : 0;\r\n        if (this.isVertical) {\r\n            rowWidth = rowWidth + maximumWidth;\r\n            this.isPaging = legendBounds.width < (rowWidth + padding);\r\n            columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\r\n            columnHeight = Math.max(columnHeight, ((this.totalPages || 1) * (this.maxItemHeight + padding)) + padding + arrowHeight);\r\n            this.isPaging = this.isPaging && (this.totalPages > 1);\r\n            columnWidth.push(maximumWidth);\r\n        }\r\n        else {\r\n            this.totalPages = this.totalRowCount = rowCount;\r\n            columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\r\n            this.isPaging = legendBounds.height < columnHeight;\r\n            columnHeight = !legend.enablePages && this.isPaging ? (this.maxItemHeight + padding) + padding + titleHeight : columnHeight;\r\n            columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding + titleHeight);\r\n            if (!this.isPaging) { // For title left and right position\r\n                rowWidth += this.isTitle && titlePosition !== 'Top' ? (this.fivePixel + this.legendTitleSize.width + this.fivePixel) : 0;\r\n            }\r\n        }\r\n        this.maxColumns = 0; // initialization for max columns\r\n        var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) :\r\n            Math.max(rowWidth + padding, maximumWidth);\r\n        if (render) { // if any legends not skipped in event check\r\n            this.setBounds(width, columnHeight, legend, legendBounds);\r\n        }\r\n        else {\r\n            this.setBounds(0, 0, legend, legendBounds);\r\n        }\r\n    };\r\n    AccumulationLegend.prototype.getPageWidth = function (pageWidth) {\r\n        var sum = 0;\r\n        for (var i = 0; i < pageWidth.length; i++) {\r\n            sum += pageWidth[i];\r\n        }\r\n        return sum;\r\n    };\r\n    /** @private */\r\n    AccumulationLegend.prototype.getLegendHeight = function (option, legend, bounds, rowWidth, legendHeight, padding) {\r\n        var legendWidth = option.textSize.width;\r\n        var textPadding = legend.shapePadding + (padding * 2) + legend.shapeWidth;\r\n        switch (legend.textWrap) {\r\n            case 'Wrap':\r\n            case 'AnyWhere':\r\n                if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > bounds.width) {\r\n                    option.textCollection = textWrap(option.text, (legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, (bounds.width - textPadding)) :\r\n                        (bounds.width - textPadding)), legend.textStyle, this.chart.enableRtl, legend.textWrap === 'AnyWhere', null, this.chart.themeStyle.legendLabelFont);\r\n                }\r\n                else {\r\n                    option.textCollection.push(option.text);\r\n                }\r\n                option.textSize.height = (legendHeight * option.textCollection.length);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * To find html entities value for legend.\r\n     *\r\n     * @param {string} legendText - The text of the legend item.\r\n     * @returns {string} - Converts the entities to normal string.\r\n     */\r\n    AccumulationLegend.prototype.convertHtmlEntities = function (legendText) {\r\n        var text = (legendText).replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&nbsp;', ' ').replace('&cent;', '¢').replace('&pound;', '£').replace('&yen;', '¥').replace('&euro;', '€').replace('&copy;', '©').replace('&reg;', '®');\r\n        text = (text).replace('&#38;', '&').replace('&#60;', '<').replace('&#62;', '>').replace('&#34;', '\"').replace('&#160;', ' ').\r\n            replace('&#162;', '¢').replace('&#163;', '£').replace('&#165;', '¥').replace('&#8364;', '€').replace('&#169;', '©').replace('&#174;', '®');\r\n        return text;\r\n    };\r\n    /**\r\n     * To find maximum column size for legend.\r\n     *\r\n     * @param {number[]} columns - Array containing the number of legend items in each column.\r\n     * @param {number} width - The total width available.\r\n     * @param {number} padding - The padding between legend items.\r\n     * @param {number} rowWidth - The width of each row of legend items.\r\n     * @returns {number} - Get a maximum columns.\r\n     */\r\n    AccumulationLegend.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\r\n        var maxPageColumn = padding;\r\n        this.maxColumnWidth = Math.max.apply(null, columns);\r\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\r\n            var column = columns_1[_i];\r\n            maxPageColumn += this.maxColumnWidth;\r\n            this.maxColumns++;\r\n            if (maxPageColumn + padding > width) {\r\n                maxPageColumn -= this.maxColumnWidth;\r\n                this.maxColumns--;\r\n                break;\r\n            }\r\n        }\r\n        this.isPaging = (maxPageColumn < rowWidth) && (this.totalPages > 1);\r\n        if (maxPageColumn === padding) {\r\n            maxPageColumn = width;\r\n        }\r\n        this.maxColumns = Math.max(1, this.maxColumns);\r\n        this.maxWidth = maxPageColumn;\r\n        var columnWidth = this.maxColumnWidth + padding;\r\n        var prevPage = 0;\r\n        var columnCount = this.columnHeights.length;\r\n        if (this.isPaging && this.isVertical) {\r\n            for (var i = 1; i < columnCount; i++) {\r\n                columnWidth += (this.maxColumnWidth + padding);\r\n                if (columnWidth > width) {\r\n                    this.pageHeights.push(((prevPage !== i - 1) ? Math.max.apply(null, this.columnHeights.slice(prevPage, i - 1)) :\r\n                        this.columnHeights[prevPage]));\r\n                    columnWidth = this.maxColumnWidth + padding;\r\n                    prevPage = i;\r\n                }\r\n            }\r\n            this.pageHeights.push(((prevPage !== columnCount - 1) ?\r\n                Math.max.apply(null, this.columnHeights.slice(prevPage, columnCount - 1)) : this.columnHeights[prevPage]));\r\n            this.totalPages = this.pageHeights.length;\r\n        }\r\n        return maxPageColumn;\r\n    };\r\n    /**\r\n     * To find available width from legend x position.\r\n     *\r\n     * @param {number} tx - The x-coordinate of the legend.\r\n     * @param {number} width - The total width available.\r\n     * @returns {number} - Get a available width.\r\n     */\r\n    AccumulationLegend.prototype.getAvailWidth = function (tx, width) {\r\n        if (this.isVertical) {\r\n            width = this.maxWidth;\r\n        }\r\n        else if (!this.isVertical && this.isPaging && !this.legend.enablePages) {\r\n            return width - tx - this.fivePixel;\r\n        }\r\n        return width - ((this.legend.padding * 2) + this.legend.shapeWidth + this.legend.shapePadding);\r\n    };\r\n    /**\r\n     * To find legend rendering locations from legend items.\r\n     *\r\n     * @param {LegendOptions} legendOption - The legend options.\r\n     * @param {ChartLocation} start - The starting location for legend rendering.\r\n     * @param {number} textPadding - The padding between legend text items.\r\n     * @param {LegendOptions} prevLegend - The previous legend options.\r\n     * @param {Rect} rect - The bounding of the legend.\r\n     * @param {number} count - The count of legend items.\r\n     * @param {number} firstLegend - The index of the first legend item.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    AccumulationLegend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\r\n        var padding = this.legend.padding;\r\n        var previousLocation = prevLegend.location.y + this.maxItemHeight / 4 + (prevLegend.textCollection.length > 0 ?\r\n            ((prevLegend.textCollection.length - 1) * this.maxItemHeight) : 0);\r\n        if (this.isVertical) {\r\n            if (count === firstLegend || (previousLocation + legendOption.textSize.height + padding > (rect.y + rect.height))) {\r\n                legendOption.location.x = prevLegend.location.x + ((count === firstLegend) ? 0 : (!this.isRtlEnable) ?\r\n                    this.maxColumnWidth : -this.maxColumnWidth);\r\n                legendOption.location.y = start.y;\r\n                var textStartLoc = (this.legend.shapeWidth / 2) + padding;\r\n                this.pageXCollections.push(legendOption.location.x + ((!this.isRtlEnable) ? -textStartLoc : textStartLoc));\r\n            }\r\n            else {\r\n                legendOption.location.x = prevLegend.location.x;\r\n                legendOption.location.y = prevLegend.location.y + prevLegend.textSize.height + this.itemPadding;\r\n            }\r\n        }\r\n        else {\r\n            var textWidth = textPadding + (this.legend.maximumLabelWidth ?\r\n                this.legend.maximumLabelWidth : prevLegend.textSize.width);\r\n            var previousBound = prevLegend.location.x + ((!this.isRtlEnable) ? textWidth : -textWidth);\r\n            if (this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth :\r\n                legendOption.textSize.width) + textPadding - this.itemPadding, rect, this.legend.shapeWidth / 2)) {\r\n                if (count !== firstLegend) {\r\n                    this.chartRowCount++;\r\n                }\r\n                legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :\r\n                    prevLegend.location.y + this.rowHeights[(this.chartRowCount - 2)] + padding;\r\n                legendOption.location.x = start.x;\r\n            }\r\n            else {\r\n                legendOption.location.y = prevLegend.location.y;\r\n                legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;\r\n            }\r\n        }\r\n        var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width);\r\n        availablewidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availablewidth) : availablewidth;\r\n        if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\r\n            legendOption.text = textTrim(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\r\n        }\r\n    };\r\n    /**\r\n     * Check whether legend group within legend bounds or not.\r\n     *\r\n     * @param {number} previousBound - The previous bound value.\r\n     * @param {number} textWidth - The width of the legend text.\r\n     * @param {Rect} legendBounds - The bounding of the legend.\r\n     * @param {number} shapeWidth - The width of the legend shape.\r\n     * @returns {boolean} - A boolean indicating whether the legend group is within the legend bounds.\r\n     */\r\n    AccumulationLegend.prototype.isWithinBounds = function (previousBound, textWidth, legendBounds, shapeWidth) {\r\n        if (!this.isRtlEnable) {\r\n            return (previousBound + textWidth) > (legendBounds.x + legendBounds.width + shapeWidth);\r\n        }\r\n        else {\r\n            return (previousBound - textWidth) < (legendBounds.x - shapeWidth);\r\n        }\r\n    };\r\n    /**\r\n     * Finding the smart legend place according to positions.\r\n     *\r\n     * @param {Rect} labelBound - The bounding of the label.\r\n     * @param {Rect} legendBound - The bounding of the legend.\r\n     * @param {MarginModel} margin - The margin of the legend.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    AccumulationLegend.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\r\n        var space;\r\n        switch (this.position) {\r\n            case 'Left':\r\n                space = ((labelBound.x - legendBound.width) - margin.left) / 2;\r\n                legendBound.x = (labelBound.x - legendBound.width) < margin.left ? legendBound.x :\r\n                    (labelBound.x - legendBound.width) - space;\r\n                break;\r\n            case 'Right':\r\n                space = ((this.chart.availableSize.width - margin.right) - (labelBound.x + labelBound.width + legendBound.width)) / 2;\r\n                legendBound.x = (labelBound.x + labelBound.width + legendBound.width) > (this.chart.availableSize.width - margin.right) ?\r\n                    legendBound.x : (labelBound.x + labelBound.width + space);\r\n                break;\r\n            case 'Top':\r\n                this.getTitleRect(this.chart);\r\n                space = ((labelBound.y - legendBound.height) - (this.titleRect.y + this.titleRect.height)) / 2;\r\n                legendBound.y = (labelBound.y - legendBound.height) < margin.top ? legendBound.y :\r\n                    (labelBound.y - legendBound.height) - space;\r\n                break;\r\n            case 'Bottom':\r\n                space = ((this.chart.availableSize.height - margin.bottom) - (labelBound.y + labelBound.height + legendBound.height)) / 2;\r\n                legendBound.y = labelBound.y + labelBound.height + legendBound.height > (this.chart.availableSize.height - margin.bottom) ?\r\n                    legendBound.y : (labelBound.y + labelBound.height) + space;\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * To get title rect.\r\n     *\r\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.getTitleRect = function (accumulation) {\r\n        if (!accumulation.title) {\r\n            return null;\r\n        }\r\n        var titleSize = measureText(accumulation.title, accumulation.titleStyle, this.chart.themeStyle.legendTitleFont);\r\n        this.titleRect = new Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);\r\n    };\r\n    /**\r\n     * To get legend by index.\r\n     *\r\n     * @param {number} index - The index of the legend.\r\n     * @param {LegendOptions[]} legendCollections - The array of legend options.\r\n     * @returns {LegendOptions} - Return legend index.\r\n     */\r\n    AccumulationLegend.prototype.legendByIndex = function (index, legendCollections) {\r\n        for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\r\n            var legend = legendCollections_1[_i];\r\n            if (legend.pointIndex === index) {\r\n                return legend;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * To show or hide the legend on clicking the legend.\r\n     *\r\n     * @param {Event} event - The click event.\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.click = function (event) {\r\n        var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ?\r\n            event.target.firstChild['id'] : event.target.id;\r\n        var chart = this.chart;\r\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\r\n        // if ((<AccumulationChart>this.chart).accumulationSelectionModule) {\r\n        //     // const selectedDataIndexes: Indexes[] = <Indexes[]>extend([], (<AccumulationChart>this.chart)\r\n        //     //     .accumulationSelectionModule.selectedDataIndexes, null, true);\r\n        // }\r\n        this.chart.animateSeries = false;\r\n        for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\r\n            var id = legendItemsId_2[_i];\r\n            if (targetId.indexOf(id) > -1) {\r\n                var pointIndex = parseInt(targetId.split(id)[1], 10);\r\n                if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\r\n                    var currentSeries = this.chart.visibleSeries[0];\r\n                    var point = pointByIndex(pointIndex, currentSeries.points);\r\n                    var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\r\n                    var legendClickArgs = {\r\n                        legendText: legendOption.text, legendShape: legendOption.shape,\r\n                        chart: chart.isBlazor ? {} : chart, series: currentSeries, point: point,\r\n                        name: legendClick, cancel: false\r\n                    };\r\n                    this.chart.trigger(legendClick, legendClickArgs);\r\n                    if (!legendClickArgs.cancel) {\r\n                        point.visible = !point.visible;\r\n                        legendOption.visible = point.visible;\r\n                        currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\r\n                        chart.redraw = chart.enableAnimation;\r\n                        this.sliceVisibility(pointIndex, point.visible);\r\n                        chart.removeSvg();\r\n                        //To remove the blazor templates\r\n                        blazorTemplatesReset(chart);\r\n                        this.chart.refreshPoints(currentSeries.points);\r\n                        this.chart.calculateBounds();\r\n                        this.chart.renderElements();\r\n                    }\r\n                }\r\n                else if (this.chart.accumulationSelectionModule && !isNaN(pointIndex)) {\r\n                    this.chart.accumulationSelectionModule.legendSelection(this.chart, 0, pointIndex, event.target, event.type);\r\n                }\r\n                else if (this.chart.accumulationHighlightModule && !isNaN(pointIndex)) {\r\n                    this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, pointIndex, event.target, event.type);\r\n                }\r\n            }\r\n        }\r\n        if (targetId.indexOf(this.legendID + '_pageup') > -1) {\r\n            this.changePage(event, true);\r\n        }\r\n        else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\r\n            this.changePage(event, false);\r\n        }\r\n        chart.redraw = false;\r\n    };\r\n    /**\r\n     * To translate the point elements by index and position.\r\n     *\r\n     * @param {number} index - The index of the point element.\r\n     * @param {boolean} isVisible - A boolean value indicating whether the point is visible.\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.sliceVisibility = function (index, isVisible) {\r\n        var sliceId = this.chart.element.id + '_Series_0_Point_';\r\n        if (this.chart.visibleSeries[0].dataLabel.visible) {\r\n            sliceId = this.chart.element.id + '_datalabel_Series_0_';\r\n            this.sliceAnimate(getElement(sliceId + 'g_' + index), isVisible);\r\n        }\r\n    };\r\n    /**\r\n     * Slice animation.\r\n     *\r\n     * @param {Element} element - slice element.\r\n     * @param {boolean} isVisible - boolean value of slice.\r\n     * @returns {void}\r\n     */\r\n    AccumulationLegend.prototype.sliceAnimate = function (element, isVisible) {\r\n        if (!element) {\r\n            return null;\r\n        }\r\n        new Animation({}).animate(element, {\r\n            duration: 300,\r\n            delay: 0,\r\n            name: isVisible ? 'FadeIn' : 'FadeOut',\r\n            end: function (args) {\r\n                args.element.style.visibility = isVisible ? 'visible' : 'hidden';\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Get module name.\r\n     *\r\n     * @returns {string} - Return module name.\r\n     */\r\n    AccumulationLegend.prototype.getModuleName = function () {\r\n        return 'AccumulationLegend';\r\n    };\r\n    /**\r\n     * To destroy the Legend.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    AccumulationLegend.prototype.destroy = function () {\r\n        /**\r\n         * Destroy method calling here.\r\n         */\r\n        this.removeEventListener();\r\n    };\r\n    return AccumulationLegend;\r\n}(BaseLegend));\r\nexport { AccumulationLegend };\r\n"],"mappings":";AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJ;AACA;AACA;AACA,SAASI,OAAO,EAAEC,iBAAiB,EAAEC,SAAS,QAAQ,sBAAsB;AAC5E,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,UAAU,EAAEC,aAAa,QAAQ,4BAA4B;AACtE,SAASC,IAAI,EAAEC,WAAW,QAAQ,0BAA0B;AAC5D,SAASC,QAAQ,EAAEC,UAAU,EAAEC,oBAAoB,QAAQ,2BAA2B;AACtF,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D;AACA;AACA;AACA,IAAIC,kBAAkB,GAAG,aAAe,UAAUC,MAAM,EAAE;EACtD5B,SAAS,CAAC2B,kBAAkB,EAAEC,MAAM,CAAC;EACrC;AACJ;AACA;AACA;AACA;EACI,SAASD,kBAAkBA,CAACE,KAAK,EAAE;IAC/B,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC,IAAI,IAAI;IAC5CC,KAAK,CAACE,OAAO,GAAGF,KAAK;IACrBA,KAAK,CAACG,SAAS,GAAG,IAAIb,IAAI,CAAC,CAAC,EAAES,KAAK,CAACK,MAAM,CAACC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;IACrDL,KAAK,CAACM,gBAAgB,CAAC,CAAC;IACxB,OAAON,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIH,kBAAkB,CAACf,SAAS,CAACwB,gBAAgB,GAAG,YAAY;IACxD,IAAI,IAAI,CAACP,KAAK,CAACQ,WAAW,EAAE;MACxB;IACJ;IACA,IAAI,CAACR,KAAK,CAACS,EAAE,CAACxB,OAAO,CAACyB,cAAc,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC;IAC3D,IAAI,CAACX,KAAK,CAACS,EAAE,CAACxB,OAAO,CAAC2B,aAAa,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAAC;IACzD,IAAI,CAACb,KAAK,CAACS,EAAE,CAAC,OAAO,EAAE,IAAI,CAACK,KAAK,EAAE,IAAI,CAAC;EAC5C,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIhB,kBAAkB,CAACf,SAAS,CAACgC,mBAAmB,GAAG,YAAY;IAC3D,IAAI,IAAI,CAACf,KAAK,CAACQ,WAAW,EAAE;MACxB;IACJ;IACA,IAAI,CAACR,KAAK,CAACgB,GAAG,CAAC/B,OAAO,CAACyB,cAAc,EAAE,IAAI,CAACC,SAAS,CAAC;IACtD,IAAI,CAACX,KAAK,CAACgB,GAAG,CAAC,OAAO,EAAE,IAAI,CAACF,KAAK,CAAC;IACnC,IAAI,CAACd,KAAK,CAACgB,GAAG,CAAC/B,OAAO,CAAC2B,aAAa,EAAE,IAAI,CAACC,QAAQ,CAAC;EACxD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIf,kBAAkB,CAACf,SAAS,CAAC4B,SAAS,GAAG,UAAUM,CAAC,EAAE;IAClD,IAAI,IAAI,CAACjB,KAAK,CAACkB,cAAc,CAACC,OAAO,IAAI,CAAC,IAAI,CAACnB,KAAK,CAACoB,OAAO,EAAE;MAC1D,IAAI,IAAI,CAACpB,KAAK,CAACqB,2BAA2B,IAAI,IAAI,CAACrB,KAAK,CAACsB,aAAa,KAAK,MAAM,EAAE;QAC/E,IAAI,CAAC,IAAI,CAACtB,KAAK,CAACkB,cAAc,CAACK,gBAAgB,EAAE;UAC7C,IAAI,CAACT,KAAK,CAACG,CAAC,CAAC;QACjB;QACA,IAAIO,aAAa,GAAG,CAAC,IAAI,CAACC,QAAQ,GAAG,QAAQ,EAAE,IAAI,CAACA,QAAQ,GAAG,gBAAgB,EAC3E,IAAI,CAACA,QAAQ,GAAG,SAAS,EAAE,IAAI,CAACA,QAAQ,GAAG,KAAK,CAAC;QACrD,IAAIC,QAAQ,GAAGT,CAAC,CAACU,MAAM,CAACC,EAAE;QAC1B,IAAIC,KAAK,GAAG,KAAK,CAAC;QAClB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,eAAe,GAAGP,aAAa,EAAEM,EAAE,GAAGC,eAAe,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;UACjF,IAAIF,EAAE,GAAGG,eAAe,CAACD,EAAE,CAAC;UAC5B,IAAIJ,QAAQ,CAACO,OAAO,CAACL,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;YAC3BC,KAAK,GAAGK,QAAQ,CAACR,QAAQ,CAACS,KAAK,CAACP,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAC3C,IAAI,CAAC5B,KAAK,CAACqB,2BAA2B,CAACe,eAAe,CAAC,IAAI,CAACpC,KAAK,EAAE,CAAC,EAAE6B,KAAK,EAAEZ,CAAC,CAACU,MAAM,EAAEV,CAAC,CAACoB,IAAI,CAAC;YAC9F;UACJ;QACJ;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIvC,kBAAkB,CAACf,SAAS,CAAC8B,QAAQ,GAAG,UAAUI,CAAC,EAAE;IACjD,IAAI,IAAI,CAACjB,KAAK,CAACkB,cAAc,CAACC,OAAO,IAAI,IAAI,CAACnB,KAAK,CAACoB,OAAO,EAAE;MACzD,IAAI,CAACkB,IAAI,CAACrB,CAAC,CAAC;IAChB;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACInB,kBAAkB,CAACf,SAAS,CAACwD,gBAAgB,GAAG,UAAUvC,KAAK,EAAEwC,MAAM,EAAE;IACrE,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,WAAW,GAAG1C,KAAK,CAAC2C,SAAS;IAClC,IAAI,CAACC,SAAS,GAAG,CAAC,IAAI,CAACF,WAAW,IAAI1C,KAAK,CAACkB,cAAc,CAAC2B,OAAO;IAClE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,IAAIC,UAAU,GAAGP,MAAM,CAACM,CAAC,CAAC,CAACT,IAAI;MAC/B,IAAIU,UAAU,KAAK,KAAK,IAAIA,UAAU,KAAK,UAAU,EAAE;QACnDA,UAAU,GAAIP,MAAM,CAACM,CAAC,CAAC,CAACE,WAAW,KAAK,GAAG,IAAIR,MAAM,CAACM,CAAC,CAAC,CAACE,WAAW,KAAK,IAAI,GACzE,UAAU,GAAG,KAAK;MAC1B;MACA,KAAK,IAAIlB,EAAE,GAAG,CAAC,EAAEmB,EAAE,GAAGT,MAAM,CAACM,CAAC,CAAC,CAACI,MAAM,EAAEpB,EAAE,GAAGmB,EAAE,CAACjB,MAAM,EAAEF,EAAE,EAAE,EAAE;QAC1D,IAAIqB,KAAK,GAAGF,EAAE,CAACnB,EAAE,CAAC;QAClB,IAAI,CAAC5C,iBAAiB,CAACiE,KAAK,CAACC,CAAC,CAAC,IAAI,CAAClE,iBAAiB,CAACiE,KAAK,CAACE,CAAC,CAAC,EAAE;UAC5D,IAAI,CAACZ,iBAAiB,CAACa,IAAI,CAAC,IAAIhE,aAAa,CAAC6D,KAAK,CAACC,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAEJ,KAAK,CAACK,KAAK,EAAEhB,MAAM,CAACM,CAAC,CAAC,CAACW,WAAW,EAAEN,KAAK,CAAChC,OAAO,EAAE4B,UAAU,EAAEI,KAAK,CAACO,cAAc,EAAE,IAAI,EAAE,IAAI,EAAEP,KAAK,CAACtB,KAAK,EAAEW,MAAM,CAACM,CAAC,CAAC,CAACjB,KAAK,CAAC,CAAC;QACrM;MACJ;MACA,IAAI,IAAI,CAACe,SAAS,EAAE;QAChB,IAAI,CAACH,iBAAiB,CAACI,OAAO,CAAC,CAAC;MACpC;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/C,kBAAkB,CAACf,SAAS,CAAC4E,eAAe,GAAG,UAAUC,aAAa,EAAEC,YAAY,EAAEC,MAAM,EAAE;IAC1F,IAAI,CAACC,oBAAoB,CAACD,MAAM,EAAED,YAAY,CAAC;IAC/C,IAAI,CAACG,OAAO,GAAGF,MAAM,CAACG,KAAK,GAAG,IAAI,GAAG,KAAK;IAC1C,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,YAAY;IAChB,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAIC,OAAO,GAAGX,MAAM,CAACW,OAAO;IAC5B,IAAIC,aAAa,GAAGZ,MAAM,CAACY,aAAa;IACxC,IAAIC,mBAAmB,GAAG,CAAC;IAC3B,IAAIC,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,IAAIC,WAAW,GAAGf,MAAM,CAACgB,WAAW,GAAG,CAAC,GAAG,IAAI,CAACD,WAAW;IAC3D,IAAI,CAAC,IAAI,CAACE,UAAU,EAAE;MAClBZ,WAAW,GAAG,CAACL,MAAM,CAACkB,MAAM,GAAKpB,aAAa,CAACoB,MAAM,GAAG,GAAG,GAAI,CAAC,GAAI,CAAC;IACzE,CAAC,MACI;MACDd,UAAU,GAAG,CAACJ,MAAM,CAACmB,KAAK,GAAKrB,aAAa,CAACqB,KAAK,GAAG,GAAG,GAAI,CAAC,GAAI,CAAC;IACtE;IACApB,YAAY,CAACoB,KAAK,IAAIf,UAAU;IAChCL,YAAY,CAACmB,MAAM,IAAIb,WAAW;IAClC,IAAIe,YAAY,GAAGpB,MAAM,CAACoB,YAAY;IACtC,IAAIC,YAAY,GAAGrB,MAAM,CAACsB,iBAAiB,GAAGtB,MAAM,CAACsB,iBAAiB,GAAG,CAAC;IAC1E,IAAIC,UAAU,GAAGvB,MAAM,CAACuB,UAAU;IAClC,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAI,CAACC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC1G,WAAW,CAAC,aAAa,EAAEsE,MAAM,CAACqC,SAAS,EAAE,IAAI,CAACnG,KAAK,CAACoG,UAAU,CAACC,eAAe,CAAC,CAACrB,MAAM,EAAElB,MAAM,CAACwC,WAAW,CAAC;IAC7I,IAAIC,eAAe;IACnB,IAAIC,MAAM,GAAG,KAAK;IAClB,KAAK,IAAI1D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,iBAAiB,CAACT,MAAM,EAAEc,CAAC,EAAE,EAAE;MACpDsB,YAAY,GAAG,IAAI,CAAC3B,iBAAiB,CAACK,CAAC,CAAC;MACxCyD,eAAe,GAAG;QAAEE,IAAI,EAAErC,YAAY,CAACqC,IAAI;QAAEC,IAAI,EAAEtC,YAAY,CAACsC,IAAI;QAAEC,KAAK,EAAEvC,YAAY,CAACuC,KAAK;QAC3FC,IAAI,EAAE,cAAc;QAAEC,MAAM,EAAE;MAAM,CAAC;MACzC,IAAI,CAAC7G,KAAK,CAAC8G,OAAO,CAAC,cAAc,EAAEP,eAAe,CAAC;MACnDnC,YAAY,CAACoC,MAAM,GAAG,CAACD,eAAe,CAACM,MAAM;MAC7CzC,YAAY,CAACsC,IAAI,GAAKH,eAAe,CAACG,IAAI,CAACzE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GACxD,IAAI,CAAC8E,mBAAmB,CAACR,eAAe,CAACG,IAAI,CAAC,GAAGH,eAAe,CAACG,IAAK;MAC1EtC,YAAY,CAACqC,IAAI,GAAGF,eAAe,CAACE,IAAI;MACxCrC,YAAY,CAACuC,KAAK,GAAGJ,eAAe,CAACI,KAAK;MAC1CvC,YAAY,CAAC4C,QAAQ,GAAGxH,WAAW,CAAC4E,YAAY,CAACsC,IAAI,EAAE5C,MAAM,CAACqC,SAAS,EAAE,IAAI,CAACnG,KAAK,CAACoG,UAAU,CAACC,eAAe,CAAC;MAC/G,IAAIjC,YAAY,CAACoC,MAAM,IAAIpC,YAAY,CAACsC,IAAI,KAAK,EAAE,EAAE;QACjDF,MAAM,GAAG,IAAI;QACbV,WAAW,GAAGT,UAAU,GAAGH,YAAY,IAAIpB,MAAM,CAACsB,iBAAiB,GAAGtB,MAAM,CAACsB,iBAAiB,GAC1FhB,YAAY,CAAC4C,QAAQ,CAAC/B,KAAK,CAAC,IAAI,CAAC,IAAI,CAACF,UAAU,GAAIjC,CAAC,KAAK,CAAC,GAAI2B,OAAO,GAAG,IAAI,CAACwC,WAAW,GAAGxC,OAAO,CAAC;QACxG,IAAI,CAACyC,eAAe,CAAC9C,YAAY,EAAEN,MAAM,EAAED,YAAY,EAAEyB,QAAQ,EAAE,IAAI,CAACU,aAAa,EAAEvB,OAAO,CAAC;QAC/F,IAAI,IAAI,CAACM,UAAU,EAAE;UACjBc,YAAY,IAAIzB,YAAY,CAAC4C,QAAQ,CAAChC,MAAM,IAAKlC,CAAC,KAAK,CAAC,GAAI2B,OAAO,GAAG,IAAI,CAACwC,WAAW,CAAC;UACvF,IAAIpB,YAAY,GAAG,IAAI,CAACoB,WAAW,GAAIpC,WAAW,GAAG,IAAI,CAACsC,cAAe,GAAItD,YAAY,CAACmB,MAAO,EAAE;YAC/F;YACAM,QAAQ,GAAGA,QAAQ,GAAGH,YAAY;YAClCQ,YAAY,GAAG,IAAI,CAACyB,YAAY,CAAC1B,SAAS,CAAC;YAC3C,IAAI,CAAC2B,UAAU,GAAGpB,IAAI,CAACC,GAAG,CAACV,QAAQ,EAAE,IAAI,CAAC6B,UAAU,IAAI,CAAC,CAAC;YAC1D,IAAK/B,QAAQ,GAAGK,YAAY,GAAGG,WAAW,GAAIjC,YAAY,CAACoB,KAAK,EAAE;cAC9DS,SAAS,CAACpC,IAAI,CAACgC,QAAQ,GAAGK,YAAY,CAAC;cACvCH,QAAQ,GAAG,IAAI,CAAClB,UAAU,CAACtC,MAAM;cACjC4D,gBAAgB,GAAGJ,QAAQ;YAC/B,CAAC,MACI;cACDA,QAAQ,GAAGI,gBAAgB;YAC/B;YACAH,WAAW,CAACnC,IAAI,CAAC6B,YAAY,CAAC;YAC9BA,YAAY,GAAG,CAAC;YAChBU,YAAY,GAAGzB,YAAY,CAAC4C,QAAQ,CAAChC,MAAM,GAAGP,OAAO;YACrDc,WAAW,EAAE;UACjB;UACA,IAAI,CAAChB,aAAa,CAACgB,WAAW,CAAC,GAAG,CAAC,IAAI,CAAChB,aAAa,CAACgB,WAAW,CAAC,GAC9D,IAAI,CAAChB,aAAa,CAACgB,WAAW,CAAC,GAAG,CAAC,IAAInB,YAAY,CAAC4C,QAAQ,CAAChC,MAAM,IAAKlC,CAAC,KAAK,CAAC,GAC/E2B,OAAO,GAAG,IAAI,CAACwC,WAAW,CAAC;UAC/B9B,YAAY,GAAGc,IAAI,CAACC,GAAG,CAACJ,WAAW,EAAEX,YAAY,CAAC;UAClD,IAAI,CAACb,UAAU,CAACkB,QAAQ,CAAC,GAAGS,IAAI,CAACC,GAAG,CAAE,IAAI,CAAC5B,UAAU,CAACkB,QAAQ,CAAC,GAC3D,IAAI,CAAClB,UAAU,CAACkB,QAAQ,CAAC,GAAG,CAAC,EAAGpB,YAAY,CAAC4C,QAAQ,CAAChC,MAAM,CAAC;UACjEQ,QAAQ,EAAE;QACd,CAAC,MACI;UACD,IAAI,CAAC1B,MAAM,CAACgB,WAAW,EAAE;YAAE;YACvBH,mBAAmB,GAAG,IAAI,CAACX,OAAO,IAAIU,aAAa,KAAK,KAAK,GAAG,IAAI,CAAC4C,eAAe,CAACrC,KAAK,GAAG,IAAI,CAACsC,SAAS,GAAG,CAAC;YAC/G5C,mBAAmB,IAAIC,UAAU;UACrC;UACAU,QAAQ,GAAGA,QAAQ,GAAGQ,WAAW;UACjC,IAAIjC,YAAY,CAACoB,KAAK,GAAIR,OAAO,GAAGa,QAAQ,GAAGX,mBAAoB,EAAE;YACjEQ,YAAY,GAAGc,IAAI,CAACC,GAAG,CAACf,YAAY,EAAGG,QAAQ,GAAGb,OAAO,GAAGE,mBAAmB,GAAGmB,WAAY,CAAC;YAC/F,IAAIN,QAAQ,KAAK,CAAC,IAAKM,WAAW,KAAKR,QAAS,EAAE;cAC9CE,QAAQ,GAAG,CAAC;YAChB;YACAF,QAAQ,GAAGQ,WAAW;YACtBN,QAAQ,EAAE;YACVD,WAAW,GAAG,CAAC;YACf;UACJ;UACA,IAAIiC,GAAG,GAAGhC,QAAQ,GAAIA,QAAQ,GAAG,CAAC,GAAIA,QAAQ;UAC9C,IAAI,CAAClB,UAAU,CAACkD,GAAG,CAAC,GAAGvB,IAAI,CAACC,GAAG,CAAE,IAAI,CAAC5B,UAAU,CAACkD,GAAG,CAAC,GAAG,IAAI,CAAClD,UAAU,CAACkD,GAAG,CAAC,GAAG,CAAC,EAAGpD,YAAY,CAAC4C,QAAQ,CAAChC,MAAM,CAAC;UAChH,IAAI,CAACT,aAAa,CAACgB,WAAW,CAAC,GAAG,CAAC,IAAI,CAAChB,aAAa,CAACgB,WAAW,CAAC,GAC9D,IAAI,CAAChB,aAAa,CAACgB,WAAW,CAAC,GAAG,CAAC,IACnCnB,YAAY,CAAC4C,QAAQ,CAAChC,MAAM,GAAGP,OAAO;UAC1Cc,WAAW,EAAE;QACjB;MACJ;IACJ;IACAQ,WAAW,GAAGrB,aAAa,KAAK,KAAK,GAAG,IAAI,CAAC4C,eAAe,CAACtC,MAAM,GAAG,CAAC;IACvE,IAAI,IAAI,CAACD,UAAU,EAAE;MACjBO,QAAQ,GAAGA,QAAQ,GAAGH,YAAY;MAClC,IAAI,CAACsC,QAAQ,GAAG5D,YAAY,CAACoB,KAAK,GAAIK,QAAQ,GAAGb,OAAQ;MACzDoB,YAAY,GAAGI,IAAI,CAACC,GAAG,CAACwB,KAAK,CAAC,IAAI,EAAE,IAAI,CAACnD,aAAa,CAAC,GAAGE,OAAO,GAAGI,WAAW,GAAGkB,WAAW;MAC7FF,YAAY,GAAGI,IAAI,CAACC,GAAG,CAACL,YAAY,EAAG,CAAC,IAAI,CAACwB,UAAU,IAAI,CAAC,KAAK,IAAI,CAACrB,aAAa,GAAGvB,OAAO,CAAC,GAAIA,OAAO,GAAGI,WAAW,CAAC;MACxH,IAAI,CAAC4C,QAAQ,GAAG,IAAI,CAACA,QAAQ,IAAK,IAAI,CAACJ,UAAU,GAAG,CAAE;MACtD5B,WAAW,CAACnC,IAAI,CAAC6B,YAAY,CAAC;IAClC,CAAC,MACI;MACD,IAAI,CAACkC,UAAU,GAAG,IAAI,CAACM,aAAa,GAAGnC,QAAQ;MAC/CK,YAAY,GAAGI,IAAI,CAACC,GAAG,CAACwB,KAAK,CAAC,IAAI,EAAE,IAAI,CAACnD,aAAa,CAAC,GAAGE,OAAO,GAAGI,WAAW,GAAGkB,WAAW;MAC7F,IAAI,CAAC0B,QAAQ,GAAG5D,YAAY,CAACmB,MAAM,GAAGa,YAAY;MAClDA,YAAY,GAAG,CAAC/B,MAAM,CAACgB,WAAW,IAAI,IAAI,CAAC2C,QAAQ,GAAI,IAAI,CAACzB,aAAa,GAAGvB,OAAO,GAAIA,OAAO,GAAGsB,WAAW,GAAGF,YAAY;MAC3HA,YAAY,GAAGI,IAAI,CAACC,GAAG,CAACL,YAAY,EAAG,IAAI,CAACG,aAAa,GAAGvB,OAAO,GAAIA,OAAO,GAAGsB,WAAW,CAAC;MAC7F,IAAI,CAAC,IAAI,CAAC0B,QAAQ,EAAE;QAAE;QAClBnC,QAAQ,IAAI,IAAI,CAACtB,OAAO,IAAIU,aAAa,KAAK,KAAK,GAAI,IAAI,CAAC6C,SAAS,GAAG,IAAI,CAACD,eAAe,CAACrC,KAAK,GAAG,IAAI,CAACsC,SAAS,GAAI,CAAC;MAC5H;IACJ;IACA,IAAI,CAACK,UAAU,GAAG,CAAC,CAAC,CAAC;IACrB,IAAI3C,KAAK,GAAG,IAAI,CAACF,UAAU,GAAG,IAAI,CAAC8C,YAAY,CAACpC,WAAW,EAAE5B,YAAY,CAACoB,KAAK,EAAER,OAAO,EAAEa,QAAQ,GAAGb,OAAO,CAAC,GACzGwB,IAAI,CAACC,GAAG,CAACZ,QAAQ,GAAGb,OAAO,EAAEU,YAAY,CAAC;IAC9C,IAAIqB,MAAM,EAAE;MAAE;MACV,IAAI,CAACsB,SAAS,CAAC7C,KAAK,EAAEY,YAAY,EAAE/B,MAAM,EAAED,YAAY,CAAC;IAC7D,CAAC,MACI;MACD,IAAI,CAACiE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEhE,MAAM,EAAED,YAAY,CAAC;IAC9C;EACJ,CAAC;EACD/D,kBAAkB,CAACf,SAAS,CAACqI,YAAY,GAAG,UAAU1B,SAAS,EAAE;IAC7D,IAAIqC,GAAG,GAAG,CAAC;IACX,KAAK,IAAIjF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,SAAS,CAAC1D,MAAM,EAAEc,CAAC,EAAE,EAAE;MACvCiF,GAAG,IAAIrC,SAAS,CAAC5C,CAAC,CAAC;IACvB;IACA,OAAOiF,GAAG;EACd,CAAC;EACD;EACAjI,kBAAkB,CAACf,SAAS,CAACmI,eAAe,GAAG,UAAUc,MAAM,EAAElE,MAAM,EAAEmE,MAAM,EAAE3C,QAAQ,EAAE4C,YAAY,EAAEzD,OAAO,EAAE;IAC9G,IAAIqB,WAAW,GAAGkC,MAAM,CAAChB,QAAQ,CAAC/B,KAAK;IACvC,IAAIkD,WAAW,GAAGrE,MAAM,CAACoB,YAAY,GAAIT,OAAO,GAAG,CAAE,GAAGX,MAAM,CAACuB,UAAU;IACzE,QAAQvB,MAAM,CAAClE,QAAQ;MACnB,KAAK,MAAM;MACX,KAAK,UAAU;QACX,IAAIkG,WAAW,GAAGhC,MAAM,CAACsB,iBAAiB,IAAIU,WAAW,GAAGR,QAAQ,GAAG2C,MAAM,CAAChD,KAAK,EAAE;UACjF+C,MAAM,CAACI,cAAc,GAAGxI,QAAQ,CAACoI,MAAM,CAACtB,IAAI,EAAG5C,MAAM,CAACsB,iBAAiB,GAAGa,IAAI,CAACoC,GAAG,CAACvE,MAAM,CAACsB,iBAAiB,EAAG6C,MAAM,CAAChD,KAAK,GAAGkD,WAAY,CAAC,GACrIF,MAAM,CAAChD,KAAK,GAAGkD,WAAY,EAAGrE,MAAM,CAACqC,SAAS,EAAE,IAAI,CAACnG,KAAK,CAAC2C,SAAS,EAAEmB,MAAM,CAAClE,QAAQ,KAAK,UAAU,EAAE,IAAI,EAAE,IAAI,CAACI,KAAK,CAACoG,UAAU,CAACC,eAAe,CAAC;QAC3J,CAAC,MACI;UACD2B,MAAM,CAACI,cAAc,CAAC9E,IAAI,CAAC0E,MAAM,CAACtB,IAAI,CAAC;QAC3C;QACAsB,MAAM,CAAChB,QAAQ,CAAChC,MAAM,GAAIkD,YAAY,GAAGF,MAAM,CAACI,cAAc,CAACpG,MAAO;QACtE;IACR;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIlC,kBAAkB,CAACf,SAAS,CAACgI,mBAAmB,GAAG,UAAUuB,UAAU,EAAE;IACrE,IAAI5B,IAAI,GAAI4B,UAAU,CAAEC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;IAC9Q7B,IAAI,GAAIA,IAAI,CAAE6B,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CACxHA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC9I,OAAO7B,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5G,kBAAkB,CAACf,SAAS,CAAC8I,YAAY,GAAG,UAAUW,OAAO,EAAEvD,KAAK,EAAER,OAAO,EAAEa,QAAQ,EAAE;IACrF,IAAImD,aAAa,GAAGhE,OAAO;IAC3B,IAAI,CAACiE,cAAc,GAAGzC,IAAI,CAACC,GAAG,CAACwB,KAAK,CAAC,IAAI,EAAEc,OAAO,CAAC;IACnD,KAAK,IAAI1G,EAAE,GAAG,CAAC,EAAE6G,SAAS,GAAGH,OAAO,EAAE1G,EAAE,GAAG6G,SAAS,CAAC3G,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC/D,IAAI8G,MAAM,GAAGD,SAAS,CAAC7G,EAAE,CAAC;MAC1B2G,aAAa,IAAI,IAAI,CAACC,cAAc;MACpC,IAAI,CAACd,UAAU,EAAE;MACjB,IAAIa,aAAa,GAAGhE,OAAO,GAAGQ,KAAK,EAAE;QACjCwD,aAAa,IAAI,IAAI,CAACC,cAAc;QACpC,IAAI,CAACd,UAAU,EAAE;QACjB;MACJ;IACJ;IACA,IAAI,CAACH,QAAQ,GAAIgB,aAAa,GAAGnD,QAAQ,IAAM,IAAI,CAAC+B,UAAU,GAAG,CAAE;IACnE,IAAIoB,aAAa,KAAKhE,OAAO,EAAE;MAC3BgE,aAAa,GAAGxD,KAAK;IACzB;IACA,IAAI,CAAC2C,UAAU,GAAG3B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC0B,UAAU,CAAC;IAC9C,IAAI,CAACiB,QAAQ,GAAGJ,aAAa;IAC7B,IAAIhD,WAAW,GAAG,IAAI,CAACiD,cAAc,GAAGjE,OAAO;IAC/C,IAAIqE,QAAQ,GAAG,CAAC;IAChB,IAAIvD,WAAW,GAAG,IAAI,CAAChB,aAAa,CAACvC,MAAM;IAC3C,IAAI,IAAI,CAACyF,QAAQ,IAAI,IAAI,CAAC1C,UAAU,EAAE;MAClC,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,WAAW,EAAEzC,CAAC,EAAE,EAAE;QAClC2C,WAAW,IAAK,IAAI,CAACiD,cAAc,GAAGjE,OAAQ;QAC9C,IAAIgB,WAAW,GAAGR,KAAK,EAAE;UACrB,IAAI,CAACT,WAAW,CAAClB,IAAI,CAAGwF,QAAQ,KAAKhG,CAAC,GAAG,CAAC,GAAImD,IAAI,CAACC,GAAG,CAACwB,KAAK,CAAC,IAAI,EAAE,IAAI,CAACnD,aAAa,CAACwE,KAAK,CAACD,QAAQ,EAAEhG,CAAC,GAAG,CAAC,CAAC,CAAC,GACzG,IAAI,CAACyB,aAAa,CAACuE,QAAQ,CAAE,CAAC;UAClCrD,WAAW,GAAG,IAAI,CAACiD,cAAc,GAAGjE,OAAO;UAC3CqE,QAAQ,GAAGhG,CAAC;QAChB;MACJ;MACA,IAAI,CAAC0B,WAAW,CAAClB,IAAI,CAAGwF,QAAQ,KAAKvD,WAAW,GAAG,CAAC,GAChDU,IAAI,CAACC,GAAG,CAACwB,KAAK,CAAC,IAAI,EAAE,IAAI,CAACnD,aAAa,CAACwE,KAAK,CAACD,QAAQ,EAAEvD,WAAW,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAChB,aAAa,CAACuE,QAAQ,CAAE,CAAC;MAC9G,IAAI,CAACzB,UAAU,GAAG,IAAI,CAAC7C,WAAW,CAACxC,MAAM;IAC7C;IACA,OAAOyG,aAAa;EACxB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI3I,kBAAkB,CAACf,SAAS,CAACiK,aAAa,GAAG,UAAUC,EAAE,EAAEhE,KAAK,EAAE;IAC9D,IAAI,IAAI,CAACF,UAAU,EAAE;MACjBE,KAAK,GAAG,IAAI,CAAC4D,QAAQ;IACzB,CAAC,MACI,IAAI,CAAC,IAAI,CAAC9D,UAAU,IAAI,IAAI,CAAC0C,QAAQ,IAAI,CAAC,IAAI,CAAC3D,MAAM,CAACgB,WAAW,EAAE;MACpE,OAAOG,KAAK,GAAGgE,EAAE,GAAG,IAAI,CAAC1B,SAAS;IACtC;IACA,OAAOtC,KAAK,IAAK,IAAI,CAACnB,MAAM,CAACW,OAAO,GAAG,CAAC,GAAI,IAAI,CAACX,MAAM,CAACuB,UAAU,GAAG,IAAI,CAACvB,MAAM,CAACoB,YAAY,CAAC;EAClG,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIpF,kBAAkB,CAACf,SAAS,CAACmK,cAAc,GAAG,UAAU9E,YAAY,EAAE+E,KAAK,EAAEhB,WAAW,EAAEiB,UAAU,EAAEC,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAE;IAC5H,IAAI9E,OAAO,GAAG,IAAI,CAACX,MAAM,CAACW,OAAO;IACjC,IAAI+E,gBAAgB,GAAGJ,UAAU,CAACK,QAAQ,CAACpG,CAAC,GAAG,IAAI,CAAC2C,aAAa,GAAG,CAAC,IAAIoD,UAAU,CAAChB,cAAc,CAACpG,MAAM,GAAG,CAAC,GACxG,CAACoH,UAAU,CAAChB,cAAc,CAACpG,MAAM,GAAG,CAAC,IAAI,IAAI,CAACgE,aAAa,GAAI,CAAC,CAAC;IACtE,IAAI,IAAI,CAACjB,UAAU,EAAE;MACjB,IAAIuE,KAAK,KAAKC,WAAW,IAAKC,gBAAgB,GAAGpF,YAAY,CAAC4C,QAAQ,CAAChC,MAAM,GAAGP,OAAO,GAAI4E,IAAI,CAAChG,CAAC,GAAGgG,IAAI,CAACrE,MAAQ,EAAE;QAC/GZ,YAAY,CAACqF,QAAQ,CAACrG,CAAC,GAAGgG,UAAU,CAACK,QAAQ,CAACrG,CAAC,IAAKkG,KAAK,KAAKC,WAAW,GAAI,CAAC,GAAI,CAAC,IAAI,CAAC7G,WAAW,GAC/F,IAAI,CAACgG,cAAc,GAAG,CAAC,IAAI,CAACA,cAAc,CAAC;QAC/CtE,YAAY,CAACqF,QAAQ,CAACpG,CAAC,GAAG8F,KAAK,CAAC9F,CAAC;QACjC,IAAIqG,YAAY,GAAI,IAAI,CAAC5F,MAAM,CAACuB,UAAU,GAAG,CAAC,GAAIZ,OAAO;QACzD,IAAI,CAACkF,gBAAgB,CAACrG,IAAI,CAACc,YAAY,CAACqF,QAAQ,CAACrG,CAAC,IAAK,CAAC,IAAI,CAACV,WAAW,GAAI,CAACgH,YAAY,GAAGA,YAAY,CAAC,CAAC;MAC9G,CAAC,MACI;QACDtF,YAAY,CAACqF,QAAQ,CAACrG,CAAC,GAAGgG,UAAU,CAACK,QAAQ,CAACrG,CAAC;QAC/CgB,YAAY,CAACqF,QAAQ,CAACpG,CAAC,GAAG+F,UAAU,CAACK,QAAQ,CAACpG,CAAC,GAAG+F,UAAU,CAACpC,QAAQ,CAAChC,MAAM,GAAG,IAAI,CAACiC,WAAW;MACnG;IACJ,CAAC,MACI;MACD,IAAI2C,SAAS,GAAGzB,WAAW,IAAI,IAAI,CAACrE,MAAM,CAACsB,iBAAiB,GACxD,IAAI,CAACtB,MAAM,CAACsB,iBAAiB,GAAGgE,UAAU,CAACpC,QAAQ,CAAC/B,KAAK,CAAC;MAC9D,IAAI4E,aAAa,GAAGT,UAAU,CAACK,QAAQ,CAACrG,CAAC,IAAK,CAAC,IAAI,CAACV,WAAW,GAAIkH,SAAS,GAAG,CAACA,SAAS,CAAC;MAC1F,IAAI,IAAI,CAACE,cAAc,CAACD,aAAa,EAAE,CAAC,IAAI,CAAC/F,MAAM,CAACsB,iBAAiB,GAAG,IAAI,CAACtB,MAAM,CAACsB,iBAAiB,GACjGhB,YAAY,CAAC4C,QAAQ,CAAC/B,KAAK,IAAIkD,WAAW,GAAG,IAAI,CAAClB,WAAW,EAAEoC,IAAI,EAAE,IAAI,CAACvF,MAAM,CAACuB,UAAU,GAAG,CAAC,CAAC,EAAE;QAClG,IAAIiE,KAAK,KAAKC,WAAW,EAAE;UACvB,IAAI,CAAClF,aAAa,EAAE;QACxB;QACAD,YAAY,CAACqF,QAAQ,CAACpG,CAAC,GAAIiG,KAAK,KAAKC,WAAW,GAAIH,UAAU,CAACK,QAAQ,CAACpG,CAAC,GACrE+F,UAAU,CAACK,QAAQ,CAACpG,CAAC,GAAG,IAAI,CAACiB,UAAU,CAAE,IAAI,CAACD,aAAa,GAAG,CAAC,CAAE,GAAGI,OAAO;QAC/EL,YAAY,CAACqF,QAAQ,CAACrG,CAAC,GAAG+F,KAAK,CAAC/F,CAAC;MACrC,CAAC,MACI;QACDgB,YAAY,CAACqF,QAAQ,CAACpG,CAAC,GAAG+F,UAAU,CAACK,QAAQ,CAACpG,CAAC;QAC/Ce,YAAY,CAACqF,QAAQ,CAACrG,CAAC,GAAIkG,KAAK,KAAKC,WAAW,GAAIH,UAAU,CAACK,QAAQ,CAACrG,CAAC,GAAGyG,aAAa;MAC7F;IACJ;IACA,IAAIE,cAAc,GAAG,IAAI,CAACf,aAAa,CAAC5E,YAAY,CAACqF,QAAQ,CAACrG,CAAC,EAAE,IAAI,CAACS,YAAY,CAACoB,KAAK,CAAC;IACzF8E,cAAc,GAAG,IAAI,CAACjG,MAAM,CAACsB,iBAAiB,GAAGa,IAAI,CAACoC,GAAG,CAAC,IAAI,CAACvE,MAAM,CAACsB,iBAAiB,EAAE2E,cAAc,CAAC,GAAGA,cAAc;IACzH,IAAI,IAAI,CAACjG,MAAM,CAACkG,YAAY,KAAK,UAAU,IAAI,IAAI,CAAClG,MAAM,CAAClE,QAAQ,KAAK,QAAQ,EAAE;MAC9EwE,YAAY,CAACsC,IAAI,GAAGjH,QAAQ,CAAC,CAACsK,cAAc,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE7F,YAAY,CAACsC,IAAI,EAAE,IAAI,CAAC5C,MAAM,CAACqC,SAAS,EAAE,IAAI,CAACnG,KAAK,CAAC2C,SAAS,EAAE,IAAI,CAAC3C,KAAK,CAACoG,UAAU,CAACC,eAAe,CAAC;IACnK;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvG,kBAAkB,CAACf,SAAS,CAAC+K,cAAc,GAAG,UAAUD,aAAa,EAAED,SAAS,EAAE/F,YAAY,EAAEwB,UAAU,EAAE;IACxG,IAAI,CAAC,IAAI,CAAC3C,WAAW,EAAE;MACnB,OAAQmH,aAAa,GAAGD,SAAS,GAAK/F,YAAY,CAACT,CAAC,GAAGS,YAAY,CAACoB,KAAK,GAAGI,UAAW;IAC3F,CAAC,MACI;MACD,OAAQwE,aAAa,GAAGD,SAAS,GAAK/F,YAAY,CAACT,CAAC,GAAGiC,UAAW;IACtE;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvF,kBAAkB,CAACf,SAAS,CAACmL,sBAAsB,GAAG,UAAUC,UAAU,EAAEC,WAAW,EAAE/J,MAAM,EAAE;IAC7F,IAAIgK,KAAK;IACT,QAAQ,IAAI,CAACC,QAAQ;MACjB,KAAK,MAAM;QACPD,KAAK,GAAG,CAAEF,UAAU,CAAC/G,CAAC,GAAGgH,WAAW,CAACnF,KAAK,GAAI5E,MAAM,CAACkK,IAAI,IAAI,CAAC;QAC9DH,WAAW,CAAChH,CAAC,GAAI+G,UAAU,CAAC/G,CAAC,GAAGgH,WAAW,CAACnF,KAAK,GAAI5E,MAAM,CAACkK,IAAI,GAAGH,WAAW,CAAChH,CAAC,GAC3E+G,UAAU,CAAC/G,CAAC,GAAGgH,WAAW,CAACnF,KAAK,GAAIoF,KAAK;QAC9C;MACJ,KAAK,OAAO;QACRA,KAAK,GAAG,CAAE,IAAI,CAACrK,KAAK,CAAC4D,aAAa,CAACqB,KAAK,GAAG5E,MAAM,CAACmK,KAAK,IAAKL,UAAU,CAAC/G,CAAC,GAAG+G,UAAU,CAAClF,KAAK,GAAGmF,WAAW,CAACnF,KAAK,CAAC,IAAI,CAAC;QACrHmF,WAAW,CAAChH,CAAC,GAAI+G,UAAU,CAAC/G,CAAC,GAAG+G,UAAU,CAAClF,KAAK,GAAGmF,WAAW,CAACnF,KAAK,GAAK,IAAI,CAACjF,KAAK,CAAC4D,aAAa,CAACqB,KAAK,GAAG5E,MAAM,CAACmK,KAAM,GACnHJ,WAAW,CAAChH,CAAC,GAAI+G,UAAU,CAAC/G,CAAC,GAAG+G,UAAU,CAAClF,KAAK,GAAGoF,KAAM;QAC7D;MACJ,KAAK,KAAK;QACN,IAAI,CAACI,YAAY,CAAC,IAAI,CAACzK,KAAK,CAAC;QAC7BqK,KAAK,GAAG,CAAEF,UAAU,CAAC9G,CAAC,GAAG+G,WAAW,CAACpF,MAAM,IAAK,IAAI,CAAC5E,SAAS,CAACiD,CAAC,GAAG,IAAI,CAACjD,SAAS,CAAC4E,MAAM,CAAC,IAAI,CAAC;QAC9FoF,WAAW,CAAC/G,CAAC,GAAI8G,UAAU,CAAC9G,CAAC,GAAG+G,WAAW,CAACpF,MAAM,GAAI3E,MAAM,CAACC,GAAG,GAAG8J,WAAW,CAAC/G,CAAC,GAC3E8G,UAAU,CAAC9G,CAAC,GAAG+G,WAAW,CAACpF,MAAM,GAAIqF,KAAK;QAC/C;MACJ,KAAK,QAAQ;QACTA,KAAK,GAAG,CAAE,IAAI,CAACrK,KAAK,CAAC4D,aAAa,CAACoB,MAAM,GAAG3E,MAAM,CAACqK,MAAM,IAAKP,UAAU,CAAC9G,CAAC,GAAG8G,UAAU,CAACnF,MAAM,GAAGoF,WAAW,CAACpF,MAAM,CAAC,IAAI,CAAC;QACzHoF,WAAW,CAAC/G,CAAC,GAAG8G,UAAU,CAAC9G,CAAC,GAAG8G,UAAU,CAACnF,MAAM,GAAGoF,WAAW,CAACpF,MAAM,GAAI,IAAI,CAAChF,KAAK,CAAC4D,aAAa,CAACoB,MAAM,GAAG3E,MAAM,CAACqK,MAAO,GACrHN,WAAW,CAAC/G,CAAC,GAAI8G,UAAU,CAAC9G,CAAC,GAAG8G,UAAU,CAACnF,MAAM,GAAIqF,KAAK;QAC9D;IACR;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIvK,kBAAkB,CAACf,SAAS,CAAC0L,YAAY,GAAG,UAAUE,YAAY,EAAE;IAChE,IAAI,CAACA,YAAY,CAAC1G,KAAK,EAAE;MACrB,OAAO,IAAI;IACf;IACA,IAAI2G,SAAS,GAAGpL,WAAW,CAACmL,YAAY,CAAC1G,KAAK,EAAE0G,YAAY,CAACE,UAAU,EAAE,IAAI,CAAC7K,KAAK,CAACoG,UAAU,CAAC0E,eAAe,CAAC;IAC/G,IAAI,CAAC1K,SAAS,GAAG,IAAIb,IAAI,CAACoL,YAAY,CAAC/G,aAAa,CAACqB,KAAK,GAAG,CAAC,GAAG2F,SAAS,CAAC3F,KAAK,GAAG,CAAC,EAAE0F,YAAY,CAACtK,MAAM,CAACC,GAAG,EAAEsK,SAAS,CAAC3F,KAAK,EAAE2F,SAAS,CAAC5F,MAAM,CAAC;EACrJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIlF,kBAAkB,CAACf,SAAS,CAACgM,aAAa,GAAG,UAAUlJ,KAAK,EAAEY,iBAAiB,EAAE;IAC7E,KAAK,IAAIX,EAAE,GAAG,CAAC,EAAEkJ,mBAAmB,GAAGvI,iBAAiB,EAAEX,EAAE,GAAGkJ,mBAAmB,CAAChJ,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC7F,IAAIgC,MAAM,GAAGkH,mBAAmB,CAAClJ,EAAE,CAAC;MACpC,IAAIgC,MAAM,CAACmH,UAAU,KAAKpJ,KAAK,EAAE;QAC7B,OAAOiC,MAAM;MACjB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIhE,kBAAkB,CAACf,SAAS,CAAC+B,KAAK,GAAG,UAAUoK,KAAK,EAAE;IAClD,IAAIxJ,QAAQ,GAAGwJ,KAAK,CAACvJ,MAAM,CAACC,EAAE,CAACK,OAAO,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAC3DiJ,KAAK,CAACvJ,MAAM,CAACwJ,UAAU,CAAC,IAAI,CAAC,GAAGD,KAAK,CAACvJ,MAAM,CAACC,EAAE;IACnD,IAAI5B,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAIwB,aAAa,GAAG,CAAC,IAAI,CAACC,QAAQ,GAAG,QAAQ,EAAE,IAAI,CAACA,QAAQ,GAAG,SAAS,EAAE,IAAI,CAACA,QAAQ,GAAG,gBAAgB,CAAC;IAC3G;IACA;IACA;IACA;IACA,IAAI,CAACzB,KAAK,CAACoL,aAAa,GAAG,KAAK;IAChC,KAAK,IAAItJ,EAAE,GAAG,CAAC,EAAEuJ,eAAe,GAAG7J,aAAa,EAAEM,EAAE,GAAGuJ,eAAe,CAACrJ,MAAM,EAAEF,EAAE,EAAE,EAAE;MACjF,IAAIF,EAAE,GAAGyJ,eAAe,CAACvJ,EAAE,CAAC;MAC5B,IAAIJ,QAAQ,CAACO,OAAO,CAACL,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QAC3B,IAAIqJ,UAAU,GAAG/I,QAAQ,CAACR,QAAQ,CAACS,KAAK,CAACP,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpD,IAAI,IAAI,CAAC5B,KAAK,CAACkB,cAAc,CAACK,gBAAgB,IAAI,CAAC+J,KAAK,CAACL,UAAU,CAAC,EAAE;UAClE,IAAIM,aAAa,GAAG,IAAI,CAACvL,KAAK,CAACwL,aAAa,CAAC,CAAC,CAAC;UAC/C,IAAIrI,KAAK,GAAG/D,YAAY,CAAC6L,UAAU,EAAEM,aAAa,CAACrI,MAAM,CAAC;UAC1D,IAAIkB,YAAY,GAAG,IAAI,CAAC2G,aAAa,CAACE,UAAU,EAAE,IAAI,CAACxI,iBAAiB,CAAC;UACzE,IAAIgJ,eAAe,GAAG;YAClBnD,UAAU,EAAElE,YAAY,CAACsC,IAAI;YAAEjD,WAAW,EAAEW,YAAY,CAACuC,KAAK;YAC9D3G,KAAK,EAAEA,KAAK,CAAC0L,QAAQ,GAAG,CAAC,CAAC,GAAG1L,KAAK;YAAEwC,MAAM,EAAE+I,aAAa;YAAEpI,KAAK,EAAEA,KAAK;YACvEyD,IAAI,EAAE/G,WAAW;YAAEgH,MAAM,EAAE;UAC/B,CAAC;UACD,IAAI,CAAC7G,KAAK,CAAC8G,OAAO,CAACjH,WAAW,EAAE4L,eAAe,CAAC;UAChD,IAAI,CAACA,eAAe,CAAC5E,MAAM,EAAE;YACzB1D,KAAK,CAAChC,OAAO,GAAG,CAACgC,KAAK,CAAChC,OAAO;YAC9BiD,YAAY,CAACjD,OAAO,GAAGgC,KAAK,CAAChC,OAAO;YACpCoK,aAAa,CAACI,WAAW,IAAIxI,KAAK,CAAChC,OAAO,GAAGgC,KAAK,CAACE,CAAC,GAAG,CAACF,KAAK,CAACE,CAAC;YAC/DrD,KAAK,CAAC4L,MAAM,GAAG5L,KAAK,CAAC6L,eAAe;YACpC,IAAI,CAACC,eAAe,CAACb,UAAU,EAAE9H,KAAK,CAAChC,OAAO,CAAC;YAC/CnB,KAAK,CAAC+L,SAAS,CAAC,CAAC;YACjB;YACApM,oBAAoB,CAACK,KAAK,CAAC;YAC3B,IAAI,CAACA,KAAK,CAACgM,aAAa,CAACT,aAAa,CAACrI,MAAM,CAAC;YAC9C,IAAI,CAAClD,KAAK,CAACiM,eAAe,CAAC,CAAC;YAC5B,IAAI,CAACjM,KAAK,CAACkM,cAAc,CAAC,CAAC;UAC/B;QACJ,CAAC,MACI,IAAI,IAAI,CAAClM,KAAK,CAACmM,2BAA2B,IAAI,CAACb,KAAK,CAACL,UAAU,CAAC,EAAE;UACnE,IAAI,CAACjL,KAAK,CAACmM,2BAA2B,CAAC/J,eAAe,CAAC,IAAI,CAACpC,KAAK,EAAE,CAAC,EAAEiL,UAAU,EAAEC,KAAK,CAACvJ,MAAM,EAAEuJ,KAAK,CAAC7I,IAAI,CAAC;QAC/G,CAAC,MACI,IAAI,IAAI,CAACrC,KAAK,CAACqB,2BAA2B,IAAI,CAACiK,KAAK,CAACL,UAAU,CAAC,EAAE;UACnE,IAAI,CAACjL,KAAK,CAACqB,2BAA2B,CAACe,eAAe,CAAC,IAAI,CAACpC,KAAK,EAAE,CAAC,EAAEiL,UAAU,EAAEC,KAAK,CAACvJ,MAAM,EAAEuJ,KAAK,CAAC7I,IAAI,CAAC;QAC/G;MACJ;IACJ;IACA,IAAIX,QAAQ,CAACO,OAAO,CAAC,IAAI,CAACR,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;MAClD,IAAI,CAAC2K,UAAU,CAAClB,KAAK,EAAE,IAAI,CAAC;IAChC,CAAC,MACI,IAAIxJ,QAAQ,CAACO,OAAO,CAAC,IAAI,CAACR,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;MACzD,IAAI,CAAC2K,UAAU,CAAClB,KAAK,EAAE,KAAK,CAAC;IACjC;IACAlL,KAAK,CAAC4L,MAAM,GAAG,KAAK;EACxB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI9L,kBAAkB,CAACf,SAAS,CAAC+M,eAAe,GAAG,UAAUjK,KAAK,EAAEwK,SAAS,EAAE;IACvE,IAAIC,OAAO,GAAG,IAAI,CAACtM,KAAK,CAACuM,OAAO,CAAC3K,EAAE,GAAG,kBAAkB;IACxD,IAAI,IAAI,CAAC5B,KAAK,CAACwL,aAAa,CAAC,CAAC,CAAC,CAACgB,SAAS,CAACrL,OAAO,EAAE;MAC/CmL,OAAO,GAAG,IAAI,CAACtM,KAAK,CAACuM,OAAO,CAAC3K,EAAE,GAAG,sBAAsB;MACxD,IAAI,CAAC6K,YAAY,CAAC/M,UAAU,CAAC4M,OAAO,GAAG,IAAI,GAAGzK,KAAK,CAAC,EAAEwK,SAAS,CAAC;IACpE;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIvM,kBAAkB,CAACf,SAAS,CAAC0N,YAAY,GAAG,UAAUF,OAAO,EAAEF,SAAS,EAAE;IACtE,IAAI,CAACE,OAAO,EAAE;MACV,OAAO,IAAI;IACf;IACA,IAAIpN,SAAS,CAAC,CAAC,CAAC,CAAC,CAACuN,OAAO,CAACH,OAAO,EAAE;MAC/BI,QAAQ,EAAE,GAAG;MACbC,KAAK,EAAE,CAAC;MACRhG,IAAI,EAAEyF,SAAS,GAAG,QAAQ,GAAG,SAAS;MACtCQ,GAAG,EAAE,SAAAA,CAAUC,IAAI,EAAE;QACjBA,IAAI,CAACP,OAAO,CAACQ,KAAK,CAACC,UAAU,GAAGX,SAAS,GAAG,SAAS,GAAG,QAAQ;MACpE;IACJ,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIvM,kBAAkB,CAACf,SAAS,CAACkO,aAAa,GAAG,YAAY;IACrD,OAAO,oBAAoB;EAC/B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACInN,kBAAkB,CAACf,SAAS,CAACmO,OAAO,GAAG,YAAY;IAC/C;AACR;AACA;IACQ,IAAI,CAACnM,mBAAmB,CAAC,CAAC;EAC9B,CAAC;EACD,OAAOjB,kBAAkB;AAC7B,CAAC,CAACT,UAAU,CAAE;AACd,SAASS,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}