{"ast":null,"code":"import { getActualDesiredIntervalsCount, setRange, triggerLabelRender } from '../../common/utils/helper';\nimport { DoubleRange } from '../utils/doubleRange';\nimport { withIn, logBase } from '../../common/utils/helper';\nimport { isNullOrUndefined, extend, getValue } from '@syncfusion/ej2-base';\nimport { getMinPointsDeltaValue } from '../utils/chart3dRender';\n/**\r\n * The numeric module is used to render numeric axis.\r\n */\nvar Double3D = /** @class */function () {\n  /**\r\n   * Constructor for the dateTime module.\r\n   *\r\n   * @param {Chart3D} chart - Chart3D instance.\r\n   * @private\r\n   */\n  function Double3D(chart) {\n    this.isColumn = 0;\n    this.isStacking = false;\n    this.chart = chart;\n  }\n  /**\r\n   * Calculates a numeric nice interval for the specified axis based on the provided delta and size.\r\n   *\r\n   * @param {Chart3DAxis} axis - The axis for which the numeric nice interval is calculated.\r\n   * @param {number} delta - The delta value to consider in the interval calculation.\r\n   * @param {Size} size - The size of the chart area used in the calculation.\r\n   * @returns {number} - The calculated numeric nice interval.\r\n   * @protected\r\n   */\n  Double3D.prototype.calculateNumericNiceInterval = function (axis, delta, size) {\n    var actualDesiredIntervalsCount = getActualDesiredIntervalsCount(size, axis);\n    var niceInterval = delta / actualDesiredIntervalsCount;\n    if (!isNullOrUndefined(axis.desiredIntervals)) {\n      return niceInterval;\n    }\n    var minInterval = Math.pow(10, Math.floor(logBase(niceInterval, 10)));\n    for (var _i = 0, _a = axis.intervalDivs; _i < _a.length; _i++) {\n      var interval = _a[_i];\n      var currentInterval = minInterval * interval;\n      if (actualDesiredIntervalsCount < delta / currentInterval) {\n        break;\n      }\n      niceInterval = currentInterval;\n    }\n    return niceInterval;\n  };\n  /**\r\n   * Retrieves the actual range for the specified axis based on the provided size.\r\n   *\r\n   * @param {Chart3DAxis} axis - The axis for which the actual range is retrieved.\r\n   * @param {Size} size - The size of the chart area used in the range calculation.\r\n   * @returns {void}\r\n   */\n  Double3D.prototype.getActualRange = function (axis, size) {\n    this.initializeDoubleRange(axis);\n    if (!axis.startFromZero && this.isColumn > 0) {\n      axis.actualRange.interval = axis.interval || this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);\n      axis.actualRange.max = axis.doubleRange.end + axis.actualRange.interval;\n      if (axis.doubleRange.start - axis.actualRange.interval < 0 && axis.doubleRange.start > 0) {\n        axis.actualRange.min = 0;\n      } else {\n        axis.actualRange.min = axis.doubleRange.start - (this.isStacking ? 0 : axis.actualRange.interval);\n      }\n    } else {\n      axis.actualRange.interval = axis.interval || this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);\n      axis.actualRange.min = axis.doubleRange.start;\n      axis.actualRange.max = axis.doubleRange.end;\n    }\n  };\n  /**\r\n   * Range for the axis.\r\n   *\r\n   * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Double3D.prototype.initializeDoubleRange = function (axis) {\n    //Axis Min\n    if (axis.minimum !== null) {\n      this.min = axis.minimum;\n    } else if (this.min === null || this.min === Number.POSITIVE_INFINITY) {\n      this.min = 0;\n    }\n    // Axis Max\n    if (axis.maximum !== null) {\n      this.max = axis.maximum;\n    } else if (this.max === null || this.max === Number.NEGATIVE_INFINITY) {\n      this.max = 5;\n    }\n    if (this.min === this.max) {\n      this.max = axis.valueType.indexOf('Category') > -1 ? this.max : this.min + 1;\n    }\n    axis.doubleRange = new DoubleRange(this.min, this.max);\n    axis.actualRange = {};\n  };\n  /**\r\n   * Calculates the range and interval for the specified axis based on the provided size.\r\n   *\r\n   * @param {Size} size - The size of the chart area used for range and interval calculation.\r\n   * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n   * @returns {void}\r\n   */\n  Double3D.prototype.calculateRangeAndInterval = function (size, axis) {\n    this.calculateRange(axis);\n    this.getActualRange(axis, size);\n    this.applyRangePadding(axis, size);\n    this.calculateVisibleLabels(axis, this.chart);\n  };\n  /**\r\n   * Calculates range for the axis.\r\n   *\r\n   * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Double3D.prototype.calculateRange = function (axis) {\n    /** Generate axis range */\n    this.min = null;\n    this.max = null;\n    if (!setRange(axis)) {\n      for (var _i = 0, _a = axis.series; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (!series.visible) {\n          continue;\n        }\n        this.paddingInterval = 0;\n        if (!isNullOrUndefined(series.points)) {\n          axis.maxPointLength = series.points.length;\n        }\n        axis.maxPointLength = series.points.length;\n        if (series.type.indexOf('Column') > -1 && axis.orientation === 'Horizontal' || series.type.indexOf('Bar') > -1 && axis.orientation === 'Vertical') {\n          if ((series.xAxis.valueType === 'Double' || series.xAxis.valueType === 'DateTime') && series.xAxis.rangePadding === 'Auto') {\n            this.paddingInterval = getMinPointsDeltaValue(series.xAxis, axis.series) * 0.5;\n          }\n        }\n        //For xRange\n        if (axis.orientation === 'Horizontal') {\n          if (this.chart.requireInvertedAxis) {\n            this.yAxisRange(axis, series);\n          } else {\n            this.findMinMax(series.xMin - this.paddingInterval, series.xMax + this.paddingInterval);\n          }\n        }\n        // For yRange\n        if (axis.orientation === 'Vertical') {\n          this.isColumn += series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1 ? 1 : 0;\n          this.isStacking = series.type.indexOf('Stacking') !== -1;\n          if (this.chart.requireInvertedAxis) {\n            this.findMinMax(series.xMin - this.paddingInterval, series.xMax + this.paddingInterval);\n          } else {\n            this.yAxisRange(axis, series);\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets the range for the Y-axis based on the minimum and maximum values of the series.\r\n   *\r\n   * @param {Chart3DAxis} axis - The Y-axis of the 3D chart.\r\n   * @param {Chart3DSeries} series - The 3D series for which to determine the range.\r\n   * @returns {void}\r\n   */\n  Double3D.prototype.yAxisRange = function (axis, series) {\n    this.findMinMax(series.yMin, series.yMax);\n  };\n  /**\r\n   * Finds and updates the minimum and maximum values within a given range.\r\n   *\r\n   * @param {Object} min - The minimum value to compare.\r\n   * @param {Object} max - The maximum value to compare.\r\n   * @returns {void}\r\n   */\n  Double3D.prototype.findMinMax = function (min, max) {\n    if (this.min === null || this.min > min) {\n      this.min = min;\n    }\n    if (this.max === null || this.max < max) {\n      this.max = max;\n    }\n    if (this.max === this.min && this.max < 0 && this.min < 0) {\n      // max == min\n      this.max = 0;\n    }\n  };\n  /**\r\n   * Apply padding for the range.\r\n   *\r\n   * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n   * @param {Size} size - Specifies the size of the axis.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Double3D.prototype.applyRangePadding = function (axis, size) {\n    var start = axis.actualRange.min;\n    var end = axis.actualRange.max;\n    if (!setRange(axis)) {\n      var interval = axis.actualRange.interval;\n      var padding = axis.getRangePadding(this.chart);\n      if (padding === 'Additional' || padding === 'Round') {\n        this.findAdditional(axis, start, end, interval, size);\n      } else if (padding === 'Normal') {\n        this.findNormal(axis, start, end, interval, size);\n      } else {\n        this.updateActualRange(axis, start, end, interval);\n      }\n    }\n    axis.actualRange.delta = axis.actualRange.max - axis.actualRange.min;\n    this.calculateVisibleRange(size, axis);\n  };\n  /**\r\n   * Updates the actual range of the 3D axis with specified minimum, maximum, and interval values.\r\n   *\r\n   * @param {Chart3DAxis} axis - The 3D axis to update.\r\n   * @param {number} minimum - The minimum value for the axis.\r\n   * @param {number} maximum - The maximum value for the axis.\r\n   * @param {number} interval - The interval value for the axis.\r\n   * @returns {void}\r\n   */\n  Double3D.prototype.updateActualRange = function (axis, minimum, maximum, interval) {\n    axis.actualRange = {\n      min: axis.minimum != null ? axis.minimum : minimum,\n      max: axis.maximum != null ? axis.maximum : maximum,\n      interval: axis.interval != null ? axis.interval : interval,\n      delta: axis.actualRange.delta\n    };\n  };\n  /**\r\n   * Finds additional range for the 3D axis based on specified start, end, interval, and size values.\r\n   *\r\n   * @param {Chart3DAxis} axis - The 3D axis to find additional range for.\r\n   * @param {number} start - The start value for the axis range.\r\n   * @param {number} end - The end value for the axis range.\r\n   * @param {number} interval - The interval value for the axis.\r\n   * @param {Size} size - The size of the chart area.\r\n   * @returns {void}\r\n   */\n  Double3D.prototype.findAdditional = function (axis, start, end, interval, size) {\n    var minimum;\n    var maximum;\n    minimum = Math.floor(start / interval) * interval;\n    maximum = Math.ceil(end / interval) * interval;\n    if (axis.rangePadding === 'Additional') {\n      minimum -= interval;\n      maximum += interval;\n    }\n    if (!isNullOrUndefined(axis.desiredIntervals)) {\n      var delta = maximum - minimum;\n      interval = this.calculateNumericNiceInterval(axis, delta, size);\n    }\n    this.updateActualRange(axis, minimum, maximum, interval);\n  };\n  /**\r\n   * Finds normal range for the 3D axis based on specified start, end, interval, and size values.\r\n   *\r\n   * @param {Chart3DAxis} axis - The 3D axis to find normal range for.\r\n   * @param {number} start - The start value for the axis range.\r\n   * @param {number} end - The end value for the axis range.\r\n   * @param {number} interval - The interval value for the axis.\r\n   * @param {Size} size - The size of the chart area.\r\n   * @returns {void}\r\n   */\n  Double3D.prototype.findNormal = function (axis, start, end, interval, size) {\n    var remaining;\n    var minimum;\n    var maximum;\n    var startValue = start;\n    if (start < 0) {\n      startValue = 0;\n      minimum = start + start * 0.05;\n      remaining = interval + minimum % interval;\n      if (0.365 * interval >= remaining) {\n        minimum -= interval;\n      }\n      if (minimum % interval < 0) {\n        minimum = minimum - interval - minimum % interval;\n      }\n    } else {\n      minimum = start < 5.0 / 6.0 * end ? 0 : start - (end - start) * 0.5;\n      if (minimum % interval > 0) {\n        minimum -= minimum % interval;\n      }\n    }\n    maximum = end > 0 ? end + (end - startValue) * 0.05 : end - (end - startValue) * 0.05;\n    remaining = interval - maximum % interval;\n    if (0.365 * interval >= remaining) {\n      maximum += interval;\n    }\n    if (maximum % interval > 0) {\n      maximum = maximum + interval - maximum % interval;\n    }\n    axis.doubleRange = new DoubleRange(minimum, maximum);\n    if (minimum === 0 || minimum < 0 && maximum < 0) {\n      interval = this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);\n      maximum = Math.ceil(maximum / interval) * interval;\n    }\n    this.updateActualRange(axis, minimum, maximum, interval);\n  };\n  /**\r\n   * Calculate visible range for axis.\r\n   *\r\n   * @param {Size} size - Specifies the size of the axis.\r\n   * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Double3D.prototype.calculateVisibleRange = function (size, axis) {\n    axis.visibleRange = {\n      max: axis.actualRange.max,\n      min: axis.actualRange.min,\n      delta: axis.actualRange.delta,\n      interval: axis.actualRange.interval\n    };\n    if (axis.maximum && axis.orientation === 'Vertical' && axis.rangePadding === 'Auto') {\n      var duplicateTempInterval = void 0;\n      var tempInterval = axis.visibleRange.min;\n      for (; tempInterval <= axis.visibleRange.max && duplicateTempInterval !== tempInterval; tempInterval += axis.visibleRange.interval) {\n        duplicateTempInterval = tempInterval;\n      }\n      if (duplicateTempInterval < axis.visibleRange.max) {\n        axis.visibleRange.max = duplicateTempInterval + axis.visibleRange.interval;\n      }\n    }\n    axis.triggerRangeRender(this.chart, axis.visibleRange.min, axis.visibleRange.max, axis.visibleRange.interval);\n  };\n  /**\r\n   * Calculates the visible label for the axis.\r\n   *\r\n   * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n   * @param {Chart3D} chart - Specifies the instance of the chart.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Double3D.prototype.calculateVisibleLabels = function (axis, chart) {\n    /** Generate axis labels */\n    axis.visibleLabels = [];\n    var tempInterval = axis.visibleRange.min;\n    var labelStyle;\n    var format = this.getFormat(axis);\n    var isCustom = format.match('{value}') !== null;\n    var intervalDigits = 0;\n    var formatDigits = 0;\n    if (axis.labelFormat && axis.labelFormat.indexOf('n') > -1) {\n      formatDigits = parseInt(axis.labelFormat.substring(1, axis.labelFormat.length), 10);\n    }\n    axis.format = chart.intl.getNumberFormat({\n      format: isCustom ? '' : format,\n      useGrouping: chart.useGroupingSeparator\n    });\n    axis.startLabel = axis.format(axis.visibleRange.min);\n    axis.endLabel = axis.format(axis.visibleRange.max);\n    if (axis.visibleRange.interval && (axis.visibleRange.interval + '').indexOf('.') >= 0) {\n      intervalDigits = (axis.visibleRange.interval + '').split('.')[1].length;\n    }\n    var duplicateTempInterval;\n    for (; tempInterval <= axis.visibleRange.max && duplicateTempInterval !== tempInterval; tempInterval += axis.visibleRange.interval) {\n      duplicateTempInterval = tempInterval;\n      labelStyle = extend({}, getValue('properties', axis.labelStyle), null, true);\n      if (withIn(tempInterval, axis.visibleRange)) {\n        triggerLabelRender(chart, tempInterval, this.formatValue(axis, isCustom, format, tempInterval), labelStyle, axis);\n      }\n    }\n    if (tempInterval && (tempInterval + '').indexOf('.') >= 0 && (tempInterval + '').split('.')[1].length > 10) {\n      tempInterval = (tempInterval + '').split('.')[1].length > (formatDigits || intervalDigits) ? +tempInterval.toFixed(formatDigits || intervalDigits) : tempInterval;\n      if (tempInterval <= axis.visibleRange.max) {\n        triggerLabelRender(chart, tempInterval, this.formatValue(axis, isCustom, format, tempInterval), labelStyle, axis);\n      }\n    }\n    if (axis.getMaxLabelWidth) {\n      axis.getMaxLabelWidth(this.chart);\n    }\n  };\n  /**\r\n   * Gets the format for the axis label.\r\n   *\r\n   * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n   * @returns {string} - Returns the string value.\r\n   * @private\r\n   */\n  Double3D.prototype.getFormat = function (axis) {\n    if (axis.labelFormat) {\n      if (axis.labelFormat.indexOf('p') === 0 && axis.labelFormat.indexOf('{value}') === -1 && axis.isStack100) {\n        return '{value}%';\n      }\n      return axis.labelFormat;\n    }\n    return axis.isStack100 ? '{value}%' : '';\n  };\n  /**\r\n   * Formats the axis label.\r\n   *\r\n   * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n   * @param {boolean} isCustom - Specifies whether the format is custom.\r\n   * @param {string} format - Specifies the format of the axis label.\r\n   * @param {number} tempInterval - Specifies the interval of the axis label.\r\n   * @returns {string} - Returns the string value.\r\n   * @private\r\n   */\n  Double3D.prototype.formatValue = function (axis, isCustom, format, tempInterval) {\n    var labelValue = !(tempInterval % 1) ? tempInterval : Number(tempInterval.toLocaleString().split(',').join(''));\n    return isCustom ? format.replace('{value}', axis.format(labelValue)) : format ? axis.format(tempInterval) : axis.format(labelValue);\n  };\n  /**\r\n   * Gets the module name.\r\n   *\r\n   * @returns {string} - the module name.\r\n   */\n  Double3D.prototype.getModuleName = function () {\n    /**\r\n     * Returns the module name.\r\n     */\n    return 'Double3D';\n  };\n  return Double3D;\n}();\nexport { Double3D };","map":{"version":3,"names":["getActualDesiredIntervalsCount","setRange","triggerLabelRender","DoubleRange","withIn","logBase","isNullOrUndefined","extend","getValue","getMinPointsDeltaValue","Double3D","chart","isColumn","isStacking","prototype","calculateNumericNiceInterval","axis","delta","size","actualDesiredIntervalsCount","niceInterval","desiredIntervals","minInterval","Math","pow","floor","_i","_a","intervalDivs","length","interval","currentInterval","getActualRange","initializeDoubleRange","startFromZero","actualRange","doubleRange","max","end","start","min","minimum","Number","POSITIVE_INFINITY","maximum","NEGATIVE_INFINITY","valueType","indexOf","calculateRangeAndInterval","calculateRange","applyRangePadding","calculateVisibleLabels","series","visible","paddingInterval","points","maxPointLength","type","orientation","xAxis","rangePadding","requireInvertedAxis","yAxisRange","findMinMax","xMin","xMax","yMin","yMax","padding","getRangePadding","findAdditional","findNormal","updateActualRange","calculateVisibleRange","ceil","remaining","startValue","visibleRange","duplicateTempInterval","tempInterval","triggerRangeRender","visibleLabels","labelStyle","format","getFormat","isCustom","match","intervalDigits","formatDigits","labelFormat","parseInt","substring","intl","getNumberFormat","useGrouping","useGroupingSeparator","startLabel","endLabel","split","formatValue","toFixed","getMaxLabelWidth","isStack100","labelValue","toLocaleString","join","replace","getModuleName"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/chart3d/axis/double-axis.js"],"sourcesContent":["import { getActualDesiredIntervalsCount, setRange, triggerLabelRender } from '../../common/utils/helper';\r\nimport { DoubleRange } from '../utils/doubleRange';\r\nimport { withIn, logBase } from '../../common/utils/helper';\r\nimport { isNullOrUndefined, extend, getValue } from '@syncfusion/ej2-base';\r\nimport { getMinPointsDeltaValue } from '../utils/chart3dRender';\r\n/**\r\n * The numeric module is used to render numeric axis.\r\n */\r\nvar Double3D = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the dateTime module.\r\n     *\r\n     * @param {Chart3D} chart - Chart3D instance.\r\n     * @private\r\n     */\r\n    function Double3D(chart) {\r\n        this.isColumn = 0;\r\n        this.isStacking = false;\r\n        this.chart = chart;\r\n    }\r\n    /**\r\n     * Calculates a numeric nice interval for the specified axis based on the provided delta and size.\r\n     *\r\n     * @param {Chart3DAxis} axis - The axis for which the numeric nice interval is calculated.\r\n     * @param {number} delta - The delta value to consider in the interval calculation.\r\n     * @param {Size} size - The size of the chart area used in the calculation.\r\n     * @returns {number} - The calculated numeric nice interval.\r\n     * @protected\r\n     */\r\n    Double3D.prototype.calculateNumericNiceInterval = function (axis, delta, size) {\r\n        var actualDesiredIntervalsCount = getActualDesiredIntervalsCount(size, axis);\r\n        var niceInterval = delta / actualDesiredIntervalsCount;\r\n        if (!isNullOrUndefined(axis.desiredIntervals)) {\r\n            return niceInterval;\r\n        }\r\n        var minInterval = Math.pow(10, Math.floor(logBase(niceInterval, 10)));\r\n        for (var _i = 0, _a = axis.intervalDivs; _i < _a.length; _i++) {\r\n            var interval = _a[_i];\r\n            var currentInterval = minInterval * interval;\r\n            if (actualDesiredIntervalsCount < (delta / currentInterval)) {\r\n                break;\r\n            }\r\n            niceInterval = currentInterval;\r\n        }\r\n        return niceInterval;\r\n    };\r\n    /**\r\n     * Retrieves the actual range for the specified axis based on the provided size.\r\n     *\r\n     * @param {Chart3DAxis} axis - The axis for which the actual range is retrieved.\r\n     * @param {Size} size - The size of the chart area used in the range calculation.\r\n     * @returns {void}\r\n     */\r\n    Double3D.prototype.getActualRange = function (axis, size) {\r\n        this.initializeDoubleRange(axis);\r\n        if ((!axis.startFromZero) && (this.isColumn > 0)) {\r\n            axis.actualRange.interval = axis.interval || this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);\r\n            axis.actualRange.max = axis.doubleRange.end + axis.actualRange.interval;\r\n            if ((axis.doubleRange.start - axis.actualRange.interval < 0 && axis.doubleRange.start > 0)) {\r\n                axis.actualRange.min = 0;\r\n            }\r\n            else {\r\n                axis.actualRange.min = axis.doubleRange.start - (this.isStacking ? 0 : axis.actualRange.interval);\r\n            }\r\n        }\r\n        else {\r\n            axis.actualRange.interval = axis.interval || this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);\r\n            axis.actualRange.min = axis.doubleRange.start;\r\n            axis.actualRange.max = axis.doubleRange.end;\r\n        }\r\n    };\r\n    /**\r\n     * Range for the axis.\r\n     *\r\n     * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Double3D.prototype.initializeDoubleRange = function (axis) {\r\n        //Axis Min\r\n        if (axis.minimum !== null) {\r\n            this.min = axis.minimum;\r\n        }\r\n        else if (this.min === null || this.min === Number.POSITIVE_INFINITY) {\r\n            this.min = 0;\r\n        }\r\n        // Axis Max\r\n        if (axis.maximum !== null) {\r\n            this.max = axis.maximum;\r\n        }\r\n        else if (this.max === null || this.max === Number.NEGATIVE_INFINITY) {\r\n            this.max = 5;\r\n        }\r\n        if (this.min === this.max) {\r\n            this.max = axis.valueType.indexOf('Category') > -1 ? this.max : this.min + 1;\r\n        }\r\n        axis.doubleRange = new DoubleRange(this.min, this.max);\r\n        axis.actualRange = {};\r\n    };\r\n    /**\r\n     * Calculates the range and interval for the specified axis based on the provided size.\r\n     *\r\n     * @param {Size} size - The size of the chart area used for range and interval calculation.\r\n     * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n     * @returns {void}\r\n     */\r\n    Double3D.prototype.calculateRangeAndInterval = function (size, axis) {\r\n        this.calculateRange(axis);\r\n        this.getActualRange(axis, size);\r\n        this.applyRangePadding(axis, size);\r\n        this.calculateVisibleLabels(axis, this.chart);\r\n    };\r\n    /**\r\n     * Calculates range for the axis.\r\n     *\r\n     * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Double3D.prototype.calculateRange = function (axis) {\r\n        /** Generate axis range */\r\n        this.min = null;\r\n        this.max = null;\r\n        if (!setRange(axis)) {\r\n            for (var _i = 0, _a = axis.series; _i < _a.length; _i++) {\r\n                var series = _a[_i];\r\n                if (!series.visible) {\r\n                    continue;\r\n                }\r\n                this.paddingInterval = 0;\r\n                if (!isNullOrUndefined(series.points)) {\r\n                    axis.maxPointLength = series.points.length;\r\n                }\r\n                axis.maxPointLength = series.points.length;\r\n                if (((series.type.indexOf('Column') > -1) && axis.orientation === 'Horizontal')\r\n                    || (series.type.indexOf('Bar') > -1 && axis.orientation === 'Vertical')) {\r\n                    if ((series.xAxis.valueType === 'Double' || series.xAxis.valueType === 'DateTime')\r\n                        && series.xAxis.rangePadding === 'Auto') {\r\n                        this.paddingInterval = getMinPointsDeltaValue(series.xAxis, axis.series) * 0.5;\r\n                    }\r\n                }\r\n                //For xRange\r\n                if (axis.orientation === 'Horizontal') {\r\n                    if (this.chart.requireInvertedAxis) {\r\n                        this.yAxisRange(axis, series);\r\n                    }\r\n                    else {\r\n                        this.findMinMax(series.xMin - this.paddingInterval, series.xMax + this.paddingInterval);\r\n                    }\r\n                }\r\n                // For yRange\r\n                if (axis.orientation === 'Vertical') {\r\n                    this.isColumn += (series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1) ? 1 : 0;\r\n                    this.isStacking = series.type.indexOf('Stacking') !== -1;\r\n                    if (this.chart.requireInvertedAxis) {\r\n                        this.findMinMax(series.xMin - this.paddingInterval, series.xMax + this.paddingInterval);\r\n                    }\r\n                    else {\r\n                        this.yAxisRange(axis, series);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the range for the Y-axis based on the minimum and maximum values of the series.\r\n     *\r\n     * @param {Chart3DAxis} axis - The Y-axis of the 3D chart.\r\n     * @param {Chart3DSeries} series - The 3D series for which to determine the range.\r\n     * @returns {void}\r\n     */\r\n    Double3D.prototype.yAxisRange = function (axis, series) {\r\n        this.findMinMax(series.yMin, series.yMax);\r\n    };\r\n    /**\r\n     * Finds and updates the minimum and maximum values within a given range.\r\n     *\r\n     * @param {Object} min - The minimum value to compare.\r\n     * @param {Object} max - The maximum value to compare.\r\n     * @returns {void}\r\n     */\r\n    Double3D.prototype.findMinMax = function (min, max) {\r\n        if (this.min === null || this.min > min) {\r\n            this.min = min;\r\n        }\r\n        if (this.max === null || this.max < max) {\r\n            this.max = max;\r\n        }\r\n        if ((this.max === this.min) && this.max < 0 && this.min < 0) { // max == min\r\n            this.max = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Apply padding for the range.\r\n     *\r\n     * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n     * @param {Size} size - Specifies the size of the axis.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Double3D.prototype.applyRangePadding = function (axis, size) {\r\n        var start = axis.actualRange.min;\r\n        var end = axis.actualRange.max;\r\n        if (!setRange(axis)) {\r\n            var interval = axis.actualRange.interval;\r\n            var padding = axis.getRangePadding(this.chart);\r\n            if (padding === 'Additional' || padding === 'Round') {\r\n                this.findAdditional(axis, start, end, interval, size);\r\n            }\r\n            else if (padding === 'Normal') {\r\n                this.findNormal(axis, start, end, interval, size);\r\n            }\r\n            else {\r\n                this.updateActualRange(axis, start, end, interval);\r\n            }\r\n        }\r\n        axis.actualRange.delta = axis.actualRange.max - axis.actualRange.min;\r\n        this.calculateVisibleRange(size, axis);\r\n    };\r\n    /**\r\n     * Updates the actual range of the 3D axis with specified minimum, maximum, and interval values.\r\n     *\r\n     * @param {Chart3DAxis} axis - The 3D axis to update.\r\n     * @param {number} minimum - The minimum value for the axis.\r\n     * @param {number} maximum - The maximum value for the axis.\r\n     * @param {number} interval - The interval value for the axis.\r\n     * @returns {void}\r\n     */\r\n    Double3D.prototype.updateActualRange = function (axis, minimum, maximum, interval) {\r\n        axis.actualRange = {\r\n            min: axis.minimum != null ? axis.minimum : minimum,\r\n            max: axis.maximum != null ? axis.maximum : maximum,\r\n            interval: axis.interval != null ? axis.interval : interval,\r\n            delta: axis.actualRange.delta\r\n        };\r\n    };\r\n    /**\r\n     * Finds additional range for the 3D axis based on specified start, end, interval, and size values.\r\n     *\r\n     * @param {Chart3DAxis} axis - The 3D axis to find additional range for.\r\n     * @param {number} start - The start value for the axis range.\r\n     * @param {number} end - The end value for the axis range.\r\n     * @param {number} interval - The interval value for the axis.\r\n     * @param {Size} size - The size of the chart area.\r\n     * @returns {void}\r\n     */\r\n    Double3D.prototype.findAdditional = function (axis, start, end, interval, size) {\r\n        var minimum;\r\n        var maximum;\r\n        minimum = Math.floor(start / interval) * interval;\r\n        maximum = Math.ceil(end / interval) * interval;\r\n        if (axis.rangePadding === 'Additional') {\r\n            minimum -= interval;\r\n            maximum += interval;\r\n        }\r\n        if (!isNullOrUndefined(axis.desiredIntervals)) {\r\n            var delta = maximum - minimum;\r\n            interval = this.calculateNumericNiceInterval(axis, delta, size);\r\n        }\r\n        this.updateActualRange(axis, minimum, maximum, interval);\r\n    };\r\n    /**\r\n     * Finds normal range for the 3D axis based on specified start, end, interval, and size values.\r\n     *\r\n     * @param {Chart3DAxis} axis - The 3D axis to find normal range for.\r\n     * @param {number} start - The start value for the axis range.\r\n     * @param {number} end - The end value for the axis range.\r\n     * @param {number} interval - The interval value for the axis.\r\n     * @param {Size} size - The size of the chart area.\r\n     * @returns {void}\r\n     */\r\n    Double3D.prototype.findNormal = function (axis, start, end, interval, size) {\r\n        var remaining;\r\n        var minimum;\r\n        var maximum;\r\n        var startValue = start;\r\n        if (start < 0) {\r\n            startValue = 0;\r\n            minimum = start + (start * 0.05);\r\n            remaining = interval + (minimum % interval);\r\n            if ((0.365 * interval) >= remaining) {\r\n                minimum -= interval;\r\n            }\r\n            if (minimum % interval < 0) {\r\n                minimum = (minimum - interval) - (minimum % interval);\r\n            }\r\n        }\r\n        else {\r\n            minimum = start < ((5.0 / 6.0) * end) ? 0 : (start - (end - start) * 0.5);\r\n            if (minimum % interval > 0) {\r\n                minimum -= (minimum % interval);\r\n            }\r\n        }\r\n        maximum = (end > 0) ? (end + (end - startValue) * 0.05) : (end - (end - startValue) * 0.05);\r\n        remaining = interval - (maximum % interval);\r\n        if ((0.365 * interval) >= remaining) {\r\n            maximum += interval;\r\n        }\r\n        if (maximum % interval > 0) {\r\n            maximum = (maximum + interval) - (maximum % interval);\r\n        }\r\n        axis.doubleRange = new DoubleRange(minimum, maximum);\r\n        if (minimum === 0 || (minimum < 0 && maximum < 0)) {\r\n            interval = this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);\r\n            maximum = Math.ceil(maximum / interval) * interval;\r\n        }\r\n        this.updateActualRange(axis, minimum, maximum, interval);\r\n    };\r\n    /**\r\n     * Calculate visible range for axis.\r\n     *\r\n     * @param {Size} size - Specifies the size of the axis.\r\n     * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Double3D.prototype.calculateVisibleRange = function (size, axis) {\r\n        axis.visibleRange = {\r\n            max: axis.actualRange.max, min: axis.actualRange.min,\r\n            delta: axis.actualRange.delta, interval: axis.actualRange.interval\r\n        };\r\n        if (axis.maximum && axis.orientation === 'Vertical' && axis.rangePadding === 'Auto') {\r\n            var duplicateTempInterval = void 0;\r\n            var tempInterval = axis.visibleRange.min;\r\n            for (; (tempInterval <= axis.visibleRange.max) && (duplicateTempInterval !== tempInterval); tempInterval += axis.visibleRange.interval) {\r\n                duplicateTempInterval = tempInterval;\r\n            }\r\n            if (duplicateTempInterval < axis.visibleRange.max) {\r\n                axis.visibleRange.max = duplicateTempInterval + axis.visibleRange.interval;\r\n            }\r\n        }\r\n        axis.triggerRangeRender(this.chart, axis.visibleRange.min, axis.visibleRange.max, axis.visibleRange.interval);\r\n    };\r\n    /**\r\n     * Calculates the visible label for the axis.\r\n     *\r\n     * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n     * @param {Chart3D} chart - Specifies the instance of the chart.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Double3D.prototype.calculateVisibleLabels = function (axis, chart) {\r\n        /** Generate axis labels */\r\n        axis.visibleLabels = [];\r\n        var tempInterval = axis.visibleRange.min;\r\n        var labelStyle;\r\n        var format = this.getFormat(axis);\r\n        var isCustom = format.match('{value}') !== null;\r\n        var intervalDigits = 0;\r\n        var formatDigits = 0;\r\n        if (axis.labelFormat && axis.labelFormat.indexOf('n') > -1) {\r\n            formatDigits = parseInt(axis.labelFormat.substring(1, axis.labelFormat.length), 10);\r\n        }\r\n        axis.format = chart.intl.getNumberFormat({\r\n            format: isCustom ? '' : format,\r\n            useGrouping: chart.useGroupingSeparator\r\n        });\r\n        axis.startLabel = axis.format(axis.visibleRange.min);\r\n        axis.endLabel = axis.format(axis.visibleRange.max);\r\n        if (axis.visibleRange.interval && (axis.visibleRange.interval + '').indexOf('.') >= 0) {\r\n            intervalDigits = (axis.visibleRange.interval + '').split('.')[1].length;\r\n        }\r\n        var duplicateTempInterval;\r\n        for (; (tempInterval <= axis.visibleRange.max) && (duplicateTempInterval !== tempInterval); tempInterval += axis.visibleRange.interval) {\r\n            duplicateTempInterval = tempInterval;\r\n            labelStyle = (extend({}, getValue('properties', axis.labelStyle), null, true));\r\n            if (withIn(tempInterval, axis.visibleRange)) {\r\n                triggerLabelRender(chart, tempInterval, this.formatValue(axis, isCustom, format, tempInterval), labelStyle, axis);\r\n            }\r\n        }\r\n        if (tempInterval && (tempInterval + '').indexOf('.') >= 0 && (tempInterval + '').split('.')[1].length > 10) {\r\n            tempInterval = (tempInterval + '').split('.')[1].length > (formatDigits || intervalDigits) ?\r\n                +tempInterval.toFixed(formatDigits || intervalDigits) : tempInterval;\r\n            if (tempInterval <= axis.visibleRange.max) {\r\n                triggerLabelRender(chart, tempInterval, this.formatValue(axis, isCustom, format, tempInterval), labelStyle, axis);\r\n            }\r\n        }\r\n        if (axis.getMaxLabelWidth) {\r\n            axis.getMaxLabelWidth(this.chart);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the format for the axis label.\r\n     *\r\n     * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n     * @returns {string} - Returns the string value.\r\n     * @private\r\n     */\r\n    Double3D.prototype.getFormat = function (axis) {\r\n        if (axis.labelFormat) {\r\n            if (axis.labelFormat.indexOf('p') === 0 && axis.labelFormat.indexOf('{value}') === -1 && axis.isStack100) {\r\n                return '{value}%';\r\n            }\r\n            return axis.labelFormat;\r\n        }\r\n        return axis.isStack100 ? '{value}%' : '';\r\n    };\r\n    /**\r\n     * Formats the axis label.\r\n     *\r\n     * @param {Chart3DAxis} axis - Specifies the instance of the axis.\r\n     * @param {boolean} isCustom - Specifies whether the format is custom.\r\n     * @param {string} format - Specifies the format of the axis label.\r\n     * @param {number} tempInterval - Specifies the interval of the axis label.\r\n     * @returns {string} - Returns the string value.\r\n     * @private\r\n     */\r\n    Double3D.prototype.formatValue = function (axis, isCustom, format, tempInterval) {\r\n        var labelValue = !(tempInterval % 1) ? tempInterval : Number(tempInterval.toLocaleString().split(',').join(''));\r\n        return isCustom ? format.replace('{value}', axis.format(labelValue))\r\n            : format ? axis.format(tempInterval) : axis.format(labelValue);\r\n    };\r\n    /**\r\n     * Gets the module name.\r\n     *\r\n     * @returns {string} - the module name.\r\n     */\r\n    Double3D.prototype.getModuleName = function () {\r\n        /**\r\n         * Returns the module name.\r\n         */\r\n        return 'Double3D';\r\n    };\r\n    return Double3D;\r\n}());\r\nexport { Double3D };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}