{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { Double3D } from '../axis/double-axis';\nimport { getActualDesiredIntervalsCount, triggerLabelRender } from '../../common/utils/helper';\nimport { logBase, withIn } from '../../common/utils/helper';\nimport { extend, getValue } from '@syncfusion/ej2-base';\n/**\r\n * The `Logarithmic` module is used to render log axis.\r\n */\nvar Logarithmic3D = /** @class */function (_super) {\n  __extends(Logarithmic3D, _super);\n  /**\r\n   * Constructor for the logerithmic module.\r\n   *\r\n   * @param {Chart3D} chart - Chart3D instance.\r\n   * @private\r\n   */\n  function Logarithmic3D(chart) {\n    return _super.call(this, chart) || this;\n  }\n  /**\r\n   * Calculates the range and interval for the specified axis based on the provided size.\r\n   *\r\n   * @param {Size} size - The size of the chart area used for range and interval calculation.\r\n   * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n   * @returns {void}\r\n   */\n  Logarithmic3D.prototype.calculateRangeAndInterval = function (size, axis) {\n    this.calculateRange(axis);\n    this.getActualRange(axis, size);\n    this.calculateVisibleRange(size, axis);\n    this.calculateVisibleLabels(axis, this.chart);\n  };\n  /**\r\n   * Calculates actual range for the axis.\r\n   *\r\n   * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n   * @param {Size} size - The size of the axis.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Logarithmic3D.prototype.getActualRange = function (axis, size) {\n    this.initializeDoubleRange(axis);\n    this.min = this.min < 0 ? 0 : this.min;\n    var logStart = logBase(this.min, axis.logBase);\n    logStart = isFinite(logStart) ? logStart : this.min;\n    var logEnd = this.max === 1 ? 1 : logBase(this.max, axis.logBase);\n    logEnd = isFinite(logStart) ? logEnd : this.max;\n    this.min = Math.floor(logStart / 1);\n    var isRectSeries = axis.series && axis.series.some(function (item) {\n      return item.type.indexOf('Column') !== -1 || item.type.indexOf('Bar') !== -1;\n    });\n    if (isRectSeries) {\n      this.min = this.min <= 0 ? +this.min - 1 : this.min;\n    }\n    this.max = Math.ceil(logEnd / 1);\n    this.max = this.max === this.min ? this.max + 1 : this.max;\n    axis.actualRange.interval = axis.interval || this.calculateLogNiceInterval(this.max - this.min, size, axis);\n    axis.actualRange.min = this.min;\n    axis.actualRange.max = this.max;\n    axis.actualRange.delta = this.max - this.min;\n  };\n  /**\r\n   * Calculates visible range for the axis.\r\n   *\r\n   * @param {Size} size - The size of the axis.\r\n   * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Logarithmic3D.prototype.calculateVisibleRange = function (size, axis) {\n    axis.visibleRange = {\n      interval: axis.actualRange.interval,\n      max: axis.actualRange.max,\n      min: axis.actualRange.min,\n      delta: axis.actualRange.delta\n    };\n  };\n  /**\r\n   * Calculates log inteval for the axis.\r\n   *\r\n   * @param {number} delta - The delta value.\r\n   * @param {Size} size - The size of the axis.\r\n   * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n   * @returns {number} - Returns the log interval.\r\n   * @private\r\n   */\n  Logarithmic3D.prototype.calculateLogNiceInterval = function (delta, size, axis) {\n    var actualDesiredIntervalsCount = getActualDesiredIntervalsCount(size, axis);\n    var niceInterval = delta;\n    var minInterval = Math.pow(axis.logBase, Math.floor(logBase(niceInterval, 10)));\n    for (var j = 0, len = axis.intervalDivs.length; j < len; j++) {\n      var currentInterval = minInterval * axis.intervalDivs[j];\n      if (actualDesiredIntervalsCount < delta / currentInterval) {\n        break;\n      }\n      niceInterval = currentInterval;\n    }\n    return niceInterval;\n  };\n  /**\r\n   * Calculates labels for the axis.\r\n   *\r\n   * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n   * @param {Chart3D} chart - Specifies the instance of the chart.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Logarithmic3D.prototype.calculateVisibleLabels = function (axis, chart) {\n    /** Generate axis labels */\n    var tempInterval = axis.visibleRange.min;\n    axis.visibleLabels = [];\n    var labelStyle;\n    var value;\n    var axisFormat = this.getFormat(axis);\n    var isCustomFormat = axisFormat.match('{value}') !== null;\n    var startValue = Math.pow(axis.logBase, axis.visibleRange.min);\n    axis.format = chart.intl.getNumberFormat({\n      format: isCustomFormat ? '' : axisFormat,\n      useGrouping: chart.useGroupingSeparator,\n      maximumFractionDigits: startValue < 1 ? 20 : 3\n    });\n    axis.startLabel = axis.format(startValue < 1 ? +startValue.toPrecision(1) : startValue);\n    axis.endLabel = axis.format(Math.pow(axis.logBase, axis.visibleRange.max));\n    for (; tempInterval <= axis.visibleRange.max; tempInterval += axis.visibleRange.interval) {\n      labelStyle = extend({}, getValue('properties', axis.labelStyle), null, true);\n      if (withIn(tempInterval, axis.visibleRange)) {\n        value = Math.pow(axis.logBase, tempInterval);\n        triggerLabelRender(this.chart, tempInterval, this.formatValue(axis, isCustomFormat, axisFormat, value < 1 ? +value.toPrecision(1) : value), labelStyle, axis);\n      }\n    }\n    if (axis.getMaxLabelWidth) {\n      axis.getMaxLabelWidth(this.chart);\n    }\n  };\n  /**\r\n   * Get module name.\r\n   *\r\n   * @returns {string} - Returns the module name.\r\n   */\n  Logarithmic3D.prototype.getModuleName = function () {\n    /**\r\n     * Returns the module name\r\n     */\n    return 'Logarithmic3D';\n  };\n  /**\r\n   * To destroy the category axis.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  Logarithmic3D.prototype.destroy = function () {\n    /**\r\n     * Destroy method performed here\r\n     */\n  };\n  return Logarithmic3D;\n}(Double3D);\nexport { Logarithmic3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Double3D","getActualDesiredIntervalsCount","triggerLabelRender","logBase","withIn","extend","getValue","Logarithmic3D","_super","chart","call","calculateRangeAndInterval","size","axis","calculateRange","getActualRange","calculateVisibleRange","calculateVisibleLabels","initializeDoubleRange","min","logStart","isFinite","logEnd","max","Math","floor","isRectSeries","series","some","item","type","indexOf","ceil","actualRange","interval","calculateLogNiceInterval","delta","visibleRange","actualDesiredIntervalsCount","niceInterval","minInterval","pow","j","len","intervalDivs","length","currentInterval","tempInterval","visibleLabels","labelStyle","value","axisFormat","getFormat","isCustomFormat","match","startValue","format","intl","getNumberFormat","useGrouping","useGroupingSeparator","maximumFractionDigits","startLabel","toPrecision","endLabel","formatValue","getMaxLabelWidth","getModuleName","destroy"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/chart3d/axis/logarithmic-axis.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Double3D } from '../axis/double-axis';\r\nimport { getActualDesiredIntervalsCount, triggerLabelRender } from '../../common/utils/helper';\r\nimport { logBase, withIn } from '../../common/utils/helper';\r\nimport { extend, getValue } from '@syncfusion/ej2-base';\r\n/**\r\n * The `Logarithmic` module is used to render log axis.\r\n */\r\nvar Logarithmic3D = /** @class */ (function (_super) {\r\n    __extends(Logarithmic3D, _super);\r\n    /**\r\n     * Constructor for the logerithmic module.\r\n     *\r\n     * @param {Chart3D} chart - Chart3D instance.\r\n     * @private\r\n     */\r\n    function Logarithmic3D(chart) {\r\n        return _super.call(this, chart) || this;\r\n    }\r\n    /**\r\n     * Calculates the range and interval for the specified axis based on the provided size.\r\n     *\r\n     * @param {Size} size - The size of the chart area used for range and interval calculation.\r\n     * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n     * @returns {void}\r\n     */\r\n    Logarithmic3D.prototype.calculateRangeAndInterval = function (size, axis) {\r\n        this.calculateRange(axis);\r\n        this.getActualRange(axis, size);\r\n        this.calculateVisibleRange(size, axis);\r\n        this.calculateVisibleLabels(axis, this.chart);\r\n    };\r\n    /**\r\n     * Calculates actual range for the axis.\r\n     *\r\n     * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n     * @param {Size} size - The size of the axis.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Logarithmic3D.prototype.getActualRange = function (axis, size) {\r\n        this.initializeDoubleRange(axis);\r\n        this.min = this.min < 0 ? 0 : this.min;\r\n        var logStart = logBase(this.min, axis.logBase);\r\n        logStart = isFinite(logStart) ? logStart : this.min;\r\n        var logEnd = this.max === 1 ? 1 : logBase(this.max, axis.logBase);\r\n        logEnd = isFinite(logStart) ? logEnd : this.max;\r\n        this.min = Math.floor(logStart / 1);\r\n        var isRectSeries = axis.series && axis.series.some(function (item) {\r\n            return (item.type.indexOf('Column') !== -1 || item.type.indexOf('Bar') !== -1);\r\n        });\r\n        if (isRectSeries) {\r\n            this.min = (this.min <= 0) ? (+this.min - 1) : this.min;\r\n        }\r\n        this.max = Math.ceil(logEnd / 1);\r\n        this.max = this.max === this.min ? this.max + 1 : this.max;\r\n        axis.actualRange.interval = axis.interval || this.calculateLogNiceInterval(this.max - this.min, size, axis);\r\n        axis.actualRange.min = this.min;\r\n        axis.actualRange.max = this.max;\r\n        axis.actualRange.delta = this.max - this.min;\r\n    };\r\n    /**\r\n     * Calculates visible range for the axis.\r\n     *\r\n     * @param {Size} size - The size of the axis.\r\n     * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Logarithmic3D.prototype.calculateVisibleRange = function (size, axis) {\r\n        axis.visibleRange = {\r\n            interval: axis.actualRange.interval, max: axis.actualRange.max,\r\n            min: axis.actualRange.min, delta: axis.actualRange.delta\r\n        };\r\n    };\r\n    /**\r\n     * Calculates log inteval for the axis.\r\n     *\r\n     * @param {number} delta - The delta value.\r\n     * @param {Size} size - The size of the axis.\r\n     * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n     * @returns {number} - Returns the log interval.\r\n     * @private\r\n     */\r\n    Logarithmic3D.prototype.calculateLogNiceInterval = function (delta, size, axis) {\r\n        var actualDesiredIntervalsCount = getActualDesiredIntervalsCount(size, axis);\r\n        var niceInterval = delta;\r\n        var minInterval = Math.pow(axis.logBase, Math.floor(logBase(niceInterval, 10)));\r\n        for (var j = 0, len = axis.intervalDivs.length; j < len; j++) {\r\n            var currentInterval = minInterval * axis.intervalDivs[j];\r\n            if (actualDesiredIntervalsCount < (delta / currentInterval)) {\r\n                break;\r\n            }\r\n            niceInterval = currentInterval;\r\n        }\r\n        return niceInterval;\r\n    };\r\n    /**\r\n     * Calculates labels for the axis.\r\n     *\r\n     * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\r\n     * @param {Chart3D} chart - Specifies the instance of the chart.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Logarithmic3D.prototype.calculateVisibleLabels = function (axis, chart) {\r\n        /** Generate axis labels */\r\n        var tempInterval = axis.visibleRange.min;\r\n        axis.visibleLabels = [];\r\n        var labelStyle;\r\n        var value;\r\n        var axisFormat = this.getFormat(axis);\r\n        var isCustomFormat = axisFormat.match('{value}') !== null;\r\n        var startValue = Math.pow(axis.logBase, axis.visibleRange.min);\r\n        axis.format = chart.intl.getNumberFormat({\r\n            format: isCustomFormat ? '' : axisFormat,\r\n            useGrouping: chart.useGroupingSeparator,\r\n            maximumFractionDigits: startValue < 1 ? 20 : 3\r\n        });\r\n        axis.startLabel = axis.format(startValue < 1 ? +startValue.toPrecision(1) : startValue);\r\n        axis.endLabel = axis.format(Math.pow(axis.logBase, axis.visibleRange.max));\r\n        for (; tempInterval <= axis.visibleRange.max; tempInterval += axis.visibleRange.interval) {\r\n            labelStyle = (extend({}, getValue('properties', axis.labelStyle), null, true));\r\n            if (withIn(tempInterval, axis.visibleRange)) {\r\n                value = Math.pow(axis.logBase, tempInterval);\r\n                triggerLabelRender(this.chart, tempInterval, this.formatValue(axis, isCustomFormat, axisFormat, value < 1 ? +value.toPrecision(1) : value), labelStyle, axis);\r\n            }\r\n        }\r\n        if (axis.getMaxLabelWidth) {\r\n            axis.getMaxLabelWidth(this.chart);\r\n        }\r\n    };\r\n    /**\r\n     * Get module name.\r\n     *\r\n     * @returns {string} - Returns the module name.\r\n     */\r\n    Logarithmic3D.prototype.getModuleName = function () {\r\n        /**\r\n         * Returns the module name\r\n         */\r\n        return 'Logarithmic3D';\r\n    };\r\n    /**\r\n     * To destroy the category axis.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Logarithmic3D.prototype.destroy = function () {\r\n        /**\r\n         * Destroy method performed here\r\n         */\r\n    };\r\n    return Logarithmic3D;\r\n}(Double3D));\r\nexport { Logarithmic3D };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}