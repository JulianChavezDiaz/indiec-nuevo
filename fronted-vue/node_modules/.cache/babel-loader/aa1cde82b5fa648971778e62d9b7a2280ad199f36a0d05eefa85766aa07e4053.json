{"ast":null,"code":"/**\r\n * PdfPen.ts class for EJ2-PDF\r\n */\nimport { PdfColor } from './pdf-color';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfDashStyle, PdfColorSpace } from './enum';\nimport { PdfBrush } from './brushes/pdf-brush';\n/**\r\n * `PdfPen` class defining settings for drawing operations, that determines the color,\r\n * width, and style of the drawing elements.\r\n * ```typescript\r\n * // create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // create a new page\r\n * let page1 : PdfPage = document.pages.add();\r\n * // set pen\r\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n * // draw rectangle\r\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n * // save the document.\r\n * document.save('output.pdf');\r\n * // destroy the document\r\n * document.destroy();\r\n * ```\r\n */\nvar PdfPen = /** @class */function () {\n  function PdfPen(arg1, arg2) {\n    //Fields\n    /**\r\n     * Specifies the `color of the pen`.\r\n     * @default new PdfColor()\r\n     * @private\r\n     */\n    this.pdfColor = new PdfColor(0, 0, 0);\n    /**\r\n     * Specifies the `dash offset of the pen`.\r\n     * @default 0\r\n     * @private\r\n     */\n    this.dashOffsetValue = 0;\n    /**\r\n     * Specifies the `dash pattern of the pen`.\r\n     * @default [0]\r\n     * @private\r\n     */\n    this.penDashPattern = [0];\n    /**\r\n     * Specifies the `dash style of the pen`.\r\n     * @default Solid\r\n     * @private\r\n     */\n    this.pdfDashStyle = PdfDashStyle.Solid;\n    /**\r\n     * Specifies the `line cap of the pen`.\r\n     * @default 0\r\n     * @private\r\n     */\n    this.pdfLineCap = 0;\n    /**\r\n     * Specifies the `line join of the pen`.\r\n     * @default 0\r\n     * @private\r\n     */\n    this.pdfLineJoin = 0;\n    /**\r\n     * Specifies the `width of the pen`.\r\n     * @default 1.0\r\n     * @private\r\n     */\n    this.penWidth = 1.0;\n    /**\r\n     * Specifies the `mitter limit of the pen`.\r\n     * @default 0.0\r\n     * @private\r\n     */\n    this.internalMiterLimit = 0.0;\n    /**\r\n     * Stores the `colorspace` value.\r\n     * @default Rgb\r\n     * @private\r\n     */\n    this.colorSpace = PdfColorSpace.Rgb;\n    if (arg1 instanceof PdfBrush) {\n      this.setBrush(arg1);\n    } else if (arg1 instanceof PdfColor) {\n      this.color = arg1;\n    }\n    if (typeof arg2 === 'number') {\n      this.width = arg2;\n    }\n  }\n  Object.defineProperty(PdfPen.prototype, \"color\", {\n    //Properties\n    /**\r\n     * Gets or sets the `color of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfColor;\n    },\n    set: function (value) {\n      this.pdfColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\n    /**\r\n     * Gets or sets the `dash offset of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\n        return 0;\n      } else {\n        return this.dashOffsetValue;\n      }\n    },\n    set: function (value) {\n      this.dashOffsetValue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\n    /**\r\n     * Gets or sets the `dash pattern of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.penDashPattern;\n    },\n    set: function (value) {\n      this.penDashPattern = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\n    /**\r\n     * Gets or sets the `dash style of the pen`.\r\n     * ```typescript\r\n     * // create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // create a new page\r\n     * let page1 : PdfPage = document.pages.add();\r\n     * // set pen\r\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n     * //\r\n     * // set pen style\r\n     * pen.dashStyle = PdfDashStyle.DashDot;\r\n     * // get pen style\r\n     * let style : PdfDashStyle = pen.dashStyle;\r\n     * //\r\n     * // draw rectangle\r\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n     * // save the document.\r\n     * document.save('output.pdf');\r\n     * // destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this.pdfDashStyle;\n    },\n    set: function (value) {\n      if (this.pdfDashStyle !== value) {\n        this.pdfDashStyle = value;\n        switch (this.pdfDashStyle) {\n          case PdfDashStyle.Custom:\n            break;\n          case PdfDashStyle.Dash:\n            this.penDashPattern = [3, 1];\n            break;\n          case PdfDashStyle.Dot:\n            this.penDashPattern = [1, 1];\n            break;\n          case PdfDashStyle.DashDot:\n            this.penDashPattern = [3, 1, 1, 1];\n            break;\n          case PdfDashStyle.DashDotDot:\n            this.penDashPattern = [3, 1, 1, 1, 1, 1];\n            break;\n          case PdfDashStyle.Solid:\n            break;\n          default:\n            this.pdfDashStyle = PdfDashStyle.Solid;\n            this.penDashPattern = [0];\n            break;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineCap\", {\n    /**\r\n     * Gets or sets the `line cap of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfLineCap;\n    },\n    set: function (value) {\n      this.pdfLineCap = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\n    /**\r\n     * Gets or sets the `line join style of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfLineJoin;\n    },\n    set: function (value) {\n      this.pdfLineJoin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\n    /**\r\n     * Gets or sets the `miter limit`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.internalMiterLimit;\n    },\n    set: function (value) {\n      this.internalMiterLimit = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"width\", {\n    /**\r\n     * Gets or sets the `width of the pen`.\r\n     * ```typescript\r\n     * // create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // create a new page\r\n     * let page1 : PdfPage = document.pages.add();\r\n     * // set pen\r\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n     * //\r\n     * // set pen width\r\n     * pen.width = 2;\r\n     * //\r\n     * // draw rectangle\r\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n     * // save the document.\r\n     * document.save('output.pdf');\r\n     * // destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this.penWidth;\n    },\n    set: function (value) {\n      this.penWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Helper\n  /**\r\n   * `Clones` this instance of PdfPen class.\r\n   * @private\r\n   */\n  PdfPen.prototype.clone = function () {\n    var pen = this;\n    return pen;\n  };\n  /**\r\n   * `Sets the brush`.\r\n   * @private\r\n   */\n  PdfPen.prototype.setBrush = function (brush) {\n    var sBrush = brush;\n    if (sBrush != null && sBrush instanceof PdfSolidBrush) {\n      this.color = sBrush.color;\n      this.pdfBrush = sBrush;\n    }\n    this.color = sBrush.color;\n    this.pdfBrush = sBrush;\n  };\n  /**\r\n   * `Monitors the changes`.\r\n   * @private\r\n   */\n  PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\n    var diff = false;\n    saveState = true;\n    if (currentPen == null) {\n      diff = true;\n    }\n    diff = this.dashControl(currentPen, saveState, streamWriter);\n    streamWriter.setLineWidth(this.width);\n    streamWriter.setLineJoin(this.lineJoin);\n    streamWriter.setLineCap(this.lineCap);\n    var miterLimit = this.miterLimit;\n    if (miterLimit > 0) {\n      streamWriter.setMiterLimit(miterLimit);\n      diff = true;\n    }\n    var brush = this.pdfBrush;\n    streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\n    diff = true;\n    return diff;\n  };\n  /**\r\n   * `Controls the dash style` and behaviour of each line.\r\n   * @private\r\n   */\n  PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\n    saveState = true;\n    var lineWidth = this.width;\n    var pattern = this.getPattern();\n    streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\n    return saveState;\n  };\n  /**\r\n   * `Gets the pattern` of PdfPen.\r\n   * @private\r\n   */\n  PdfPen.prototype.getPattern = function () {\n    var pattern = this.dashPattern;\n    for (var i = 0; i < pattern.length; ++i) {\n      pattern[i] *= this.width;\n    }\n    return pattern;\n  };\n  return PdfPen;\n}();\nexport { PdfPen };","map":{"version":3,"names":["PdfColor","PdfSolidBrush","PdfDashStyle","PdfColorSpace","PdfBrush","PdfPen","arg1","arg2","pdfColor","dashOffsetValue","penDashPattern","pdfDashStyle","Solid","pdfLineCap","pdfLineJoin","penWidth","internalMiterLimit","colorSpace","Rgb","setBrush","color","width","Object","defineProperty","prototype","get","set","value","enumerable","configurable","Custom","Dash","Dot","DashDot","DashDotDot","clone","pen","brush","sBrush","pdfBrush","monitorChanges","currentPen","streamWriter","getResources","saveState","currentColorSpace","matrix","diff","dashControl","setLineWidth","setLineJoin","lineJoin","setLineCap","lineCap","miterLimit","setMiterLimit","setColorAndSpace","lineWidth","pattern","getPattern","setLineDashPattern","dashOffset","dashPattern","i","length"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-pen.js"],"sourcesContent":["/**\r\n * PdfPen.ts class for EJ2-PDF\r\n */\r\nimport { PdfColor } from './pdf-color';\r\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\r\nimport { PdfDashStyle, PdfColorSpace } from './enum';\r\nimport { PdfBrush } from './brushes/pdf-brush';\r\n/**\r\n * `PdfPen` class defining settings for drawing operations, that determines the color,\r\n * width, and style of the drawing elements.\r\n * ```typescript\r\n * // create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // create a new page\r\n * let page1 : PdfPage = document.pages.add();\r\n * // set pen\r\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n * // draw rectangle\r\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n * // save the document.\r\n * document.save('output.pdf');\r\n * // destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nvar PdfPen = /** @class */ (function () {\r\n    function PdfPen(arg1, arg2) {\r\n        //Fields\r\n        /**\r\n         * Specifies the `color of the pen`.\r\n         * @default new PdfColor()\r\n         * @private\r\n         */\r\n        this.pdfColor = new PdfColor(0, 0, 0);\r\n        /**\r\n         * Specifies the `dash offset of the pen`.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.dashOffsetValue = 0;\r\n        /**\r\n         * Specifies the `dash pattern of the pen`.\r\n         * @default [0]\r\n         * @private\r\n         */\r\n        this.penDashPattern = [0];\r\n        /**\r\n         * Specifies the `dash style of the pen`.\r\n         * @default Solid\r\n         * @private\r\n         */\r\n        this.pdfDashStyle = PdfDashStyle.Solid;\r\n        /**\r\n         * Specifies the `line cap of the pen`.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.pdfLineCap = 0;\r\n        /**\r\n         * Specifies the `line join of the pen`.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.pdfLineJoin = 0;\r\n        /**\r\n         * Specifies the `width of the pen`.\r\n         * @default 1.0\r\n         * @private\r\n         */\r\n        this.penWidth = 1.0;\r\n        /**\r\n         * Specifies the `mitter limit of the pen`.\r\n         * @default 0.0\r\n         * @private\r\n         */\r\n        this.internalMiterLimit = 0.0;\r\n        /**\r\n         * Stores the `colorspace` value.\r\n         * @default Rgb\r\n         * @private\r\n         */\r\n        this.colorSpace = PdfColorSpace.Rgb;\r\n        if (arg1 instanceof PdfBrush) {\r\n            this.setBrush(arg1);\r\n        }\r\n        else if (arg1 instanceof PdfColor) {\r\n            this.color = arg1;\r\n        }\r\n        if (typeof arg2 === 'number') {\r\n            this.width = arg2;\r\n        }\r\n    }\r\n    Object.defineProperty(PdfPen.prototype, \"color\", {\r\n        //Properties\r\n        /**\r\n         * Gets or sets the `color of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfColor;\r\n        },\r\n        set: function (value) {\r\n            this.pdfColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\r\n        /**\r\n         * Gets or sets the `dash offset of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.dashOffsetValue;\r\n            }\r\n        },\r\n        set: function (value) {\r\n            this.dashOffsetValue = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\r\n        /**\r\n         * Gets or sets the `dash pattern of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.penDashPattern;\r\n        },\r\n        set: function (value) {\r\n            this.penDashPattern = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\r\n        /**\r\n         * Gets or sets the `dash style of the pen`.\r\n         * ```typescript\r\n         * // create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // create a new page\r\n         * let page1 : PdfPage = document.pages.add();\r\n         * // set pen\r\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n         * //\r\n         * // set pen style\r\n         * pen.dashStyle = PdfDashStyle.DashDot;\r\n         * // get pen style\r\n         * let style : PdfDashStyle = pen.dashStyle;\r\n         * //\r\n         * // draw rectangle\r\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n         * // save the document.\r\n         * document.save('output.pdf');\r\n         * // destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this.pdfDashStyle;\r\n        },\r\n        set: function (value) {\r\n            if (this.pdfDashStyle !== value) {\r\n                this.pdfDashStyle = value;\r\n                switch (this.pdfDashStyle) {\r\n                    case PdfDashStyle.Custom:\r\n                        break;\r\n                    case PdfDashStyle.Dash:\r\n                        this.penDashPattern = [3, 1];\r\n                        break;\r\n                    case PdfDashStyle.Dot:\r\n                        this.penDashPattern = [1, 1];\r\n                        break;\r\n                    case PdfDashStyle.DashDot:\r\n                        this.penDashPattern = [3, 1, 1, 1];\r\n                        break;\r\n                    case PdfDashStyle.DashDotDot:\r\n                        this.penDashPattern = [3, 1, 1, 1, 1, 1];\r\n                        break;\r\n                    case PdfDashStyle.Solid:\r\n                        break;\r\n                    default:\r\n                        this.pdfDashStyle = PdfDashStyle.Solid;\r\n                        this.penDashPattern = [0];\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"lineCap\", {\r\n        /**\r\n         * Gets or sets the `line cap of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfLineCap;\r\n        },\r\n        set: function (value) {\r\n            this.pdfLineCap = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\r\n        /**\r\n         * Gets or sets the `line join style of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfLineJoin;\r\n        },\r\n        set: function (value) {\r\n            this.pdfLineJoin = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\r\n        /**\r\n         * Gets or sets the `miter limit`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.internalMiterLimit;\r\n        },\r\n        set: function (value) {\r\n            this.internalMiterLimit = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"width\", {\r\n        /**\r\n         * Gets or sets the `width of the pen`.\r\n         * ```typescript\r\n         * // create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // create a new page\r\n         * let page1 : PdfPage = document.pages.add();\r\n         * // set pen\r\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n         * //\r\n         * // set pen width\r\n         * pen.width = 2;\r\n         * //\r\n         * // draw rectangle\r\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n         * // save the document.\r\n         * document.save('output.pdf');\r\n         * // destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this.penWidth;\r\n        },\r\n        set: function (value) {\r\n            this.penWidth = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Helper\r\n    /**\r\n     * `Clones` this instance of PdfPen class.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.clone = function () {\r\n        var pen = this;\r\n        return pen;\r\n    };\r\n    /**\r\n     * `Sets the brush`.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.setBrush = function (brush) {\r\n        var sBrush = brush;\r\n        if ((sBrush != null && sBrush instanceof PdfSolidBrush)) {\r\n            this.color = sBrush.color;\r\n            this.pdfBrush = sBrush;\r\n        }\r\n        this.color = sBrush.color;\r\n        this.pdfBrush = sBrush;\r\n    };\r\n    /**\r\n     * `Monitors the changes`.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\r\n        var diff = false;\r\n        saveState = true;\r\n        if (currentPen == null) {\r\n            diff = true;\r\n        }\r\n        diff = this.dashControl(currentPen, saveState, streamWriter);\r\n        streamWriter.setLineWidth(this.width);\r\n        streamWriter.setLineJoin(this.lineJoin);\r\n        streamWriter.setLineCap(this.lineCap);\r\n        var miterLimit = this.miterLimit;\r\n        if (miterLimit > 0) {\r\n            streamWriter.setMiterLimit(miterLimit);\r\n            diff = true;\r\n        }\r\n        var brush = this.pdfBrush;\r\n        streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\r\n        diff = true;\r\n        return diff;\r\n    };\r\n    /**\r\n     * `Controls the dash style` and behaviour of each line.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\r\n        saveState = true;\r\n        var lineWidth = this.width;\r\n        var pattern = this.getPattern();\r\n        streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\r\n        return saveState;\r\n    };\r\n    /**\r\n     * `Gets the pattern` of PdfPen.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.getPattern = function () {\r\n        var pattern = this.dashPattern;\r\n        for (var i = 0; i < pattern.length; ++i) {\r\n            pattern[i] *= this.width;\r\n        }\r\n        return pattern;\r\n    };\r\n    return PdfPen;\r\n}());\r\nexport { PdfPen };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}