{"ast":null,"code":"import { ExportUtils } from '../../common/utils/export';\nimport { beforeExport } from '../../common/model/constants';\n/**\r\n * The `CircularChartExport3DModule` module is used to print and export the rendered chart.\r\n */\nvar CircularChartExport3D = /** @class */function () {\n  /**\r\n   * Constructor for the export module.\r\n   *\r\n   * @param {CircularChart3D} chart - The circular 3D chart.\r\n   * @private\r\n   */\n  function CircularChartExport3D(chart) {\n    this.chart = chart;\n  }\n  /**\r\n   * Export the circular 3D chart on the page to PNG, JPEG, or SVG format.\r\n   *\r\n   * @param {number} type - The format for exporting the chart (PNG, JPEG, or SVG).\r\n   * @param {string} fileName - The desired name for the exported file.\r\n   * @returns {void}\r\n   */\n  CircularChartExport3D.prototype.export = function (type, fileName) {\n    var exportChart = new ExportUtils(this.chart);\n    var argsData = {\n      cancel: false,\n      width: null,\n      height: null\n    };\n    this.chart.trigger(beforeExport, argsData);\n    if (!argsData.cancel) {\n      exportChart.export(type, fileName, undefined, [this.chart]);\n    }\n  };\n  /**\r\n   * Export the circular 3D chart on the page to a PDF document.\r\n   *\r\n   * @param {string} fileName - The name of the exported file.\r\n   * @param {PdfPageOrientation} orientation - Page orientation (portrait or landscape).\r\n   * @param {CircularChart3D[]} controls - Array of controls to be exported.\r\n   * @param {number} width - The width of the exported chart.\r\n   * @param {number} height - The height of the exported chart.\r\n   * @param {boolean} isVertical - Export the chart vertically or horizontally.\r\n   * @param {string} header - Text to appear at the top of the exported PDF document.\r\n   * @param {string} footer - Text to appear at the bottom of the exported PDF document.\r\n   * @param {boolean} exportToMultiplePage - Export the chart to multiple PDF pages.\r\n   * @returns {void}\r\n   */\n  CircularChartExport3D.prototype.pdfExport = function (fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\n    var exportChart = new ExportUtils(this.chart);\n    controls = controls ? controls : [this.chart];\n    var argsData = {\n      cancel: false,\n      width: width,\n      height: height\n    };\n    this.chart.trigger(beforeExport, argsData);\n    if (!argsData.cancel) {\n      exportChart.export('PDF', fileName, orientation, controls, width = argsData.width, height = argsData.height, isVertical, header, footer, exportToMultiplePage);\n    }\n  };\n  /**\r\n   * Gets a data URL for the rendered 3D chart as an HTML canvas element, including data URL and blob URL if available.\r\n   *\r\n   * @param {CircularChart3D} chart - The circular 3D chart for which the data URL is requested.\r\n   * @returns {{ element: HTMLCanvasElement, dataUrl?: string, blobUrl?: string }} - An object containing the HTML canvas element, data URL, and blob URL.\r\n   * @private\r\n   */\n  CircularChartExport3D.prototype.getDataUrl = function (chart) {\n    var exportUtil = new ExportUtils(chart);\n    return exportUtil.getDataUrl(chart);\n  };\n  /**\r\n   * Retrieves the module name for the circular 3D chart export.\r\n   *\r\n   * @returns {string} - The module name.\r\n   */\n  CircularChartExport3D.prototype.getModuleName = function () {\n    return 'CircularChartExport3D';\n  };\n  /**\r\n   * Destroys the export modules of the circular 3D chart.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  CircularChartExport3D.prototype.destroy = function () {\n    // Perform the destroy method here.\n  };\n  return CircularChartExport3D;\n}();\nexport { CircularChartExport3D };","map":{"version":3,"names":["ExportUtils","beforeExport","CircularChartExport3D","chart","prototype","export","type","fileName","exportChart","argsData","cancel","width","height","trigger","undefined","pdfExport","orientation","controls","isVertical","header","footer","exportToMultiplePage","getDataUrl","exportUtil","getModuleName","destroy"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/circularchart3d/print-export/export.js"],"sourcesContent":["import { ExportUtils } from '../../common/utils/export';\r\nimport { beforeExport } from '../../common/model/constants';\r\n/**\r\n * The `CircularChartExport3DModule` module is used to print and export the rendered chart.\r\n */\r\nvar CircularChartExport3D = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the export module.\r\n     *\r\n     * @param {CircularChart3D} chart - The circular 3D chart.\r\n     * @private\r\n     */\r\n    function CircularChartExport3D(chart) {\r\n        this.chart = chart;\r\n    }\r\n    /**\r\n     * Export the circular 3D chart on the page to PNG, JPEG, or SVG format.\r\n     *\r\n     * @param {number} type - The format for exporting the chart (PNG, JPEG, or SVG).\r\n     * @param {string} fileName - The desired name for the exported file.\r\n     * @returns {void}\r\n     */\r\n    CircularChartExport3D.prototype.export = function (type, fileName) {\r\n        var exportChart = new ExportUtils(this.chart);\r\n        var argsData = {\r\n            cancel: false, width: null, height: null\r\n        };\r\n        this.chart.trigger(beforeExport, argsData);\r\n        if (!argsData.cancel) {\r\n            exportChart.export(type, fileName, undefined, [this.chart]);\r\n        }\r\n    };\r\n    /**\r\n     * Export the circular 3D chart on the page to a PDF document.\r\n     *\r\n     * @param {string} fileName - The name of the exported file.\r\n     * @param {PdfPageOrientation} orientation - Page orientation (portrait or landscape).\r\n     * @param {CircularChart3D[]} controls - Array of controls to be exported.\r\n     * @param {number} width - The width of the exported chart.\r\n     * @param {number} height - The height of the exported chart.\r\n     * @param {boolean} isVertical - Export the chart vertically or horizontally.\r\n     * @param {string} header - Text to appear at the top of the exported PDF document.\r\n     * @param {string} footer - Text to appear at the bottom of the exported PDF document.\r\n     * @param {boolean} exportToMultiplePage - Export the chart to multiple PDF pages.\r\n     * @returns {void}\r\n     */\r\n    CircularChartExport3D.prototype.pdfExport = function (fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\r\n        var exportChart = new ExportUtils(this.chart);\r\n        controls = controls ? controls : [this.chart];\r\n        var argsData = {\r\n            cancel: false, width: width, height: height\r\n        };\r\n        this.chart.trigger(beforeExport, argsData);\r\n        if (!argsData.cancel) {\r\n            exportChart.export('PDF', fileName, orientation, controls, width = argsData.width, height = argsData.height, isVertical, header, footer, exportToMultiplePage);\r\n        }\r\n    };\r\n    /**\r\n     * Gets a data URL for the rendered 3D chart as an HTML canvas element, including data URL and blob URL if available.\r\n     *\r\n     * @param {CircularChart3D} chart - The circular 3D chart for which the data URL is requested.\r\n     * @returns {{ element: HTMLCanvasElement, dataUrl?: string, blobUrl?: string }} - An object containing the HTML canvas element, data URL, and blob URL.\r\n     * @private\r\n     */\r\n    CircularChartExport3D.prototype.getDataUrl = function (chart) {\r\n        var exportUtil = new ExportUtils(chart);\r\n        return exportUtil.getDataUrl(chart);\r\n    };\r\n    /**\r\n     * Retrieves the module name for the circular 3D chart export.\r\n     *\r\n     * @returns {string} - The module name.\r\n     */\r\n    CircularChartExport3D.prototype.getModuleName = function () {\r\n        return 'CircularChartExport3D';\r\n    };\r\n    /**\r\n     * Destroys the export modules of the circular 3D chart.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    CircularChartExport3D.prototype.destroy = function () {\r\n        // Perform the destroy method here.\r\n    };\r\n    return CircularChartExport3D;\r\n}());\r\nexport { CircularChartExport3D };\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,2BAA2B;AACvD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D;AACA;AACA;AACA,IAAIC,qBAAqB,GAAG,aAAe,YAAY;EACnD;AACJ;AACA;AACA;AACA;AACA;EACI,SAASA,qBAAqBA,CAACC,KAAK,EAAE;IAClC,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACID,qBAAqB,CAACE,SAAS,CAACC,MAAM,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAE;IAC/D,IAAIC,WAAW,GAAG,IAAIR,WAAW,CAAC,IAAI,CAACG,KAAK,CAAC;IAC7C,IAAIM,QAAQ,GAAG;MACXC,MAAM,EAAE,KAAK;MAAEC,KAAK,EAAE,IAAI;MAAEC,MAAM,EAAE;IACxC,CAAC;IACD,IAAI,CAACT,KAAK,CAACU,OAAO,CAACZ,YAAY,EAAEQ,QAAQ,CAAC;IAC1C,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;MAClBF,WAAW,CAACH,MAAM,CAACC,IAAI,EAAEC,QAAQ,EAAEO,SAAS,EAAE,CAAC,IAAI,CAACX,KAAK,CAAC,CAAC;IAC/D;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACID,qBAAqB,CAACE,SAAS,CAACW,SAAS,GAAG,UAAUR,QAAQ,EAAES,WAAW,EAAEC,QAAQ,EAAEN,KAAK,EAAEC,MAAM,EAAEM,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAEC,oBAAoB,EAAE;IACpJ,IAAIb,WAAW,GAAG,IAAIR,WAAW,CAAC,IAAI,CAACG,KAAK,CAAC;IAC7Cc,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,GAAG,CAAC,IAAI,CAACd,KAAK,CAAC;IAC7C,IAAIM,QAAQ,GAAG;MACXC,MAAM,EAAE,KAAK;MAAEC,KAAK,EAAEA,KAAK;MAAEC,MAAM,EAAEA;IACzC,CAAC;IACD,IAAI,CAACT,KAAK,CAACU,OAAO,CAACZ,YAAY,EAAEQ,QAAQ,CAAC;IAC1C,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;MAClBF,WAAW,CAACH,MAAM,CAAC,KAAK,EAAEE,QAAQ,EAAES,WAAW,EAAEC,QAAQ,EAAEN,KAAK,GAAGF,QAAQ,CAACE,KAAK,EAAEC,MAAM,GAAGH,QAAQ,CAACG,MAAM,EAAEM,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAEC,oBAAoB,CAAC;IAClK;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACInB,qBAAqB,CAACE,SAAS,CAACkB,UAAU,GAAG,UAAUnB,KAAK,EAAE;IAC1D,IAAIoB,UAAU,GAAG,IAAIvB,WAAW,CAACG,KAAK,CAAC;IACvC,OAAOoB,UAAU,CAACD,UAAU,CAACnB,KAAK,CAAC;EACvC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACID,qBAAqB,CAACE,SAAS,CAACoB,aAAa,GAAG,YAAY;IACxD,OAAO,uBAAuB;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACItB,qBAAqB,CAACE,SAAS,CAACqB,OAAO,GAAG,YAAY;IAClD;EAAA,CACH;EACD,OAAOvB,qBAAqB;AAChC,CAAC,CAAC,CAAE;AACJ,SAASA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}