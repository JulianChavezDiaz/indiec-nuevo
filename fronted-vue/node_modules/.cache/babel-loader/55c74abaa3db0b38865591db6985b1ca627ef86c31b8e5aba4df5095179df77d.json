{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Method for calculating coefficient.\r\n *\r\n * @private\r\n * @param {number} value - The value to calculate the coefficient.\r\n * @param {VisibleRangeModel} range - The visible range model.\r\n * @param {boolean} inversed - Indicates whether the range is inversed.\r\n * @returns {number} - The calculated coefficient.\r\n */\nexport function rangeValueToCoefficient(value, range, inversed) {\n  var result = (value - range.min) / range.delta;\n  return inversed ? 1 - result : result;\n}\n/**\r\n * Calculates the coefficient for the x-location.\r\n *\r\n * @private\r\n * @param {number} x - The value to calculate the coefficient.\r\n * @param {VisibleRangeModel} range - The visible range model.\r\n * @param {number} size - The size for calculate the coefficient.\r\n * @param {boolean} inversed - Indicates whether the range is inversed.\r\n * @returns {number} - The calculated coefficient.\r\n */\nexport function getXLocation(x, range, size, inversed) {\n  x = rangeValueToCoefficient(x, range, inversed);\n  return x * size;\n}\n/**\r\n * Method for calculating range value by x point.\r\n *\r\n * @private\r\n * @param {number} value - The value for which to calculate the range value.\r\n * @param {number} size - The size used for calculating the coefficient.\r\n * @param {VisibleRangeModel} range - The visible range model.\r\n * @param {boolean} inversed - Indicates whether the range is inversed.\r\n * @returns {number} - The calculated range value.\r\n */\nexport function getRangeValueXByPoint(value, size, range, inversed) {\n  var actualValue = !inversed ? value / size : 1 - value / size;\n  return actualValue * range.delta + range.min;\n}\n/**\r\n * Method for calculating the exact data.\r\n *\r\n * @private\r\n * @param {DataPoint[]} points - The array of data points.\r\n * @param {number} start - The start value of the range.\r\n * @param {number} end - The end value of the range.\r\n * @returns {DataPoint[]} - The calculated data points within the range.\r\n */\nexport function getExactData(points, start, end) {\n  var selectedData = [];\n  points.map(function (point) {\n    if (point.xValue >= start && point.xValue <= end) {\n      selectedData.push({\n        'x': point.x,\n        'y': point.y\n      });\n    }\n  });\n  return selectedData;\n}\n/**\r\n * Methods for calculating the nearest value.\r\n *\r\n * @private\r\n * @param {number[]} values - The array of values.\r\n * @param {number} point - The point for which to find the nearest value.\r\n * @returns {number} - The nearest value.\r\n */\nexport function getNearestValue(values, point) {\n  return values.reduce(function (prev, curr) {\n    return Math.abs(curr - point) < Math.abs(prev - point) ? curr : prev;\n  });\n}\n/**\r\n * Data point\r\n *\r\n * @public\r\n */\nvar DataPoint = /** @class */function () {\n  function DataPoint(x, y, xValue, yValue, visible) {\n    if (visible === void 0) {\n      visible = true;\n    }\n    this.x = x;\n    this.y = y;\n    this.xValue = xValue;\n    this.visible = visible;\n  }\n  return DataPoint;\n}();\nexport { DataPoint };","map":{"version":3,"names":["rangeValueToCoefficient","value","range","inversed","result","min","delta","getXLocation","x","size","getRangeValueXByPoint","actualValue","getExactData","points","start","end","selectedData","map","point","xValue","push","y","getNearestValue","values","reduce","prev","curr","Math","abs","DataPoint","yValue","visible"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/range-navigator/utils/helper.js"],"sourcesContent":["/**\r\n * Method for calculating coefficient.\r\n *\r\n * @private\r\n * @param {number} value - The value to calculate the coefficient.\r\n * @param {VisibleRangeModel} range - The visible range model.\r\n * @param {boolean} inversed - Indicates whether the range is inversed.\r\n * @returns {number} - The calculated coefficient.\r\n */\r\nexport function rangeValueToCoefficient(value, range, inversed) {\r\n    var result = (value - range.min) / (range.delta);\r\n    return inversed ? (1 - result) : result;\r\n}\r\n/**\r\n * Calculates the coefficient for the x-location.\r\n *\r\n * @private\r\n * @param {number} x - The value to calculate the coefficient.\r\n * @param {VisibleRangeModel} range - The visible range model.\r\n * @param {number} size - The size for calculate the coefficient.\r\n * @param {boolean} inversed - Indicates whether the range is inversed.\r\n * @returns {number} - The calculated coefficient.\r\n */\r\nexport function getXLocation(x, range, size, inversed) {\r\n    x = rangeValueToCoefficient(x, range, inversed);\r\n    return x * size;\r\n}\r\n/**\r\n * Method for calculating range value by x point.\r\n *\r\n * @private\r\n * @param {number} value - The value for which to calculate the range value.\r\n * @param {number} size - The size used for calculating the coefficient.\r\n * @param {VisibleRangeModel} range - The visible range model.\r\n * @param {boolean} inversed - Indicates whether the range is inversed.\r\n * @returns {number} - The calculated range value.\r\n */\r\nexport function getRangeValueXByPoint(value, size, range, inversed) {\r\n    var actualValue = !inversed ? value / size : (1 - (value / size));\r\n    return actualValue * (range.delta) + range.min;\r\n}\r\n/**\r\n * Method for calculating the exact data.\r\n *\r\n * @private\r\n * @param {DataPoint[]} points - The array of data points.\r\n * @param {number} start - The start value of the range.\r\n * @param {number} end - The end value of the range.\r\n * @returns {DataPoint[]} - The calculated data points within the range.\r\n */\r\nexport function getExactData(points, start, end) {\r\n    var selectedData = [];\r\n    points.map(function (point) {\r\n        if (point.xValue >= start && point.xValue <= end) {\r\n            selectedData.push({\r\n                'x': point.x,\r\n                'y': point.y\r\n            });\r\n        }\r\n    });\r\n    return selectedData;\r\n}\r\n/**\r\n * Methods for calculating the nearest value.\r\n *\r\n * @private\r\n * @param {number[]} values - The array of values.\r\n * @param {number} point - The point for which to find the nearest value.\r\n * @returns {number} - The nearest value.\r\n */\r\nexport function getNearestValue(values, point) {\r\n    return values.reduce(function (prev, curr) {\r\n        return (Math.abs(curr - point) < Math.abs(prev - point) ? curr : prev);\r\n    });\r\n}\r\n/**\r\n * Data point\r\n *\r\n * @public\r\n */\r\nvar DataPoint = /** @class */ (function () {\r\n    function DataPoint(x, y, xValue, yValue, visible) {\r\n        if (visible === void 0) { visible = true; }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.xValue = xValue;\r\n        this.visible = visible;\r\n    }\r\n    return DataPoint;\r\n}());\r\nexport { DataPoint };\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,uBAAuBA,CAACC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC5D,IAAIC,MAAM,GAAG,CAACH,KAAK,GAAGC,KAAK,CAACG,GAAG,IAAKH,KAAK,CAACI,KAAM;EAChD,OAAOH,QAAQ,GAAI,CAAC,GAAGC,MAAM,GAAIA,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,YAAYA,CAACC,CAAC,EAAEN,KAAK,EAAEO,IAAI,EAAEN,QAAQ,EAAE;EACnDK,CAAC,GAAGR,uBAAuB,CAACQ,CAAC,EAAEN,KAAK,EAAEC,QAAQ,CAAC;EAC/C,OAAOK,CAAC,GAAGC,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACT,KAAK,EAAEQ,IAAI,EAAEP,KAAK,EAAEC,QAAQ,EAAE;EAChE,IAAIQ,WAAW,GAAG,CAACR,QAAQ,GAAGF,KAAK,GAAGQ,IAAI,GAAI,CAAC,GAAIR,KAAK,GAAGQ,IAAM;EACjE,OAAOE,WAAW,GAAIT,KAAK,CAACI,KAAM,GAAGJ,KAAK,CAACG,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,YAAYA,CAACC,MAAM,EAAEC,KAAK,EAAEC,GAAG,EAAE;EAC7C,IAAIC,YAAY,GAAG,EAAE;EACrBH,MAAM,CAACI,GAAG,CAAC,UAAUC,KAAK,EAAE;IACxB,IAAIA,KAAK,CAACC,MAAM,IAAIL,KAAK,IAAII,KAAK,CAACC,MAAM,IAAIJ,GAAG,EAAE;MAC9CC,YAAY,CAACI,IAAI,CAAC;QACd,GAAG,EAAEF,KAAK,CAACV,CAAC;QACZ,GAAG,EAAEU,KAAK,CAACG;MACf,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF,OAAOL,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,eAAeA,CAACC,MAAM,EAAEL,KAAK,EAAE;EAC3C,OAAOK,MAAM,CAACC,MAAM,CAAC,UAAUC,IAAI,EAAEC,IAAI,EAAE;IACvC,OAAQC,IAAI,CAACC,GAAG,CAACF,IAAI,GAAGR,KAAK,CAAC,GAAGS,IAAI,CAACC,GAAG,CAACH,IAAI,GAAGP,KAAK,CAAC,GAAGQ,IAAI,GAAGD,IAAI;EACzE,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,SAAS,GAAG,aAAe,YAAY;EACvC,SAASA,SAASA,CAACrB,CAAC,EAAEa,CAAC,EAAEF,MAAM,EAAEW,MAAM,EAAEC,OAAO,EAAE;IAC9C,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,IAAI;IAAE;IAC1C,IAAI,CAACvB,CAAC,GAAGA,CAAC;IACV,IAAI,CAACa,CAAC,GAAGA,CAAC;IACV,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACY,OAAO,GAAGA,OAAO;EAC1B;EACA,OAAOF,SAAS;AACpB,CAAC,CAAC,CAAE;AACJ,SAASA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}