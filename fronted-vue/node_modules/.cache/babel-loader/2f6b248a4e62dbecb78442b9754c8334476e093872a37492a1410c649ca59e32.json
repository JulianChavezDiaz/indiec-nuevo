{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { getAnimationFunction, pathAnimation, getElement, animateAddPoints } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\nimport { Animation, animationMode, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\r\n * Base for line type series.\r\n */\nvar LineBase = /** @class */function () {\n  /**\r\n   * Initializes the tooltip module for the chart.\r\n   *\r\n   * @param {Chart} [chartModule] - The chart instance to which the tooltip module is initialized.\r\n   */\n  function LineBase(chartModule) {\n    this.chart = chartModule;\n  }\n  /**\r\n   * Enhances the performance of the chart by enabling complex properties.\r\n   *\r\n   * @param {Series} series - The series for which complex properties are enabled.\r\n   * @returns {Points[]} An array of points.\r\n   * @private\r\n   */\n  LineBase.prototype.enableComplexProperty = function (series) {\n    var tempPoints = [];\n    var tempPoints2 = [];\n    var xVisibleRange = series.xAxis.visibleRange;\n    var yVisibleRange = series.yAxis.visibleRange;\n    var seriesPoints = series.points;\n    var areaBounds = series.clipRect;\n    var xTolerance = Math.abs(xVisibleRange.delta / areaBounds.width);\n    var yTolerance = Math.abs(yVisibleRange.delta / areaBounds.height);\n    var prevXValue = seriesPoints[0] && seriesPoints[0].xValue > xTolerance ? 0 : xTolerance;\n    var prevYValue = seriesPoints[0] && seriesPoints[0].y > yTolerance ? 0 : yTolerance;\n    var xVal = 0;\n    var yVal = 0;\n    for (var _i = 0, seriesPoints_1 = seriesPoints; _i < seriesPoints_1.length; _i++) {\n      var currentPoint = seriesPoints_1[_i];\n      currentPoint.symbolLocations = [];\n      xVal = currentPoint.xValue ? currentPoint.xValue : xVisibleRange.min;\n      yVal = currentPoint.yValue ? currentPoint.yValue : yVisibleRange.min;\n      if (Math.abs(prevXValue - xVal) >= xTolerance || Math.abs(prevYValue - yVal) >= yTolerance) {\n        tempPoints.push(currentPoint);\n        prevXValue = xVal;\n        prevYValue = yVal;\n      }\n    }\n    var tempPoint;\n    for (var i = 0; i < tempPoints.length; i++) {\n      tempPoint = tempPoints[i];\n      if (isNullOrUndefined(tempPoint.x) || series.category === 'Indicator' && (isNaN(tempPoint.xValue) || isNaN(tempPoint.yValue))) {\n        continue;\n      } else {\n        tempPoints2.push(tempPoint);\n      }\n    }\n    return tempPoints2;\n  };\n  /**\r\n   * To generate the line path direction.\r\n   *\r\n   * @param {Points} firstPoint firstPoint\r\n   * @param {Points} secondPoint secondPoint\r\n   * @param {Series} series series\r\n   * @param {boolean} isInverted isInverted\r\n   * @param {Function} getPointLocation getPointLocation\r\n   * @param {string} startPoint startPoint\r\n   * @returns {string} get line path direction\r\n   */\n  LineBase.prototype.getLineDirection = function (firstPoint, secondPoint, series, isInverted, getPointLocation, startPoint) {\n    var direction = '';\n    if (firstPoint != null) {\n      var point1 = getPointLocation(firstPoint.xValue, firstPoint.yValue, series.xAxis, series.yAxis, isInverted, series);\n      var point2 = getPointLocation(secondPoint.xValue, secondPoint.yValue, series.xAxis, series.yAxis, isInverted, series);\n      direction = startPoint + ' ' + point1.x + ' ' + point1.y + ' ' + 'L' + ' ' + point2.x + ' ' + point2.y + ' ';\n    }\n    return direction;\n  };\n  /**\r\n   * Appends a line path to the chart.\r\n   *\r\n   * @param {PathOption} options - The options for the path.\r\n   * @param {Series} series - The series to which the path belongs.\r\n   * @param {string} clipRect - The clipping rectangle for the path.\r\n   * @returns {void}\r\n   */\n  LineBase.prototype.appendLinePath = function (options, series, clipRect) {\n    var points = this.appendPathElement(options, series, clipRect);\n    pathAnimation(points.element, options.d, series.chart.redraw, points.previousDirection, points.chart.duration);\n  };\n  LineBase.prototype.appendPathElement = function (options, series, clipRect) {\n    var element = getElement(options.id);\n    var chart = series.chart;\n    var previousDirection = element ? element.getAttribute('d') : null;\n    var htmlObject = series.chart.renderer.drawPath(options, new Int32Array([series.clipRect.x, series.clipRect.y]));\n    if (htmlObject) {\n      htmlObject.setAttribute('clip-path', clipRect);\n    }\n    series.pathElement = htmlObject;\n    if (!series.chart.enableCanvas) {\n      series.seriesElement.appendChild(htmlObject);\n    }\n    series.isRectSeries = false;\n    return {\n      element: element,\n      previousDirection: previousDirection,\n      chart: chart\n    };\n  };\n  /**\r\n   * Adds a line path to equate the start and end paths.\r\n   *\r\n   * @param {PathOption} options - The options for the path.\r\n   * @param {Series} series - The series to which the path belongs.\r\n   * @param {string} clipRect - The clip rectangle for the path.\r\n   * @returns {void}\r\n   */\n  LineBase.prototype.addPath = function (options, series, clipRect) {\n    var points = this.appendPathElement(options, series, clipRect);\n    if (points.previousDirection !== '' && options.d !== '') {\n      var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var endPathCommands = options.d.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n      var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n      if (startPathCommands.length < endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            startPathCommands.push(startPathCommands[startPathCommands.length - 1].replace('M', 'L'));\n          }\n        }\n        animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n      } else if (startPathCommands.length > endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            if (series.removedPointIndex === series.points.length) {\n              endPathCommands.push(endPathCommands[endPathCommands.length - 1].replace('M', 'L'));\n            } else {\n              endPathCommands.splice(1, 0, endPathCommands[0].replace('M', 'L'));\n            }\n          }\n        }\n        animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n      } else {\n        animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n      }\n    }\n  };\n  /**\r\n   * Adds a area path to equate the start and end paths.\r\n   *\r\n   * @param {PathOption} options - The options for the path.\r\n   * @param {Series} series - The series to which the path belongs.\r\n   * @param {string} clipRect - The clip rectangle for the path.\r\n   * @returns {void}\r\n   */\n  LineBase.prototype.addAreaPath = function (options, series, clipRect) {\n    var points = this.appendPathElement(options, series, clipRect);\n    if (points.previousDirection !== '' && options.d !== '') {\n      var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var endPathCommands = options.d.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n      var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n      if (minLength < endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            if (endPathCommands.length !== startPathCommands.length) {\n              if (startPathCommands.length === 1) {\n                startPathCommands.push(startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].replace('M', 'L'));\n              } else {\n                startPathCommands.splice(startPathCommands.length - 1, 0, startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)]);\n              }\n            }\n          }\n        }\n        animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n      } else if (startPathCommands.length > endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            if (series.removedPointIndex === series.points.length) {\n              if (endPathCommands.length === 1) {\n                endPathCommands.push(endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].replace('M', 'L'));\n              } else {\n                endPathCommands.splice(endPathCommands.length - 1, 0, endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)]);\n              }\n            } else {\n              endPathCommands.splice(1, 0, endPathCommands[1] ? endPathCommands[1] : endPathCommands[0]);\n            }\n          }\n        }\n        animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n      } else {\n        animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n      }\n    }\n  };\n  /**\r\n   * To render the marker for the series.\r\n   *\r\n   * @param {Series} series - The series for which markers are rendered.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  LineBase.prototype.renderMarker = function (series) {\n    if (series.marker && series.marker.visible) {\n      series.chart.markerRender.render(series);\n    }\n  };\n  /**\r\n   * Executes progressive animation for the series.\r\n   *\r\n   * @param {Series} series - The series for which progressive animation is executed.\r\n   * @param {AnimationModel} option - The animation option.\r\n   * @returns {void}\r\n   */\n  LineBase.prototype.doProgressiveAnimation = function (series, option) {\n    var animation = new Animation({});\n    var path = series.pathElement;\n    var strokeDashArray = path.getAttribute('stroke-dasharray');\n    var pathLength = series.pathElement.getTotalLength();\n    var currentTime;\n    path.style.visibility = 'hidden';\n    animation.animate(path, {\n      duration: option.duration === 0 && animationMode === 'Enable' ? 1000 : option.duration,\n      delay: option.delay,\n      progress: function (args) {\n        if (args.timeStamp >= args.delay) {\n          path.style.visibility = 'visible';\n          currentTime = Math.abs(Math.round((args.timeStamp - args.delay) * pathLength / args.duration));\n          path.setAttribute('stroke-dasharray', currentTime + ',' + pathLength);\n        }\n      },\n      end: function () {\n        path.setAttribute('stroke-dasharray', strokeDashArray);\n        path.style.visibility = '';\n        series.chart.trigger('animationComplete', {\n          series: series.chart.isBlazor ? {} : series\n        });\n      }\n    });\n  };\n  /**\r\n   * To store the symbol location and region.\r\n   *\r\n   * @param {Points} point point\r\n   * @param {Series} series series\r\n   * @param {boolean} isInverted isInverted\r\n   * @param {Function} getLocation getLocation\r\n   * @returns {void}\r\n   */\n  LineBase.prototype.storePointLocation = function (point, series, isInverted, getLocation) {\n    var markerWidth = series.marker && series.marker.width ? series.marker.width : 0;\n    var markerHeight = series.marker && series.marker.height ? series.marker.height : 0;\n    point.symbolLocations.push(getLocation(point.xValue, point.yValue, series.xAxis, series.yAxis, isInverted, series));\n    point.regions.push(new Rect(point.symbolLocations[0].x - markerWidth, point.symbolLocations[0].y - markerHeight, 2 * markerWidth, 2 * markerHeight));\n  };\n  /**\r\n   * Checks if the y-value of a point falls within the y-axis range.\r\n   *\r\n   * @param {Points} point - The point to be checked.\r\n   * @param {Axis} yAxis - The y-axis.\r\n   * @returns {boolean} - Returns true if the y-value falls within the y-axis range, otherwise false.\r\n   */\n  LineBase.prototype.withinYRange = function (point, yAxis) {\n    return point.yValue >= yAxis.visibleRange.min && point.yValue <= yAxis.visibleRange.max;\n  };\n  LineBase.prototype.GetStepLineDirection = function (currentPoint, previousPoint, stepLineType, command) {\n    if (command === void 0) {\n      command = 'L';\n    }\n    if (stepLineType === 'Right') {\n      return command + ' ' + previousPoint.x + ' ' + currentPoint.y + ' L ' + currentPoint.x + ' ' + currentPoint.y + ' ';\n    } else if (stepLineType === 'Center') {\n      var centerX = previousPoint.x + (currentPoint.x - previousPoint.x) / 2;\n      return command + ' ' + centerX + ' ' + previousPoint.y + ' L ' + centerX + ' ' + currentPoint.y + ' L ' + currentPoint.x + ' ' + currentPoint.y + ' ';\n    } else {\n      return command + ' ' + currentPoint.x + ' ' + previousPoint.y + ' L ' + currentPoint.x + ' ' + currentPoint.y + ' ';\n    }\n  };\n  /**\r\n   * Gets the first and last visible points from a collection of points.\r\n   *\r\n   * @param {Points[]} points - Collection of points.\r\n   * @returns {{ first: Points, last: Points }} - Returns an object containing the first and last visible points.\r\n   */\n  LineBase.prototype.getFirstLastVisiblePoint = function (points) {\n    var first = null;\n    var last = null;\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n      var point = points_1[_i];\n      if (first === null && point.visible) {\n        first = last = point;\n      }\n      last = point.visible ? point : last;\n    }\n    return {\n      first: first ? first : points[0],\n      last: last ? last : points[points.length - 1]\n    };\n  };\n  /**\r\n   * Gets the border direction based on the provided direction.\r\n   *\r\n   * @param {string} direction - The direction string.\r\n   * @returns {string} - Returns the border direction.\r\n   */\n  LineBase.prototype.getBorderDirection = function (direction) {\n    var coordinates = direction.split(' ');\n    if (coordinates.length > 3 && !this.chart.stackingAreaSeriesModule && !this.chart.stackingStepAreaSeriesModule) {\n      coordinates.splice(coordinates.length - 4, 3);\n    } else if (this.chart.stackingAreaSeriesModule || this.chart.stackingStepAreaSeriesModule) {\n      coordinates.splice(coordinates.length / 2 + 1, coordinates.length / 2 + 1);\n      if (coordinates[coordinates.length - 1] === 'L' || coordinates[coordinates.length - 1] === 'M') {\n        coordinates.splice(coordinates.length - 1, 1);\n      }\n    }\n    return coordinates.join(' ');\n  };\n  /**\r\n   * Removes the border from the empty points based on the provided border direction.\r\n   *\r\n   * @param {string} borderDirection - The border direction.\r\n   * @returns {string} - Returns the updated border direction.\r\n   */\n  LineBase.prototype.removeEmptyPointsBorder = function (borderDirection) {\n    var startIndex = 0;\n    var coordinates = borderDirection.split(' ');\n    var point;\n    if (coordinates.length === 4) {\n      return coordinates.join(' ');\n    }\n    do {\n      point = coordinates.indexOf('M', startIndex);\n      if (point > -1) {\n        coordinates.splice(point + 1, 3);\n        startIndex = point + 1;\n        if (point - 6 > 0) {\n          coordinates.splice(point - 6, 6);\n          startIndex -= 6;\n        }\n      }\n    } while (point !== -1);\n    return coordinates.join(' ');\n  };\n  /**\r\n   * Performs linear animation for the series based on the provided animation model.\r\n   *\r\n   * @param {Series} series - The series to animate.\r\n   * @param {AnimationModel} animation - The animation model containing animation details.\r\n   * @returns {void}\r\n   */\n  LineBase.prototype.doLinearAnimation = function (series, animation) {\n    var clipRect = series.clipRectElement.childNodes[0].childNodes[0];\n    var duration = series.chart.animated ? series.chart.duration : animation.duration;\n    var effect = getAnimationFunction('Linear');\n    var elementHeight = +clipRect.getAttribute('height');\n    var elementWidth = +clipRect.getAttribute('width');\n    var xCenter = +clipRect.getAttribute('x');\n    var yCenter = series.chart.requireInvertedAxis ? +clipRect.getAttribute('height') + +clipRect.getAttribute('y') : +clipRect.getAttribute('y');\n    var value;\n    clipRect.style.visibility = 'hidden';\n    new Animation({}).animate(clipRect, {\n      duration: duration === 0 && animationMode === 'Enable' ? 1000 : duration,\n      delay: animation.delay,\n      progress: function (args) {\n        if (args.timeStamp >= args.delay) {\n          clipRect.style.visibility = 'visible';\n          if (series.chart.requireInvertedAxis) {\n            value = effect(args.timeStamp - args.delay, 0, elementHeight, args.duration);\n            clipRect.setAttribute('transform', 'translate(' + xCenter + ' ' + yCenter + ') scale(1,' + value / elementHeight + ') translate(' + -xCenter + ' ' + -yCenter + ')');\n          } else {\n            value = effect(args.timeStamp - args.delay, 0, elementWidth, args.duration);\n            clipRect.setAttribute('transform', 'translate(' + xCenter + ' ' + yCenter + ') scale(' + value / elementWidth + ', 1) translate(' + -xCenter + ' ' + -yCenter + ')');\n          }\n        }\n      },\n      end: function () {\n        clipRect.setAttribute('transform', 'translate(0,0)');\n        series.chart.trigger('animationComplete', {\n          series: series.chart.isBlazor ? {} : series\n        });\n      }\n    });\n  };\n  return LineBase;\n}();\nexport { LineBase };","map":{"version":3,"names":["getAnimationFunction","pathAnimation","getElement","animateAddPoints","Rect","Animation","animationMode","isNullOrUndefined","LineBase","chartModule","chart","prototype","enableComplexProperty","series","tempPoints","tempPoints2","xVisibleRange","xAxis","visibleRange","yVisibleRange","yAxis","seriesPoints","points","areaBounds","clipRect","xTolerance","Math","abs","delta","width","yTolerance","height","prevXValue","xValue","prevYValue","y","xVal","yVal","_i","seriesPoints_1","length","currentPoint","symbolLocations","min","yValue","push","tempPoint","i","x","category","isNaN","getLineDirection","firstPoint","secondPoint","isInverted","getPointLocation","startPoint","direction","point1","point2","appendLinePath","options","appendPathElement","element","d","redraw","previousDirection","duration","id","getAttribute","htmlObject","renderer","drawPath","Int32Array","setAttribute","pathElement","enableCanvas","seriesElement","appendChild","isRectSeries","addPath","startPathCommands","match","endPathCommands","maxLength","max","minLength","replace","join","removedPointIndex","splice","addAreaPath","indexOf","renderMarker","marker","visible","markerRender","render","doProgressiveAnimation","option","animation","path","strokeDashArray","pathLength","getTotalLength","currentTime","style","visibility","animate","delay","progress","args","timeStamp","round","end","trigger","isBlazor","storePointLocation","point","getLocation","markerWidth","markerHeight","regions","withinYRange","GetStepLineDirection","previousPoint","stepLineType","command","centerX","getFirstLastVisiblePoint","first","last","points_1","getBorderDirection","coordinates","split","stackingAreaSeriesModule","stackingStepAreaSeriesModule","removeEmptyPointsBorder","borderDirection","startIndex","doLinearAnimation","clipRectElement","childNodes","animated","effect","elementHeight","elementWidth","xCenter","yCenter","requireInvertedAxis","value"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/chart/series/line-base.js"],"sourcesContent":["import { getAnimationFunction, pathAnimation, getElement, animateAddPoints } from '../../common/utils/helper';\r\nimport { Rect } from '@syncfusion/ej2-svg-base';\r\nimport { Animation, animationMode, isNullOrUndefined } from '@syncfusion/ej2-base';\r\n/**\r\n * Base for line type series.\r\n */\r\nvar LineBase = /** @class */ (function () {\r\n    /**\r\n     * Initializes the tooltip module for the chart.\r\n     *\r\n     * @param {Chart} [chartModule] - The chart instance to which the tooltip module is initialized.\r\n     */\r\n    function LineBase(chartModule) {\r\n        this.chart = chartModule;\r\n    }\r\n    /**\r\n     * Enhances the performance of the chart by enabling complex properties.\r\n     *\r\n     * @param {Series} series - The series for which complex properties are enabled.\r\n     * @returns {Points[]} An array of points.\r\n     * @private\r\n     */\r\n    LineBase.prototype.enableComplexProperty = function (series) {\r\n        var tempPoints = [];\r\n        var tempPoints2 = [];\r\n        var xVisibleRange = series.xAxis.visibleRange;\r\n        var yVisibleRange = series.yAxis.visibleRange;\r\n        var seriesPoints = series.points;\r\n        var areaBounds = series.clipRect;\r\n        var xTolerance = Math.abs(xVisibleRange.delta / areaBounds.width);\r\n        var yTolerance = Math.abs(yVisibleRange.delta / areaBounds.height);\r\n        var prevXValue = (seriesPoints[0] && seriesPoints[0].xValue > xTolerance) ? 0 : xTolerance;\r\n        var prevYValue = (seriesPoints[0] && seriesPoints[0].y > yTolerance) ? 0 : yTolerance;\r\n        var xVal = 0;\r\n        var yVal = 0;\r\n        for (var _i = 0, seriesPoints_1 = seriesPoints; _i < seriesPoints_1.length; _i++) {\r\n            var currentPoint = seriesPoints_1[_i];\r\n            currentPoint.symbolLocations = [];\r\n            xVal = currentPoint.xValue ? currentPoint.xValue : xVisibleRange.min;\r\n            yVal = currentPoint.yValue ? currentPoint.yValue : yVisibleRange.min;\r\n            if (Math.abs(prevXValue - xVal) >= xTolerance || Math.abs(prevYValue - yVal) >= yTolerance) {\r\n                tempPoints.push(currentPoint);\r\n                prevXValue = xVal;\r\n                prevYValue = yVal;\r\n            }\r\n        }\r\n        var tempPoint;\r\n        for (var i = 0; i < tempPoints.length; i++) {\r\n            tempPoint = tempPoints[i];\r\n            if (isNullOrUndefined(tempPoint.x) || (series.category === 'Indicator' && (isNaN(tempPoint.xValue) || isNaN(tempPoint.yValue)))) {\r\n                continue;\r\n            }\r\n            else {\r\n                tempPoints2.push(tempPoint);\r\n            }\r\n        }\r\n        return tempPoints2;\r\n    };\r\n    /**\r\n     * To generate the line path direction.\r\n     *\r\n     * @param {Points} firstPoint firstPoint\r\n     * @param {Points} secondPoint secondPoint\r\n     * @param {Series} series series\r\n     * @param {boolean} isInverted isInverted\r\n     * @param {Function} getPointLocation getPointLocation\r\n     * @param {string} startPoint startPoint\r\n     * @returns {string} get line path direction\r\n     */\r\n    LineBase.prototype.getLineDirection = function (firstPoint, secondPoint, series, isInverted, getPointLocation, startPoint) {\r\n        var direction = '';\r\n        if (firstPoint != null) {\r\n            var point1 = getPointLocation(firstPoint.xValue, firstPoint.yValue, series.xAxis, series.yAxis, isInverted, series);\r\n            var point2 = getPointLocation(secondPoint.xValue, secondPoint.yValue, series.xAxis, series.yAxis, isInverted, series);\r\n            direction = startPoint + ' ' + (point1.x) + ' ' + (point1.y) + ' ' +\r\n                'L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ';\r\n        }\r\n        return direction;\r\n    };\r\n    /**\r\n     * Appends a line path to the chart.\r\n     *\r\n     * @param {PathOption} options - The options for the path.\r\n     * @param {Series} series - The series to which the path belongs.\r\n     * @param {string} clipRect - The clipping rectangle for the path.\r\n     * @returns {void}\r\n     */\r\n    LineBase.prototype.appendLinePath = function (options, series, clipRect) {\r\n        var points = this.appendPathElement(options, series, clipRect);\r\n        pathAnimation(points.element, options.d, series.chart.redraw, points.previousDirection, points.chart.duration);\r\n    };\r\n    LineBase.prototype.appendPathElement = function (options, series, clipRect) {\r\n        var element = getElement(options.id);\r\n        var chart = series.chart;\r\n        var previousDirection = element ? element.getAttribute('d') : null;\r\n        var htmlObject = series.chart.renderer.drawPath(options, new Int32Array([series.clipRect.x, series.clipRect.y]));\r\n        if (htmlObject) {\r\n            htmlObject.setAttribute('clip-path', clipRect);\r\n        }\r\n        series.pathElement = htmlObject;\r\n        if (!series.chart.enableCanvas) {\r\n            series.seriesElement.appendChild(htmlObject);\r\n        }\r\n        series.isRectSeries = false;\r\n        return { element: element, previousDirection: previousDirection, chart: chart };\r\n    };\r\n    /**\r\n     * Adds a line path to equate the start and end paths.\r\n     *\r\n     * @param {PathOption} options - The options for the path.\r\n     * @param {Series} series - The series to which the path belongs.\r\n     * @param {string} clipRect - The clip rectangle for the path.\r\n     * @returns {void}\r\n     */\r\n    LineBase.prototype.addPath = function (options, series, clipRect) {\r\n        var points = this.appendPathElement(options, series, clipRect);\r\n        if (points.previousDirection !== '' && options.d !== '') {\r\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\r\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\r\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\r\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\r\n            if (startPathCommands.length < endPathCommands.length) {\r\n                for (var i = minLength; i < maxLength; i++) {\r\n                    if (endPathCommands.length !== startPathCommands.length) {\r\n                        startPathCommands.push((startPathCommands[startPathCommands.length - 1]).replace('M', 'L'));\r\n                    }\r\n                }\r\n                animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\r\n            }\r\n            else if (startPathCommands.length > endPathCommands.length) {\r\n                for (var i = minLength; i < maxLength; i++) {\r\n                    if (endPathCommands.length !== startPathCommands.length) {\r\n                        if (series.removedPointIndex === series.points.length) {\r\n                            endPathCommands.push((endPathCommands[endPathCommands.length - 1]).replace('M', 'L'));\r\n                        }\r\n                        else {\r\n                            endPathCommands.splice(1, 0, endPathCommands[0].replace('M', 'L'));\r\n                        }\r\n                    }\r\n                }\r\n                animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\r\n            }\r\n            else {\r\n                animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds a area path to equate the start and end paths.\r\n     *\r\n     * @param {PathOption} options - The options for the path.\r\n     * @param {Series} series - The series to which the path belongs.\r\n     * @param {string} clipRect - The clip rectangle for the path.\r\n     * @returns {void}\r\n     */\r\n    LineBase.prototype.addAreaPath = function (options, series, clipRect) {\r\n        var points = this.appendPathElement(options, series, clipRect);\r\n        if (points.previousDirection !== '' && options.d !== '') {\r\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\r\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\r\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\r\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\r\n            if (minLength < endPathCommands.length) {\r\n                for (var i = minLength; i < maxLength; i++) {\r\n                    if (endPathCommands.length !== startPathCommands.length) {\r\n                        if (endPathCommands.length !== startPathCommands.length) {\r\n                            if (startPathCommands.length === 1) {\r\n                                startPathCommands.push(startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].replace('M', 'L'));\r\n                            }\r\n                            else {\r\n                                startPathCommands.splice(startPathCommands.length - 1, 0, startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\r\n            }\r\n            else if (startPathCommands.length > endPathCommands.length) {\r\n                for (var i = minLength; i < maxLength; i++) {\r\n                    if (endPathCommands.length !== startPathCommands.length) {\r\n                        if (series.removedPointIndex === series.points.length) {\r\n                            if (endPathCommands.length === 1) {\r\n                                endPathCommands.push(endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].replace('M', 'L'));\r\n                            }\r\n                            else {\r\n                                endPathCommands.splice(endPathCommands.length - 1, 0, endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            endPathCommands.splice(1, 0, endPathCommands[1] ? endPathCommands[1] : endPathCommands[0]);\r\n                        }\r\n                    }\r\n                }\r\n                animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\r\n            }\r\n            else {\r\n                animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To render the marker for the series.\r\n     *\r\n     * @param {Series} series - The series for which markers are rendered.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    LineBase.prototype.renderMarker = function (series) {\r\n        if (series.marker && series.marker.visible) {\r\n            series.chart.markerRender.render(series);\r\n        }\r\n    };\r\n    /**\r\n     * Executes progressive animation for the series.\r\n     *\r\n     * @param {Series} series - The series for which progressive animation is executed.\r\n     * @param {AnimationModel} option - The animation option.\r\n     * @returns {void}\r\n     */\r\n    LineBase.prototype.doProgressiveAnimation = function (series, option) {\r\n        var animation = new Animation({});\r\n        var path = series.pathElement;\r\n        var strokeDashArray = path.getAttribute('stroke-dasharray');\r\n        var pathLength = series.pathElement.getTotalLength();\r\n        var currentTime;\r\n        path.style.visibility = 'hidden';\r\n        animation.animate(path, {\r\n            duration: (option.duration === 0 && animationMode === 'Enable') ? 1000 : option.duration,\r\n            delay: option.delay,\r\n            progress: function (args) {\r\n                if (args.timeStamp >= args.delay) {\r\n                    path.style.visibility = 'visible';\r\n                    currentTime = Math.abs(Math.round(((args.timeStamp - args.delay) * pathLength) / args.duration));\r\n                    path.setAttribute('stroke-dasharray', currentTime + ',' + pathLength);\r\n                }\r\n            },\r\n            end: function () {\r\n                path.setAttribute('stroke-dasharray', strokeDashArray);\r\n                path.style.visibility = '';\r\n                series.chart.trigger('animationComplete', { series: series.chart.isBlazor ? {} : series });\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * To store the symbol location and region.\r\n     *\r\n     * @param {Points} point point\r\n     * @param {Series} series series\r\n     * @param {boolean} isInverted isInverted\r\n     * @param {Function} getLocation getLocation\r\n     * @returns {void}\r\n     */\r\n    LineBase.prototype.storePointLocation = function (point, series, isInverted, getLocation) {\r\n        var markerWidth = (series.marker && series.marker.width) ? series.marker.width : 0;\r\n        var markerHeight = (series.marker && series.marker.height) ? series.marker.height : 0;\r\n        point.symbolLocations.push(getLocation(point.xValue, point.yValue, series.xAxis, series.yAxis, isInverted, series));\r\n        point.regions.push(new Rect(point.symbolLocations[0].x - markerWidth, point.symbolLocations[0].y - markerHeight, 2 * markerWidth, 2 * markerHeight));\r\n    };\r\n    /**\r\n     * Checks if the y-value of a point falls within the y-axis range.\r\n     *\r\n     * @param {Points} point - The point to be checked.\r\n     * @param {Axis} yAxis - The y-axis.\r\n     * @returns {boolean} - Returns true if the y-value falls within the y-axis range, otherwise false.\r\n     */\r\n    LineBase.prototype.withinYRange = function (point, yAxis) {\r\n        return point.yValue >= yAxis.visibleRange.min && point.yValue <= yAxis.visibleRange.max;\r\n    };\r\n    LineBase.prototype.GetStepLineDirection = function (currentPoint, previousPoint, stepLineType, command) {\r\n        if (command === void 0) { command = 'L'; }\r\n        if (stepLineType === 'Right') {\r\n            return (command + ' ' +\r\n                (previousPoint.x) + ' ' + (currentPoint.y) + ' L ' + (currentPoint.x) + ' ' + (currentPoint.y) + ' ');\r\n        }\r\n        else if (stepLineType === 'Center') {\r\n            var centerX = previousPoint.x + (currentPoint.x - previousPoint.x) / 2;\r\n            return (command + ' ' +\r\n                (centerX) + ' ' + (previousPoint.y) + ' L ' + (centerX) + ' ' + (currentPoint.y) + ' L ' + (currentPoint.x) + ' ' + (currentPoint.y) + ' ');\r\n        }\r\n        else {\r\n            return (command + ' ' +\r\n                (currentPoint.x) + ' ' + (previousPoint.y) + ' L ' + (currentPoint.x) + ' ' + (currentPoint.y) + ' ');\r\n        }\r\n    };\r\n    /**\r\n     * Gets the first and last visible points from a collection of points.\r\n     *\r\n     * @param {Points[]} points - Collection of points.\r\n     * @returns {{ first: Points, last: Points }} - Returns an object containing the first and last visible points.\r\n     */\r\n    LineBase.prototype.getFirstLastVisiblePoint = function (points) {\r\n        var first = null;\r\n        var last = null;\r\n        for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\r\n            var point = points_1[_i];\r\n            if (first === null && point.visible) {\r\n                first = last = point;\r\n            }\r\n            last = point.visible ? point : last;\r\n        }\r\n        return { first: first ? first : points[0], last: last ? last : points[points.length - 1] };\r\n    };\r\n    /**\r\n     * Gets the border direction based on the provided direction.\r\n     *\r\n     * @param {string} direction - The direction string.\r\n     * @returns {string} - Returns the border direction.\r\n     */\r\n    LineBase.prototype.getBorderDirection = function (direction) {\r\n        var coordinates = direction.split(' ');\r\n        if (coordinates.length > 3 && !(this.chart.stackingAreaSeriesModule) && !(this.chart.stackingStepAreaSeriesModule)) {\r\n            coordinates.splice(coordinates.length - 4, 3);\r\n        }\r\n        else if (this.chart.stackingAreaSeriesModule || this.chart.stackingStepAreaSeriesModule) {\r\n            coordinates.splice(coordinates.length / 2 + 1, coordinates.length / 2 + 1);\r\n            if (coordinates[coordinates.length - 1] === 'L' || coordinates[coordinates.length - 1] === 'M') {\r\n                coordinates.splice(coordinates.length - 1, 1);\r\n            }\r\n        }\r\n        return coordinates.join(' ');\r\n    };\r\n    /**\r\n     * Removes the border from the empty points based on the provided border direction.\r\n     *\r\n     * @param {string} borderDirection - The border direction.\r\n     * @returns {string} - Returns the updated border direction.\r\n     */\r\n    LineBase.prototype.removeEmptyPointsBorder = function (borderDirection) {\r\n        var startIndex = 0;\r\n        var coordinates = borderDirection.split(' ');\r\n        var point;\r\n        if (coordinates.length === 4) {\r\n            return coordinates.join(' ');\r\n        }\r\n        do {\r\n            point = coordinates.indexOf('M', startIndex);\r\n            if (point > -1) {\r\n                coordinates.splice(point + 1, 3);\r\n                startIndex = point + 1;\r\n                if (point - 6 > 0) {\r\n                    coordinates.splice(point - 6, 6);\r\n                    startIndex -= 6;\r\n                }\r\n            }\r\n        } while (point !== -1);\r\n        return coordinates.join(' ');\r\n    };\r\n    /**\r\n     * Performs linear animation for the series based on the provided animation model.\r\n     *\r\n     * @param {Series} series - The series to animate.\r\n     * @param {AnimationModel} animation - The animation model containing animation details.\r\n     * @returns {void}\r\n     */\r\n    LineBase.prototype.doLinearAnimation = function (series, animation) {\r\n        var clipRect = series.clipRectElement.childNodes[0].childNodes[0];\r\n        var duration = series.chart.animated ? series.chart.duration : animation.duration;\r\n        var effect = getAnimationFunction('Linear');\r\n        var elementHeight = +clipRect.getAttribute('height');\r\n        var elementWidth = +clipRect.getAttribute('width');\r\n        var xCenter = +clipRect.getAttribute('x');\r\n        var yCenter = series.chart.requireInvertedAxis ? +clipRect.getAttribute('height') + +clipRect.getAttribute('y') :\r\n            +clipRect.getAttribute('y');\r\n        var value;\r\n        clipRect.style.visibility = 'hidden';\r\n        new Animation({}).animate(clipRect, {\r\n            duration: (duration === 0 && animationMode === 'Enable') ? 1000 : duration,\r\n            delay: animation.delay,\r\n            progress: function (args) {\r\n                if (args.timeStamp >= args.delay) {\r\n                    clipRect.style.visibility = 'visible';\r\n                    if (series.chart.requireInvertedAxis) {\r\n                        value = effect(args.timeStamp - args.delay, 0, elementHeight, args.duration);\r\n                        clipRect.setAttribute('transform', 'translate(' + xCenter + ' ' + yCenter +\r\n                            ') scale(1,' + (value / elementHeight) + ') translate(' + (-xCenter) + ' ' + (-yCenter) + ')');\r\n                    }\r\n                    else {\r\n                        value = effect(args.timeStamp - args.delay, 0, elementWidth, args.duration);\r\n                        clipRect.setAttribute('transform', 'translate(' + xCenter + ' ' + yCenter +\r\n                            ') scale(' + (value / elementWidth) + ', 1) translate(' + (-xCenter) + ' ' + (-yCenter) + ')');\r\n                    }\r\n                }\r\n            },\r\n            end: function () {\r\n                clipRect.setAttribute('transform', 'translate(0,0)');\r\n                series.chart.trigger('animationComplete', { series: series.chart.isBlazor ? {} : series });\r\n            }\r\n        });\r\n    };\r\n    return LineBase;\r\n}());\r\nexport { LineBase };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}