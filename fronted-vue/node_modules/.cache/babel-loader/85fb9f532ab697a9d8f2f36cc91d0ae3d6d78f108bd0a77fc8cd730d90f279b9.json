{"ast":null,"code":"/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * To import utils\r\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nvar SvgRenderer = /** @class */function () {\n  /* End-Properties */\n  function SvgRenderer(rootID) {\n    //Internal Variables\n    this.svgLink = 'http://www.w3.org/2000/svg';\n    this.rootId = rootID;\n  }\n  // method to get the attributes value\n  // tslint:disable-next-line:no-any\n  SvgRenderer.prototype.getOptionValue = function (options, key) {\n    return options[key];\n  }; /* tslint:enable */\n  /**\r\n   * To create a Html5 SVG element\r\n   *\r\n   * @param {SVGAttributes} options - Options to create SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createSvg = function (options) {\n    if (isNullOrUndefined(options.id)) {\n      options.id = this.rootId + '_svg';\n    }\n    this.svgObj = document.getElementById(options.id);\n    if (isNullOrUndefined(document.getElementById(options.id))) {\n      this.svgObj = document.createElementNS(this.svgLink, 'svg');\n    }\n    this.svgObj = this.setElementAttributes(options, this.svgObj);\n    this.setSVGSize(options.width, options.height);\n    return this.svgObj;\n  };\n  // method to set the height and width for the SVG element\n  SvgRenderer.prototype.setSVGSize = function (width, height) {\n    var element = document.getElementById(this.rootId);\n    var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n    if (isNullOrUndefined(this.width) || this.width <= 0) {\n      this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\n    } else {\n      this.svgObj.setAttribute('width', this.width.toString());\n    }\n    if (isNullOrUndefined(this.height) || this.height <= 0) {\n      this.svgObj.setAttribute('height', height ? height.toString() : '450');\n    } else {\n      this.svgObj.setAttribute('height', this.height.toString());\n    }\n  };\n  /**\r\n   * To draw a path\r\n   *\r\n   * @param {PathAttributes} options - Options to draw a path in SVG\r\n   * @returns {Element} It returns a appropriate path\r\n   */\n  SvgRenderer.prototype.drawPath = function (options) {\n    var path = document.getElementById(options.id);\n    if (path === null) {\n      path = document.createElementNS(this.svgLink, 'path');\n    }\n    path = this.setElementAttributes(options, path);\n    return path;\n  };\n  /**\r\n   * To draw a line\r\n   *\r\n   * @param {LineAttributes} options - Options to draw a line in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawLine = function (options) {\n    var line = document.getElementById(options.id);\n    if (line === null) {\n      line = document.createElementNS(this.svgLink, 'line');\n    }\n    line = this.setElementAttributes(options, line);\n    return line;\n  };\n  /**\r\n   * To draw a rectangle\r\n   *\r\n   * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawRectangle = function (options) {\n    var rectangle = document.getElementById(options.id);\n    if (rectangle === null) {\n      rectangle = document.createElementNS(this.svgLink, 'rect');\n    }\n    rectangle = this.setElementAttributes(options, rectangle);\n    return rectangle;\n  };\n  /**\r\n   * To draw a circle\r\n   *\r\n   * @param {CircleAttributes} options - Required options to draw a circle in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawCircle = function (options) {\n    var circle = document.getElementById(options.id);\n    if (circle === null) {\n      circle = document.createElementNS(this.svgLink, 'circle');\n    }\n    circle = this.setElementAttributes(options, circle);\n    return circle;\n  };\n  /**\r\n   * To draw a polyline\r\n   *\r\n   * @param {PolylineAttributes} options - Options required to draw a polyline\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawPolyline = function (options) {\n    var polyline = document.getElementById(options.id);\n    if (polyline === null) {\n      polyline = document.createElementNS(this.svgLink, 'polyline');\n    }\n    polyline = this.setElementAttributes(options, polyline);\n    return polyline;\n  };\n  /**\r\n   * To draw an ellipse\r\n   *\r\n   * @param {EllipseAttributes} options - Options required to draw an ellipse\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawEllipse = function (options) {\n    var ellipse = document.getElementById(options.id);\n    if (ellipse === null) {\n      ellipse = document.createElementNS(this.svgLink, 'ellipse');\n    }\n    ellipse = this.setElementAttributes(options, ellipse);\n    return ellipse;\n  };\n  /**\r\n   * To draw a polygon\r\n   *\r\n   * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawPolygon = function (options) {\n    var polygon = document.getElementById(options.id);\n    if (polygon === null) {\n      polygon = document.createElementNS(this.svgLink, 'polygon');\n    }\n    polygon = this.setElementAttributes(options, polygon);\n    return polygon;\n  };\n  /**\r\n   * To draw an image\r\n   *\r\n   * @param {ImageAttributes} options - Required options to draw an image in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawImage = function (options) {\n    var img = document.createElementNS(this.svgLink, 'image');\n    img.setAttributeNS(null, 'height', options.height.toString());\n    img.setAttributeNS(null, 'width', options.width.toString());\n    img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\n    img.setAttributeNS(null, 'x', options.x.toString());\n    img.setAttributeNS(null, 'y', options.y.toString());\n    img.setAttributeNS(null, 'id', options.id);\n    img.setAttributeNS(null, 'visibility', options.visibility);\n    if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\n      img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\n    }\n    if (!isNullOrUndefined(options.preserveAspectRatio)) {\n      img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\n    }\n    return img;\n  };\n  /**\r\n   * To draw a text\r\n   *\r\n   * @param {TextAttributes} options - Options needed to draw a text in SVG\r\n   * @param {string} label - Label of the text\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createText = function (options, label) {\n    var text = document.createElementNS(this.svgLink, 'text');\n    text = this.setElementAttributes(options, text);\n    if (!isNullOrUndefined(label)) {\n      text.textContent = label;\n    }\n    return text;\n  };\n  /**\r\n   * To create a tSpan\r\n   *\r\n   * @param {TextAttributes} options - Options to create tSpan\r\n   * @param {string} label - The text content which is to be rendered in the tSpan\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createTSpan = function (options, label) {\n    var tSpan = document.createElementNS(this.svgLink, 'tspan');\n    tSpan = this.setElementAttributes(options, tSpan);\n    if (!isNullOrUndefined(label)) {\n      tSpan.textContent = label;\n    }\n    return tSpan;\n  };\n  /**\r\n   * To create a title\r\n   *\r\n   * @param {string} text - The text content which is to be rendered in the title\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createTitle = function (text) {\n    var title = document.createElementNS(this.svgLink, 'title');\n    title.textContent = text;\n    return title;\n  };\n  /**\r\n   * To create defs element in SVG\r\n   *\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createDefs = function () {\n    var defs = document.createElementNS(this.svgLink, 'defs');\n    return defs;\n  };\n  /**\r\n   * To create clip path in SVG\r\n   *\r\n   * @param {BaseAttibutes} options - Options needed to create clip path\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createClipPath = function (options) {\n    var clipPath = document.createElementNS(this.svgLink, 'clipPath');\n    clipPath = this.setElementAttributes(options, clipPath);\n    return clipPath;\n  };\n  /**\r\n   * To create foreign object in SVG\r\n   *\r\n   * @param {BaseAttibutes} options - Options needed to create foreign object\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createForeignObject = function (options) {\n    var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\n    foreignObject = this.setElementAttributes(options, foreignObject);\n    return foreignObject;\n  };\n  /**\r\n   * To create group element in SVG\r\n   *\r\n   * @param {BaseAttibutes} options - Options needed to create group\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createGroup = function (options) {\n    var group = document.createElementNS(this.svgLink, 'g');\n    group = this.setElementAttributes(options, group);\n    return group;\n  };\n  /**\r\n   * To create pattern in SVG\r\n   *\r\n   * @param {PatternAttributes} options - Required options to create pattern in SVG\r\n   * @param {string} element - Specifies the name of the pattern\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.createPattern = function (options, element) {\n    var pattern = document.createElementNS(this.svgLink, element);\n    pattern = this.setElementAttributes(options, pattern);\n    return pattern;\n  };\n  /**\r\n   * To create radial gradient in SVG\r\n   *\r\n   * @param {string[]} colors - Specifies the colors required to create radial gradient\r\n   * @param {string} name - Specifies the name of the gradient\r\n   * @param {RadialGradient} options - value for radial gradient\r\n   * @returns {string} It returns color name\r\n   */\n  SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\n    var colorName;\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'radialGradient',\n        'cx': options.cx + '%',\n        'cy': options.cy + '%',\n        'r': options.r + '%',\n        'fx': options.fx + '%',\n        'fy': options.fy + '%'\n      };\n      this.drawGradient('radialGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n    return colorName;\n  };\n  /**\r\n   * To create linear gradient in SVG\r\n   *\r\n   * @param {GradientColor[]} colors - Array of string specifies the values for color\r\n   * @param {string} name - Specifies the name of the gradient\r\n   * @param {LinearGradient} options - Specifies the options for gradient\r\n   * @returns {string} It returns color name\r\n   */\n  SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\n    var colorName;\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'linearGradient',\n        'x1': options.x1 + '%',\n        'y1': options.y1 + '%',\n        'x2': options.x2 + '%',\n        'y2': options.y2 + '%'\n      };\n      this.drawGradient('linearGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n    return colorName;\n  };\n  /**\r\n   * To render the gradient element in SVG\r\n   *\r\n   * @param {string} gradientType - Specifies the type of the gradient\r\n   * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\r\n   * @param {string[]} colors - Array of string specifies the values for color\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\n    var defs = this.createDefs();\n    var gradient = document.createElementNS(this.svgLink, gradientType);\n    gradient = this.setElementAttributes(options, gradient);\n    for (var i = 0; i < colors.length; i++) {\n      var stop_1 = document.createElementNS(this.svgLink, 'stop');\n      stop_1.setAttribute('offset', colors[i].colorStop);\n      stop_1.setAttribute('stop-color', colors[i].color);\n      stop_1.setAttribute('stop-opacity', colors[i].opacity ? colors[i].opacity : '1');\n      if (!isNullOrUndefined(colors[i].style)) {\n        stop_1.style.cssText = colors[i].style;\n      }\n      gradient.appendChild(stop_1);\n    }\n    defs.appendChild(gradient);\n    return defs;\n  };\n  /**\r\n   * To render a clip path\r\n   *\r\n   * @param {BaseAttibutes} options - Options required to render a clip path\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Rect';\n    var rect = this.drawRectangle(options);\n    clipPath.appendChild(rect);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\r\n   * To create circular clip path in SVG\r\n   *\r\n   * @param {CircleAttributes} options - Options required to create circular clip path\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.drawCircularClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Circle';\n    var circle = this.drawCircle(options);\n    clipPath.appendChild(circle);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\r\n   * To set the attributes to the element\r\n   *\r\n   * @param {SVGCanvasAttributes} options - Attributes to set for the element\r\n   * @param {Element} element - The element to which the attributes need to be set\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n  SvgRenderer.prototype.setElementAttributes = function (options, element) {\n    var keys = Object.keys(options);\n    for (var i = 0; i < keys.length; i++) {\n      if (keys[i] === 'style') {\n        element.style.cssText = options[keys[i]];\n      } else {\n        element.setAttribute(keys[i], options[keys[i]]);\n      }\n    }\n    return element;\n  };\n  /**\r\n   * To create a Html5 canvas element\r\n   * Dummy method for using canvas/svg render in the same variable name in chart control\r\n   */\n  SvgRenderer.prototype.createCanvas = function () {\n    return null;\n  };\n  return SvgRenderer;\n}();\nexport { SvgRenderer };","map":{"version":3,"names":["isNullOrUndefined","SvgRenderer","rootID","svgLink","rootId","prototype","getOptionValue","options","key","createSvg","id","svgObj","document","getElementById","createElementNS","setElementAttributes","setSVGSize","width","height","element","size","getBoundingClientRect","setAttribute","toString","drawPath","path","drawLine","line","drawRectangle","rectangle","drawCircle","circle","drawPolyline","polyline","drawEllipse","ellipse","drawPolygon","polygon","drawImage","img","setAttributeNS","href","x","y","visibility","preserveAspectRatio","createText","label","text","textContent","createTSpan","tSpan","createTitle","title","createDefs","defs","createClipPath","clipPath","createForeignObject","foreignObject","createGroup","group","createPattern","pattern","createRadialGradient","colors","name","colorName","colorStop","newOptions","cx","cy","r","fx","fy","drawGradient","color","createLinearGradient","x1","y1","x2","y2","gradientType","gradient","i","length","stop_1","opacity","style","cssText","appendChild","drawClipPath","rect","drawCircularClipPath","keys","Object","createCanvas"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-svg-base/src/svg-render/svg-renderer.js"],"sourcesContent":["/* eslint-disable jsdoc/require-returns */\r\n/* eslint-disable valid-jsdoc */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * To import utils\r\n */\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nvar SvgRenderer = /** @class */ (function () {\r\n    /* End-Properties */\r\n    function SvgRenderer(rootID) {\r\n        //Internal Variables\r\n        this.svgLink = 'http://www.w3.org/2000/svg';\r\n        this.rootId = rootID;\r\n    }\r\n    // method to get the attributes value\r\n    // tslint:disable-next-line:no-any\r\n    SvgRenderer.prototype.getOptionValue = function (options, key) {\r\n        return options[key];\r\n    }; /* tslint:enable */\r\n    /**\r\n     * To create a Html5 SVG element\r\n     *\r\n     * @param {SVGAttributes} options - Options to create SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createSvg = function (options) {\r\n        if (isNullOrUndefined(options.id)) {\r\n            options.id = this.rootId + '_svg';\r\n        }\r\n        this.svgObj = document.getElementById(options.id);\r\n        if (isNullOrUndefined(document.getElementById(options.id))) {\r\n            this.svgObj = document.createElementNS(this.svgLink, 'svg');\r\n        }\r\n        this.svgObj = this.setElementAttributes(options, this.svgObj);\r\n        this.setSVGSize(options.width, options.height);\r\n        return this.svgObj;\r\n    };\r\n    // method to set the height and width for the SVG element\r\n    SvgRenderer.prototype.setSVGSize = function (width, height) {\r\n        var element = document.getElementById(this.rootId);\r\n        var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\r\n        if (isNullOrUndefined(this.width) || this.width <= 0) {\r\n            this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\r\n        }\r\n        else {\r\n            this.svgObj.setAttribute('width', this.width.toString());\r\n        }\r\n        if (isNullOrUndefined(this.height) || this.height <= 0) {\r\n            this.svgObj.setAttribute('height', height ? height.toString() : '450');\r\n        }\r\n        else {\r\n            this.svgObj.setAttribute('height', this.height.toString());\r\n        }\r\n    };\r\n    /**\r\n     * To draw a path\r\n     *\r\n     * @param {PathAttributes} options - Options to draw a path in SVG\r\n     * @returns {Element} It returns a appropriate path\r\n     */\r\n    SvgRenderer.prototype.drawPath = function (options) {\r\n        var path = document.getElementById(options.id);\r\n        if (path === null) {\r\n            path = document.createElementNS(this.svgLink, 'path');\r\n        }\r\n        path = this.setElementAttributes(options, path);\r\n        return path;\r\n    };\r\n    /**\r\n     * To draw a line\r\n     *\r\n     * @param {LineAttributes} options - Options to draw a line in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawLine = function (options) {\r\n        var line = document.getElementById(options.id);\r\n        if (line === null) {\r\n            line = document.createElementNS(this.svgLink, 'line');\r\n        }\r\n        line = this.setElementAttributes(options, line);\r\n        return line;\r\n    };\r\n    /**\r\n     * To draw a rectangle\r\n     *\r\n     * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawRectangle = function (options) {\r\n        var rectangle = document.getElementById(options.id);\r\n        if (rectangle === null) {\r\n            rectangle = document.createElementNS(this.svgLink, 'rect');\r\n        }\r\n        rectangle = this.setElementAttributes(options, rectangle);\r\n        return rectangle;\r\n    };\r\n    /**\r\n     * To draw a circle\r\n     *\r\n     * @param {CircleAttributes} options - Required options to draw a circle in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawCircle = function (options) {\r\n        var circle = document.getElementById(options.id);\r\n        if (circle === null) {\r\n            circle = document.createElementNS(this.svgLink, 'circle');\r\n        }\r\n        circle = this.setElementAttributes(options, circle);\r\n        return circle;\r\n    };\r\n    /**\r\n     * To draw a polyline\r\n     *\r\n     * @param {PolylineAttributes} options - Options required to draw a polyline\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawPolyline = function (options) {\r\n        var polyline = document.getElementById(options.id);\r\n        if (polyline === null) {\r\n            polyline = document.createElementNS(this.svgLink, 'polyline');\r\n        }\r\n        polyline = this.setElementAttributes(options, polyline);\r\n        return polyline;\r\n    };\r\n    /**\r\n     * To draw an ellipse\r\n     *\r\n     * @param {EllipseAttributes} options - Options required to draw an ellipse\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawEllipse = function (options) {\r\n        var ellipse = document.getElementById(options.id);\r\n        if (ellipse === null) {\r\n            ellipse = document.createElementNS(this.svgLink, 'ellipse');\r\n        }\r\n        ellipse = this.setElementAttributes(options, ellipse);\r\n        return ellipse;\r\n    };\r\n    /**\r\n     * To draw a polygon\r\n     *\r\n     * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawPolygon = function (options) {\r\n        var polygon = document.getElementById(options.id);\r\n        if (polygon === null) {\r\n            polygon = document.createElementNS(this.svgLink, 'polygon');\r\n        }\r\n        polygon = this.setElementAttributes(options, polygon);\r\n        return polygon;\r\n    };\r\n    /**\r\n     * To draw an image\r\n     *\r\n     * @param {ImageAttributes} options - Required options to draw an image in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawImage = function (options) {\r\n        var img = document.createElementNS(this.svgLink, 'image');\r\n        img.setAttributeNS(null, 'height', options.height.toString());\r\n        img.setAttributeNS(null, 'width', options.width.toString());\r\n        img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\r\n        img.setAttributeNS(null, 'x', options.x.toString());\r\n        img.setAttributeNS(null, 'y', options.y.toString());\r\n        img.setAttributeNS(null, 'id', options.id);\r\n        img.setAttributeNS(null, 'visibility', options.visibility);\r\n        if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\r\n            img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\r\n        }\r\n        if (!isNullOrUndefined(options.preserveAspectRatio)) {\r\n            img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\r\n        }\r\n        return img;\r\n    };\r\n    /**\r\n     * To draw a text\r\n     *\r\n     * @param {TextAttributes} options - Options needed to draw a text in SVG\r\n     * @param {string} label - Label of the text\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createText = function (options, label) {\r\n        var text = document.createElementNS(this.svgLink, 'text');\r\n        text = this.setElementAttributes(options, text);\r\n        if (!isNullOrUndefined(label)) {\r\n            text.textContent = label;\r\n        }\r\n        return text;\r\n    };\r\n    /**\r\n     * To create a tSpan\r\n     *\r\n     * @param {TextAttributes} options - Options to create tSpan\r\n     * @param {string} label - The text content which is to be rendered in the tSpan\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createTSpan = function (options, label) {\r\n        var tSpan = document.createElementNS(this.svgLink, 'tspan');\r\n        tSpan = this.setElementAttributes(options, tSpan);\r\n        if (!isNullOrUndefined(label)) {\r\n            tSpan.textContent = label;\r\n        }\r\n        return tSpan;\r\n    };\r\n    /**\r\n     * To create a title\r\n     *\r\n     * @param {string} text - The text content which is to be rendered in the title\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createTitle = function (text) {\r\n        var title = document.createElementNS(this.svgLink, 'title');\r\n        title.textContent = text;\r\n        return title;\r\n    };\r\n    /**\r\n     * To create defs element in SVG\r\n     *\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createDefs = function () {\r\n        var defs = document.createElementNS(this.svgLink, 'defs');\r\n        return defs;\r\n    };\r\n    /**\r\n     * To create clip path in SVG\r\n     *\r\n     * @param {BaseAttibutes} options - Options needed to create clip path\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createClipPath = function (options) {\r\n        var clipPath = document.createElementNS(this.svgLink, 'clipPath');\r\n        clipPath = this.setElementAttributes(options, clipPath);\r\n        return clipPath;\r\n    };\r\n    /**\r\n     * To create foreign object in SVG\r\n     *\r\n     * @param {BaseAttibutes} options - Options needed to create foreign object\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createForeignObject = function (options) {\r\n        var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\r\n        foreignObject = this.setElementAttributes(options, foreignObject);\r\n        return foreignObject;\r\n    };\r\n    /**\r\n     * To create group element in SVG\r\n     *\r\n     * @param {BaseAttibutes} options - Options needed to create group\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createGroup = function (options) {\r\n        var group = document.createElementNS(this.svgLink, 'g');\r\n        group = this.setElementAttributes(options, group);\r\n        return group;\r\n    };\r\n    /**\r\n     * To create pattern in SVG\r\n     *\r\n     * @param {PatternAttributes} options - Required options to create pattern in SVG\r\n     * @param {string} element - Specifies the name of the pattern\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createPattern = function (options, element) {\r\n        var pattern = document.createElementNS(this.svgLink, element);\r\n        pattern = this.setElementAttributes(options, pattern);\r\n        return pattern;\r\n    };\r\n    /**\r\n     * To create radial gradient in SVG\r\n     *\r\n     * @param {string[]} colors - Specifies the colors required to create radial gradient\r\n     * @param {string} name - Specifies the name of the gradient\r\n     * @param {RadialGradient} options - value for radial gradient\r\n     * @returns {string} It returns color name\r\n     */\r\n    SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\r\n        var colorName;\r\n        if (!isNullOrUndefined(colors[0].colorStop)) {\r\n            var newOptions = {\r\n                'id': this.rootId + '_' + name + 'radialGradient',\r\n                'cx': options.cx + '%',\r\n                'cy': options.cy + '%',\r\n                'r': options.r + '%',\r\n                'fx': options.fx + '%',\r\n                'fy': options.fy + '%'\r\n            };\r\n            this.drawGradient('radialGradient', newOptions, colors);\r\n            colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\r\n        }\r\n        else {\r\n            colorName = colors[0].color.toString();\r\n        }\r\n        return colorName;\r\n    };\r\n    /**\r\n     * To create linear gradient in SVG\r\n     *\r\n     * @param {GradientColor[]} colors - Array of string specifies the values for color\r\n     * @param {string} name - Specifies the name of the gradient\r\n     * @param {LinearGradient} options - Specifies the options for gradient\r\n     * @returns {string} It returns color name\r\n     */\r\n    SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\r\n        var colorName;\r\n        if (!isNullOrUndefined(colors[0].colorStop)) {\r\n            var newOptions = {\r\n                'id': this.rootId + '_' + name + 'linearGradient',\r\n                'x1': options.x1 + '%',\r\n                'y1': options.y1 + '%',\r\n                'x2': options.x2 + '%',\r\n                'y2': options.y2 + '%'\r\n            };\r\n            this.drawGradient('linearGradient', newOptions, colors);\r\n            colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\r\n        }\r\n        else {\r\n            colorName = colors[0].color.toString();\r\n        }\r\n        return colorName;\r\n    };\r\n    /**\r\n     * To render the gradient element in SVG\r\n     *\r\n     * @param {string} gradientType - Specifies the type of the gradient\r\n     * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\r\n     * @param {string[]} colors - Array of string specifies the values for color\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\r\n        var defs = this.createDefs();\r\n        var gradient = document.createElementNS(this.svgLink, gradientType);\r\n        gradient = this.setElementAttributes(options, gradient);\r\n        for (var i = 0; i < colors.length; i++) {\r\n            var stop_1 = document.createElementNS(this.svgLink, 'stop');\r\n            stop_1.setAttribute('offset', colors[i].colorStop);\r\n            stop_1.setAttribute('stop-color', colors[i].color);\r\n            stop_1.setAttribute('stop-opacity', colors[i].opacity ? (colors[i].opacity) : '1');\r\n            if (!isNullOrUndefined(colors[i].style)) {\r\n                stop_1.style.cssText = colors[i].style;\r\n            }\r\n            gradient.appendChild(stop_1);\r\n        }\r\n        defs.appendChild(gradient);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To render a clip path\r\n     *\r\n     * @param {BaseAttibutes} options - Options required to render a clip path\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawClipPath = function (options) {\r\n        var defs = this.createDefs();\r\n        var clipPath = this.createClipPath({ 'id': options.id });\r\n        options.id = options.id + '_Rect';\r\n        var rect = this.drawRectangle(options);\r\n        clipPath.appendChild(rect);\r\n        defs.appendChild(clipPath);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To create circular clip path in SVG\r\n     *\r\n     * @param {CircleAttributes} options - Options required to create circular clip path\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawCircularClipPath = function (options) {\r\n        var defs = this.createDefs();\r\n        var clipPath = this.createClipPath({ 'id': options.id });\r\n        options.id = options.id + '_Circle';\r\n        var circle = this.drawCircle(options);\r\n        clipPath.appendChild(circle);\r\n        defs.appendChild(clipPath);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To set the attributes to the element\r\n     *\r\n     * @param {SVGCanvasAttributes} options - Attributes to set for the element\r\n     * @param {Element} element - The element to which the attributes need to be set\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.setElementAttributes = function (options, element) {\r\n        var keys = Object.keys(options);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            if (keys[i] === 'style') {\r\n                element.style.cssText = options[keys[i]];\r\n            }\r\n            else {\r\n                element.setAttribute(keys[i], options[keys[i]]);\r\n            }\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * To create a Html5 canvas element\r\n     * Dummy method for using canvas/svg render in the same variable name in chart control\r\n     */\r\n    SvgRenderer.prototype.createCanvas = function () {\r\n        return null;\r\n    };\r\n    return SvgRenderer;\r\n}());\r\nexport { SvgRenderer };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}