{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * PdfNumbersConvertor.ts class for EJ2-PDF\r\n * @private\r\n */\nimport { PdfNumberStyle } from './../../pages/enum';\n/**\r\n * `PdfNumbersConvertor` for convert page number into numbers, roman letters, etc.,\r\n * @private\r\n */\nvar PdfNumbersConvertor = /** @class */function () {\n  function PdfNumbersConvertor() {}\n  // Static methods\n  /**\r\n   * Convert string value from page number with correct format.\r\n   * @private\r\n   */\n  PdfNumbersConvertor.convert = function (intArabic, numberStyle) {\n    var result = '';\n    switch (numberStyle) {\n      case PdfNumberStyle.None:\n        result = '';\n        break;\n      case PdfNumberStyle.Numeric:\n        result = intArabic.toString();\n        break;\n      case PdfNumberStyle.LowerLatin:\n        result = this.arabicToLetter(intArabic).toLowerCase();\n        break;\n      case PdfNumberStyle.LowerRoman:\n        result = this.arabicToRoman(intArabic).toLowerCase();\n        break;\n      case PdfNumberStyle.UpperLatin:\n        result = this.arabicToLetter(intArabic);\n        break;\n      case PdfNumberStyle.UpperRoman:\n        result = this.arabicToRoman(intArabic);\n        break;\n    }\n    return result;\n  };\n  /**\r\n   * Converts `arabic to roman` letters.\r\n   * @private\r\n   */\n  PdfNumbersConvertor.arabicToRoman = function (intArabic) {\n    var retval = '';\n    var retvalM = this.generateNumber(intArabic, 1000, 'M');\n    retval += retvalM.returnValue;\n    intArabic = retvalM.intArabic;\n    var retvalCM = this.generateNumber(intArabic, 900, 'CM');\n    retval += retvalCM.returnValue;\n    intArabic = retvalCM.intArabic;\n    var retvalD = this.generateNumber(intArabic, 500, 'D');\n    retval += retvalD.returnValue;\n    intArabic = retvalD.intArabic;\n    var retvalCD = this.generateNumber(intArabic, 400, 'CD');\n    retval += retvalCD.returnValue;\n    intArabic = retvalCD.intArabic;\n    var retvalC = this.generateNumber(intArabic, 100, 'C');\n    retval += retvalC.returnValue;\n    intArabic = retvalC.intArabic;\n    var retvalXC = this.generateNumber(intArabic, 90, 'XC');\n    retval += retvalXC.returnValue;\n    intArabic = retvalXC.intArabic;\n    var retvalL = this.generateNumber(intArabic, 50, 'L');\n    retval += retvalL.returnValue;\n    intArabic = retvalL.intArabic;\n    var retvalXL = this.generateNumber(intArabic, 40, 'XL');\n    retval += retvalXL.returnValue;\n    intArabic = retvalXL.intArabic;\n    var retvalX = this.generateNumber(intArabic, 10, 'X');\n    retval += retvalX.returnValue;\n    intArabic = retvalX.intArabic;\n    var retvalIX = this.generateNumber(intArabic, 9, 'IX');\n    retval += retvalIX.returnValue;\n    intArabic = retvalIX.intArabic;\n    var retvalV = this.generateNumber(intArabic, 5, 'V');\n    retval += retvalV.returnValue;\n    intArabic = retvalV.intArabic;\n    var retvalIV = this.generateNumber(intArabic, 4, 'IV');\n    retval += retvalIV.returnValue;\n    intArabic = retvalIV.intArabic;\n    var retvalI = this.generateNumber(intArabic, 1, 'I');\n    retval += retvalI.returnValue;\n    intArabic = retvalI.intArabic;\n    return retval.toString();\n  };\n  /**\r\n   * Converts `arabic to normal letters`.\r\n   * @private\r\n   */\n  PdfNumbersConvertor.arabicToLetter = function (arabic) {\n    var stack = this.convertToLetter(arabic);\n    var result = '';\n    while (stack.length > 0) {\n      var num = stack.pop();\n      result = this.appendChar(result, num);\n    }\n    return result.toString();\n  };\n  /**\r\n   * Generate a string value of an input number.\r\n   * @private\r\n   */\n  PdfNumbersConvertor.generateNumber = function (value, magnitude, letter) {\n    var numberstring = '';\n    while (value >= magnitude) {\n      value -= magnitude;\n      numberstring += letter;\n    }\n    return {\n      returnValue: numberstring.toString(),\n      intArabic: value\n    };\n  };\n  /**\r\n   * Convert a input number into letters.\r\n   * @private\r\n   */\n  PdfNumbersConvertor.convertToLetter = function (arabic) {\n    if (arabic <= 0) {\n      throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');\n    }\n    var stack = [];\n    while (arabic > this.letterLimit) {\n      var remainder = arabic % this.letterLimit;\n      if (remainder === 0.0) {\n        arabic = arabic / this.letterLimit - 1;\n        remainder = this.letterLimit;\n      } else {\n        arabic /= this.letterLimit;\n      }\n      stack.push(remainder);\n    }\n    stack.push(arabic);\n    return stack;\n  };\n  /**\r\n   * Convert number to actual string value.\r\n   * @private\r\n   */\n  PdfNumbersConvertor.appendChar = function (builder, value) {\n    var letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);\n    builder += letter;\n    return builder;\n  };\n  // Fields\n  /**\r\n   * numbers of letters in english [readonly].\r\n   * @default = 26.0\r\n   * @private\r\n   */\n  PdfNumbersConvertor.letterLimit = 26.0;\n  /**\r\n   * Resturns `acsii start index` value.\r\n   * @default 64\r\n   * @private\r\n   */\n  PdfNumbersConvertor.acsiiStartIndex = 65 - 1;\n  return PdfNumbersConvertor;\n}();\nexport { PdfNumbersConvertor };","map":{"version":3,"names":["PdfNumberStyle","PdfNumbersConvertor","convert","intArabic","numberStyle","result","None","Numeric","toString","LowerLatin","arabicToLetter","toLowerCase","LowerRoman","arabicToRoman","UpperLatin","UpperRoman","retval","retvalM","generateNumber","returnValue","retvalCM","retvalD","retvalCD","retvalC","retvalXC","retvalL","retvalXL","retvalX","retvalIX","retvalV","retvalIV","retvalI","arabic","stack","convertToLetter","length","num","pop","appendChar","value","magnitude","letter","numberstring","Error","letterLimit","remainder","push","builder","String","fromCharCode","acsiiStartIndex"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-numbers-convertor.js"],"sourcesContent":["/**\r\n * PdfNumbersConvertor.ts class for EJ2-PDF\r\n * @private\r\n */\r\nimport { PdfNumberStyle } from './../../pages/enum';\r\n/**\r\n * `PdfNumbersConvertor` for convert page number into numbers, roman letters, etc.,\r\n * @private\r\n */\r\nvar PdfNumbersConvertor = /** @class */ (function () {\r\n    function PdfNumbersConvertor() {\r\n    }\r\n    // Static methods\r\n    /**\r\n     * Convert string value from page number with correct format.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.convert = function (intArabic, numberStyle) {\r\n        var result = '';\r\n        switch (numberStyle) {\r\n            case PdfNumberStyle.None:\r\n                result = '';\r\n                break;\r\n            case PdfNumberStyle.Numeric:\r\n                result = intArabic.toString();\r\n                break;\r\n            case PdfNumberStyle.LowerLatin:\r\n                result = this.arabicToLetter(intArabic).toLowerCase();\r\n                break;\r\n            case PdfNumberStyle.LowerRoman:\r\n                result = this.arabicToRoman(intArabic).toLowerCase();\r\n                break;\r\n            case PdfNumberStyle.UpperLatin:\r\n                result = this.arabicToLetter(intArabic);\r\n                break;\r\n            case PdfNumberStyle.UpperRoman:\r\n                result = this.arabicToRoman(intArabic);\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Converts `arabic to roman` letters.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.arabicToRoman = function (intArabic) {\r\n        var retval = '';\r\n        var retvalM = this.generateNumber(intArabic, 1000, 'M');\r\n        retval += retvalM.returnValue;\r\n        intArabic = retvalM.intArabic;\r\n        var retvalCM = this.generateNumber(intArabic, 900, 'CM');\r\n        retval += retvalCM.returnValue;\r\n        intArabic = retvalCM.intArabic;\r\n        var retvalD = this.generateNumber(intArabic, 500, 'D');\r\n        retval += retvalD.returnValue;\r\n        intArabic = retvalD.intArabic;\r\n        var retvalCD = this.generateNumber(intArabic, 400, 'CD');\r\n        retval += retvalCD.returnValue;\r\n        intArabic = retvalCD.intArabic;\r\n        var retvalC = this.generateNumber(intArabic, 100, 'C');\r\n        retval += retvalC.returnValue;\r\n        intArabic = retvalC.intArabic;\r\n        var retvalXC = this.generateNumber(intArabic, 90, 'XC');\r\n        retval += retvalXC.returnValue;\r\n        intArabic = retvalXC.intArabic;\r\n        var retvalL = this.generateNumber(intArabic, 50, 'L');\r\n        retval += retvalL.returnValue;\r\n        intArabic = retvalL.intArabic;\r\n        var retvalXL = this.generateNumber(intArabic, 40, 'XL');\r\n        retval += retvalXL.returnValue;\r\n        intArabic = retvalXL.intArabic;\r\n        var retvalX = this.generateNumber(intArabic, 10, 'X');\r\n        retval += retvalX.returnValue;\r\n        intArabic = retvalX.intArabic;\r\n        var retvalIX = this.generateNumber(intArabic, 9, 'IX');\r\n        retval += retvalIX.returnValue;\r\n        intArabic = retvalIX.intArabic;\r\n        var retvalV = this.generateNumber(intArabic, 5, 'V');\r\n        retval += retvalV.returnValue;\r\n        intArabic = retvalV.intArabic;\r\n        var retvalIV = this.generateNumber(intArabic, 4, 'IV');\r\n        retval += retvalIV.returnValue;\r\n        intArabic = retvalIV.intArabic;\r\n        var retvalI = this.generateNumber(intArabic, 1, 'I');\r\n        retval += retvalI.returnValue;\r\n        intArabic = retvalI.intArabic;\r\n        return retval.toString();\r\n    };\r\n    /**\r\n     * Converts `arabic to normal letters`.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.arabicToLetter = function (arabic) {\r\n        var stack = this.convertToLetter(arabic);\r\n        var result = '';\r\n        while (stack.length > 0) {\r\n            var num = stack.pop();\r\n            result = this.appendChar(result, num);\r\n        }\r\n        return result.toString();\r\n    };\r\n    /**\r\n     * Generate a string value of an input number.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.generateNumber = function (value, magnitude, letter) {\r\n        var numberstring = '';\r\n        while (value >= magnitude) {\r\n            value -= magnitude;\r\n            numberstring += letter;\r\n        }\r\n        return { returnValue: numberstring.toString(), intArabic: value };\r\n    };\r\n    /**\r\n     * Convert a input number into letters.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.convertToLetter = function (arabic) {\r\n        if (arabic <= 0) {\r\n            throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');\r\n        }\r\n        var stack = [];\r\n        while (arabic > this.letterLimit) {\r\n            var remainder = arabic % this.letterLimit;\r\n            if (remainder === 0.0) {\r\n                arabic = arabic / this.letterLimit - 1;\r\n                remainder = this.letterLimit;\r\n            }\r\n            else {\r\n                arabic /= this.letterLimit;\r\n            }\r\n            stack.push(remainder);\r\n        }\r\n        stack.push(arabic);\r\n        return stack;\r\n    };\r\n    /**\r\n     * Convert number to actual string value.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.appendChar = function (builder, value) {\r\n        var letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);\r\n        builder += letter;\r\n        return builder;\r\n    };\r\n    // Fields\r\n    /**\r\n     * numbers of letters in english [readonly].\r\n     * @default = 26.0\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.letterLimit = 26.0;\r\n    /**\r\n     * Resturns `acsii start index` value.\r\n     * @default 64\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.acsiiStartIndex = (65 - 1);\r\n    return PdfNumbersConvertor;\r\n}());\r\nexport { PdfNumbersConvertor };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}