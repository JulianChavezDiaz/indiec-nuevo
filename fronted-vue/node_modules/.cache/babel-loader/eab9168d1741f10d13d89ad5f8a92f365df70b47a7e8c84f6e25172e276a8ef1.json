{"ast":null,"code":"/**\r\n * Used to perform `convertion between pixels and points`.\r\n * @private\r\n */\nvar PdfUnitConverter = /** @class */function () {\n  //constructors\n  /**\r\n   * Initializes a new instance of the `UnitConvertor` class with DPI value.\r\n   * @private\r\n   */\n  function PdfUnitConverter(dpi) {\n    this.updateProportionsHelper(dpi);\n  }\n  /**\r\n   * `Converts` the value, from one graphics unit to another graphics unit.\r\n   * @private\r\n   */\n  PdfUnitConverter.prototype.convertUnits = function (value, from, to) {\n    return this.convertFromPixels(this.convertToPixels(value, from), to);\n  };\n  /**\r\n   * Converts the value `to pixel` from specified graphics unit.\r\n   * @private\r\n   */\n  PdfUnitConverter.prototype.convertToPixels = function (value, from) {\n    var index = from;\n    var result = value * this.proportions[index];\n    return result;\n  };\n  /**\r\n   * Converts value, to specified graphics unit `from Pixel`.\r\n   * @private\r\n   */\n  PdfUnitConverter.prototype.convertFromPixels = function (value, to) {\n    var index = to;\n    var result = value / this.proportions[index];\n    return result;\n  };\n  /**\r\n   * `Update proportions` matrix according to Graphics settings.\r\n   * @private\r\n   */\n  PdfUnitConverter.prototype.updateProportionsHelper = function (pixelPerInch) {\n    this.proportions = [pixelPerInch / 2.54, pixelPerInch / 6.0, 1, pixelPerInch / 72.0, pixelPerInch, pixelPerInch / 300.0, pixelPerInch / 25.4 // Millimeter\n    ];\n  };\n  //Fields\n  /**\r\n   * Indicates default `horizontal resolution`.\r\n   * @default 96\r\n   * @private\r\n   */\n  PdfUnitConverter.horizontalResolution = 96;\n  /**\r\n   * Indicates default `vertical resolution`.\r\n   * @default 96\r\n   * @private\r\n   */\n  PdfUnitConverter.verticalResolution = 96;\n  return PdfUnitConverter;\n}();\nexport { PdfUnitConverter };","map":{"version":3,"names":["PdfUnitConverter","dpi","updateProportionsHelper","prototype","convertUnits","value","from","to","convertFromPixels","convertToPixels","index","result","proportions","pixelPerInch","horizontalResolution","verticalResolution"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/unit-convertor.js"],"sourcesContent":["/**\r\n * Used to perform `convertion between pixels and points`.\r\n * @private\r\n */\r\nvar PdfUnitConverter = /** @class */ (function () {\r\n    //constructors\r\n    /**\r\n     * Initializes a new instance of the `UnitConvertor` class with DPI value.\r\n     * @private\r\n     */\r\n    function PdfUnitConverter(dpi) {\r\n        this.updateProportionsHelper(dpi);\r\n    }\r\n    /**\r\n     * `Converts` the value, from one graphics unit to another graphics unit.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.convertUnits = function (value, from, to) {\r\n        return this.convertFromPixels(this.convertToPixels(value, from), to);\r\n    };\r\n    /**\r\n     * Converts the value `to pixel` from specified graphics unit.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.convertToPixels = function (value, from) {\r\n        var index = from;\r\n        var result = (value * this.proportions[index]);\r\n        return result;\r\n    };\r\n    /**\r\n     * Converts value, to specified graphics unit `from Pixel`.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.convertFromPixels = function (value, to) {\r\n        var index = to;\r\n        var result = (value / this.proportions[index]);\r\n        return result;\r\n    };\r\n    /**\r\n     * `Update proportions` matrix according to Graphics settings.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.updateProportionsHelper = function (pixelPerInch) {\r\n        this.proportions = [\r\n            pixelPerInch / 2.54,\r\n            pixelPerInch / 6.0,\r\n            1,\r\n            pixelPerInch / 72.0,\r\n            pixelPerInch,\r\n            pixelPerInch / 300.0,\r\n            pixelPerInch / 25.4 // Millimeter\r\n        ];\r\n    };\r\n    //Fields\r\n    /**\r\n     * Indicates default `horizontal resolution`.\r\n     * @default 96\r\n     * @private\r\n     */\r\n    PdfUnitConverter.horizontalResolution = 96;\r\n    /**\r\n     * Indicates default `vertical resolution`.\r\n     * @default 96\r\n     * @private\r\n     */\r\n    PdfUnitConverter.verticalResolution = 96;\r\n    return PdfUnitConverter;\r\n}());\r\nexport { PdfUnitConverter };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,gBAAgB,GAAG,aAAe,YAAY;EAC9C;EACA;AACJ;AACA;AACA;EACI,SAASA,gBAAgBA,CAACC,GAAG,EAAE;IAC3B,IAAI,CAACC,uBAAuB,CAACD,GAAG,CAAC;EACrC;EACA;AACJ;AACA;AACA;EACID,gBAAgB,CAACG,SAAS,CAACC,YAAY,GAAG,UAAUC,KAAK,EAAEC,IAAI,EAAEC,EAAE,EAAE;IACjE,OAAO,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACC,eAAe,CAACJ,KAAK,EAAEC,IAAI,CAAC,EAAEC,EAAE,CAAC;EACxE,CAAC;EACD;AACJ;AACA;AACA;EACIP,gBAAgB,CAACG,SAAS,CAACM,eAAe,GAAG,UAAUJ,KAAK,EAAEC,IAAI,EAAE;IAChE,IAAII,KAAK,GAAGJ,IAAI;IAChB,IAAIK,MAAM,GAAIN,KAAK,GAAG,IAAI,CAACO,WAAW,CAACF,KAAK,CAAE;IAC9C,OAAOC,MAAM;EACjB,CAAC;EACD;AACJ;AACA;AACA;EACIX,gBAAgB,CAACG,SAAS,CAACK,iBAAiB,GAAG,UAAUH,KAAK,EAAEE,EAAE,EAAE;IAChE,IAAIG,KAAK,GAAGH,EAAE;IACd,IAAII,MAAM,GAAIN,KAAK,GAAG,IAAI,CAACO,WAAW,CAACF,KAAK,CAAE;IAC9C,OAAOC,MAAM;EACjB,CAAC;EACD;AACJ;AACA;AACA;EACIX,gBAAgB,CAACG,SAAS,CAACD,uBAAuB,GAAG,UAAUW,YAAY,EAAE;IACzE,IAAI,CAACD,WAAW,GAAG,CACfC,YAAY,GAAG,IAAI,EACnBA,YAAY,GAAG,GAAG,EAClB,CAAC,EACDA,YAAY,GAAG,IAAI,EACnBA,YAAY,EACZA,YAAY,GAAG,KAAK,EACpBA,YAAY,GAAG,IAAI,CAAC;IAAA,CACvB;EACL,CAAC;EACD;EACA;AACJ;AACA;AACA;AACA;EACIb,gBAAgB,CAACc,oBAAoB,GAAG,EAAE;EAC1C;AACJ;AACA;AACA;AACA;EACId,gBAAgB,CAACe,kBAAkB,GAAG,EAAE;EACxC,OAAOf,gBAAgB;AAC3B,CAAC,CAAC,CAAE;AACJ,SAASA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}