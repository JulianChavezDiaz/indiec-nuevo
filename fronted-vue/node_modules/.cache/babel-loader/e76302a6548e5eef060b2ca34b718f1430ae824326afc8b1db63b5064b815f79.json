{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { withInRange, sum, appendChildElement, getElement } from '../../common/utils/helper';\nimport { getSaturationColor, getPoint } from '../../common/utils/helper';\nimport { Size, PathOption } from '@syncfusion/ej2-svg-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ColumnBase } from './column-base';\nimport { getMedian } from '../../common/utils/helper';\n/**\r\n * `BoxAndWhiskerSeries` module is used to render the box and whisker series.\r\n */\nvar BoxAndWhiskerSeries = /** @class */function (_super) {\n  __extends(BoxAndWhiskerSeries, _super);\n  function BoxAndWhiskerSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Renders the BoxAndWhisker series on the chart.\r\n   *\r\n   * @param {Series} series - The series to be rendered.\r\n   * @param {Axis} xAxis - The X-axis associated with the series.\r\n   * @param {Axis} yAxis - The Y-axis associated with the series.\r\n   * @param {boolean} isInverted - Indicates whether the chart is inverted or not.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  BoxAndWhiskerSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    this.sideBySideInfo = this.getSideBySideInfo(series);\n    var argsData;\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      this.renderPoint(series, point, this.sideBySideInfo, argsData, xAxis, yAxis, isInverted);\n    }\n    if (series.marker.visible) {\n      series.chart.markerRender.render(series);\n    }\n  };\n  /**\r\n   * update the tip region fo box plot\r\n   *\r\n   * @param {Series} series series\r\n   * @param {Points} point point\r\n   * @param {DoubleRange} sideBySideInfo sideBySideInfo\r\n   * @returns {void}\r\n   */\n  BoxAndWhiskerSeries.prototype.updateTipRegion = function (series, point, sideBySideInfo) {\n    var tipRegion = this.getRectangle(point.xValue + sideBySideInfo.median, point.maximum, point.xValue + sideBySideInfo.median, point.minimum, series);\n    this.updateTipSize(series, point, tipRegion, series.chart.requireInvertedAxis);\n  };\n  /**\r\n   * Update tip size to tip regions\r\n   *\r\n   * @param {Series} series Series\r\n   * @param {Points} point Points\r\n   * @param {Rect} region rect region\r\n   * @param {boolean} isInverted isInverted\r\n   * @returns {void}\r\n   */\n  BoxAndWhiskerSeries.prototype.updateTipSize = function (series, point, region, isInverted) {\n    var borderWidth = series.border.width || 1;\n    if (!isInverted) {\n      region.x -= borderWidth / 2;\n      region.width = region.width || borderWidth;\n    } else {\n      region.y -= borderWidth / 2;\n      region.height = region.height || borderWidth;\n    }\n    point.regions.push(region);\n  };\n  BoxAndWhiskerSeries.prototype.renderPoint = function (series, point, sideBySideInfo, argsData, xAxis, yAxis, isInverted) {\n    point.symbolLocations = [];\n    point.regions = [];\n    var centerRegion;\n    if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n      this.findBoxPlotValues(point.y, point, series.boxPlotMode);\n      //region to cover the top and bottom ticks\n      this.updateTipRegion(series, point, sideBySideInfo);\n      //get middle rect\n      centerRegion = this.getRectangle(point.xValue + sideBySideInfo.start, point.upperQuartile, point.xValue + sideBySideInfo.end, point.lowerQuartile, series);\n      point.regions.push(centerRegion);\n      argsData = this.triggerEvent(series, point, series.interior, {\n        color: !isNullOrUndefined(series.border.color) && series.border.color !== 'transparent' ? series.border.color : getSaturationColor(series.interior, -0.6),\n        width: series.border.width ? series.border.width : 1\n      });\n      if (!argsData.cancel) {\n        this.renderBoxAndWhisker(series, point, argsData, this.getPathString(point, series, getPoint(point.xValue, point.median, xAxis, yAxis, isInverted), getPoint(point.xValue + sideBySideInfo.median, point.average, xAxis, yAxis, isInverted)), sideBySideInfo.median);\n      }\n    }\n  };\n  /**\r\n   * Updates the direction of rendering for the specified series.\r\n   *\r\n   * @param {Series} series - The series to be rendered.\r\n   * @param {number[]} point - The point to be updated.\r\n   * @param {boolean} isInverted - Specifies the inverted axis.\r\n   * @returns {void}\r\n   * @private\r\n   */\n  BoxAndWhiskerSeries.prototype.updateDirection = function (series, point, isInverted) {\n    var argsData;\n    for (var i = 0; i < point.length; i++) {\n      var visiblePoint = series.points[point[i]];\n      this.renderPoint(series, visiblePoint, this.sideBySideInfo, argsData, series.xAxis, series.yAxis, isInverted);\n      if (visiblePoint.symbolLocations && visiblePoint.symbolLocations.length && series.marker.visible) {\n        series.chart.markerRender.renderMarker(series, visiblePoint, visiblePoint.symbolLocations[0], visiblePoint.symbolLocations.length - 1, true);\n      }\n      if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n        series.chart.dataLabelCollections = [];\n        series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n        if (visiblePoint.outliers.length === 0) {\n          var element = getElement(series.chart.dataLabelModule.commonId + visiblePoint.index + '_Text_' + 5);\n          if (element) {\n            element.remove();\n          }\n        }\n        var dataLabelElement = series.chart.dataLabelModule.renderDataLabel(series, visiblePoint, null, series.marker.dataLabel);\n        for (var j = 0; j < dataLabelElement.length; j++) {\n          series.chart.dataLabelModule.doDataLabelAnimation(series, dataLabelElement[j]);\n        }\n      }\n    }\n  };\n  /**\r\n   * Calculation for path direction performed here.\r\n   *\r\n   * @param {Points} point point\r\n   * @param {Series} series series\r\n   * @param {ChartLocation} median median\r\n   * @param {ChartLocation} average average\r\n   * @returns {string} direction\r\n   */\n  BoxAndWhiskerSeries.prototype.getPathString = function (point, series, median, average) {\n    var topRect = point.regions[0];\n    var midRect = point.regions[1];\n    var direction = '';\n    var center = series.chart.requireInvertedAxis ? topRect.y + topRect.height / 2 : topRect.x + topRect.width / 2;\n    var midWidth = midRect.x + midRect.width;\n    var midHeight = midRect.y + midRect.height;\n    var topWidth = topRect.x + topRect.width;\n    var topHeight = topRect.y + topRect.height;\n    if (!series.chart.requireInvertedAxis) {\n      this.updateTipSize(series, point, {\n        x: midRect.x,\n        y: topRect.y,\n        width: midWidth - midRect.x,\n        height: 0\n      }, true);\n      this.updateTipSize(series, point, {\n        x: midRect.x,\n        y: topHeight,\n        width: midWidth - midRect.x,\n        height: 0\n      }, true);\n      direction += 'M ' + midRect.x + ' ' + topRect.y + ' ' + ' L ' + midWidth + ' ' + topRect.y;\n      direction += ' M ' + center + ' ' + topRect.y + ' ' + ' L ' + center + ' ' + midRect.y;\n      direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y + ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n      direction += ' M ' + center + ' ' + midHeight + ' L ' + center + ' ' + topHeight;\n      direction += ' M ' + midRect.x + ' ' + topHeight + ' L ' + midWidth + ' ' + topHeight;\n      direction += ' M ' + midRect.x + ' ' + median.y + ' L ' + midWidth + ' ' + median.y;\n      direction += series.showMean ? ' M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) + ' M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) : '';\n    } else {\n      this.updateTipSize(series, point, {\n        x: topRect.x,\n        y: midRect.y,\n        width: 0,\n        height: midHeight - midRect.y\n      }, false);\n      this.updateTipSize(series, point, {\n        x: topWidth,\n        y: midRect.y,\n        width: 0,\n        height: midHeight - midRect.y\n      }, true);\n      direction += 'M ' + topRect.x + ' ' + midRect.y + ' L ' + topRect.x + ' ' + midHeight;\n      direction += 'M ' + topRect.x + ' ' + center + ' ' + ' L ' + midRect.x + ' ' + center;\n      direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y + ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n      direction += ' M ' + midWidth + ' ' + center + ' L ' + topWidth + ' ' + center;\n      direction += ' M ' + topWidth + ' ' + midRect.y + ' L ' + topWidth + ' ' + midHeight;\n      direction += ' M ' + median.x + ' ' + midRect.y + ' ' + ' L ' + median.x + ' ' + midHeight;\n      direction += series.showMean ? 'M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) + 'M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) : '';\n    }\n    return direction;\n  };\n  /**\r\n   * Rendering for box and whisker append here.\r\n   *\r\n   * @param {Series} series series\r\n   * @param {Points} point point\r\n   * @param {IPointRenderEventArgs} argsData argsData\r\n   * @param {string} direction path direction\r\n   * @param {number} median median\r\n   * @returns {void}\r\n   */\n  BoxAndWhiskerSeries.prototype.renderBoxAndWhisker = function (series, point, argsData, direction, median) {\n    var location;\n    var size;\n    var symbolId = series.chart.element.id + '_Series_' + series.index + '_Point_' + (series.removedPointIndex !== null && series.removedPointIndex <= point.index ? point.index + 1 : point.index);\n    var previusDirection = getElement(symbolId + '_BoxPath') ? getElement(symbolId + '_BoxPath').getAttribute('d') : '';\n    var element = series.chart.renderer.drawPath(new PathOption(symbolId + '_BoxPath', argsData.fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction));\n    element.setAttribute('role', 'img');\n    element.setAttribute('aria-label', point.x.toString() + ':' + point.maximum.toString() + ':' + point.minimum.toString() + ':' + point.lowerQuartile.toString() + ':' + point.upperQuartile.toString());\n    var parentElement = series.chart.renderer.createGroup({\n      'id': symbolId\n    });\n    appendChildElement(series.chart.enableCanvas, parentElement, element, series.chart.redraw, true, null, null, null, previusDirection);\n    if (series.removedPointIndex !== null && series.removedPointIndex <= point.index) {\n      parentElement.id = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index;\n      element.id = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index + '_BoxPath';\n    }\n    for (var i = 0; i < point.outliers.length; i++) {\n      location = getPoint(point.xValue + median, point.outliers[i], series.xAxis, series.yAxis, series.chart.requireInvertedAxis);\n      size = new Size(series.marker.width, series.marker.height);\n      point.symbolLocations.push(location);\n      this.updateTipSize(series, point, {\n        x: location.x - size.width / 2,\n        y: location.y - size.height / 2,\n        width: size.width,\n        height: size.height\n      }, true);\n    }\n    appendChildElement(series.chart.enableCanvas, series.seriesElement, parentElement, series.chart.redraw);\n  };\n  /**\r\n   * To find the box plot values.\r\n   *\r\n   * @param {number[]} yValues yValues\r\n   * @param {Points} point point\r\n   * @param {BoxPlotMode} mode mode\r\n   * @returns {void}\r\n   */\n  BoxAndWhiskerSeries.prototype.findBoxPlotValues = function (yValues, point, mode) {\n    var yCount = yValues.length;\n    var quartile = {\n      average: sum(yValues) / yCount,\n      lowerQuartile: 0,\n      upperQuartile: 0,\n      maximum: 0,\n      minimum: 0,\n      median: 0,\n      outliers: []\n    };\n    if (mode === 'Exclusive') {\n      quartile.lowerQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.25);\n      quartile.upperQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.75);\n      quartile.median = this.getExclusiveQuartileValue(yValues, yCount, 0.5);\n    } else if (mode === 'Inclusive') {\n      quartile.lowerQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.25);\n      quartile.upperQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.75);\n      quartile.median = this.getInclusiveQuartileValue(yValues, yCount, 0.5);\n    } else {\n      quartile.median = getMedian(yValues);\n      this.getQuartileValues(yValues, yCount, quartile);\n    }\n    this.getMinMaxOutlier(yValues, yCount, quartile);\n    point.minimum = quartile.minimum;\n    point.maximum = quartile.maximum;\n    point.lowerQuartile = quartile.lowerQuartile;\n    point.upperQuartile = quartile.upperQuartile;\n    point.median = quartile.median;\n    point.outliers = quartile.outliers;\n    point.average = quartile.average;\n  };\n  /**\r\n   * to find the exclusive quartile values\r\n   *\r\n   * @param {number[]} yValues yValues\r\n   * @param {number} count count\r\n   * @param {number} percentile percentile\r\n   * @returns {number} exclusive quartile value\r\n   */\n  BoxAndWhiskerSeries.prototype.getExclusiveQuartileValue = function (yValues, count, percentile) {\n    if (count === 0) {\n      return 0;\n    } else if (count === 1) {\n      return yValues[0];\n    }\n    var value = 0;\n    var rank = percentile * (count + 1);\n    var integerRank = Math.floor(Math.abs(rank));\n    var fractionRank = rank - integerRank;\n    if (integerRank === 0) {\n      value = yValues[0];\n    } else if (integerRank > count - 1) {\n      value = yValues[count - 1];\n    } else {\n      value = fractionRank * (yValues[integerRank] - yValues[integerRank - 1]) + yValues[integerRank - 1];\n    }\n    return value;\n  };\n  /**\r\n   * to find the inclusive quartile values\r\n   *\r\n   * @param {number[]} yValues yValues\r\n   * @param {number} count count\r\n   * @param {number} percentile percentile\r\n   * @returns {number} inclusive quartile value\r\n   */\n  BoxAndWhiskerSeries.prototype.getInclusiveQuartileValue = function (yValues, count, percentile) {\n    if (count === 0) {\n      return 0;\n    } else if (count === 1) {\n      return yValues[0];\n    }\n    var value = 0;\n    var rank = percentile * (count - 1);\n    var integerRank = Math.floor(Math.abs(rank));\n    var fractionRank = rank - integerRank;\n    value = fractionRank * (yValues[integerRank + 1] - yValues[integerRank]) + yValues[integerRank];\n    return value;\n  };\n  /**\r\n   * To find the quartile values\r\n   *\r\n   * @param {number[]} yValues yValues\r\n   * @param {number} count count\r\n   * @param {IBoxPlotQuartile} quartile quartile\r\n   * @returns {void}\r\n   */\n  BoxAndWhiskerSeries.prototype.getQuartileValues = function (yValues, count, quartile) {\n    if (count === 1) {\n      quartile.lowerQuartile = yValues[0];\n      quartile.upperQuartile = yValues[0];\n      return null;\n    }\n    var isEvenList = count % 2 === 0;\n    var halfLength = count / 2;\n    var lowerQuartileArray = yValues.slice(0, halfLength);\n    var upperQuartileArray = yValues.slice(isEvenList ? halfLength : halfLength + 1, count);\n    quartile.lowerQuartile = getMedian(lowerQuartileArray);\n    quartile.upperQuartile = getMedian(upperQuartileArray);\n  };\n  /**\r\n   * To find the min, max and outlier values\r\n   *\r\n   * @param {number[]} yValues yValues\r\n   * @param {number} count count\r\n   * @param {IBoxPlotQuartile} quartile quartile\r\n   * @returns {void}\r\n   */\n  BoxAndWhiskerSeries.prototype.getMinMaxOutlier = function (yValues, count, quartile) {\n    var interquartile = quartile.upperQuartile - quartile.lowerQuartile;\n    var rangeIQR = 1.5 * interquartile;\n    for (var i = 0; i < count; i++) {\n      if (yValues[i] < quartile.lowerQuartile - rangeIQR) {\n        quartile.outliers.push(yValues[i]);\n      } else {\n        quartile.minimum = yValues[i];\n        break;\n      }\n    }\n    for (var i = count - 1; i >= 0; i--) {\n      if (yValues[i] > quartile.upperQuartile + rangeIQR) {\n        quartile.outliers.push(yValues[i]);\n      } else {\n        quartile.maximum = yValues[i];\n        break;\n      }\n    }\n  };\n  /**\r\n   * Animates the series.\r\n   *\r\n   * @param  {Series} series - Defines the series to animate.\r\n   * @returns {void}\r\n   */\n  BoxAndWhiskerSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\r\n   * Get module name.\r\n   *\r\n   * @returns {string} module name\r\n   */\n  BoxAndWhiskerSeries.prototype.getModuleName = function () {\n    return 'BoxAndWhiskerSeries';\n    /**\r\n     * return the module name\r\n     */\n  };\n  /**\r\n   * To destroy the candle series.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n  BoxAndWhiskerSeries.prototype.destroy = function () {\n    /**\r\n     * Destroys the candle series.\r\n     */\n  };\n  return BoxAndWhiskerSeries;\n}(ColumnBase);\nexport { BoxAndWhiskerSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","withInRange","sum","appendChildElement","getElement","getSaturationColor","getPoint","Size","PathOption","isNullOrUndefined","ColumnBase","getMedian","BoxAndWhiskerSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","sideBySideInfo","getSideBySideInfo","argsData","_i","_a","points","length","point","renderPoint","marker","visible","chart","markerRender","updateTipRegion","tipRegion","getRectangle","xValue","median","maximum","minimum","updateTipSize","requireInvertedAxis","region","borderWidth","border","width","x","y","height","regions","push","symbolLocations","centerRegion","index","findBoxPlotValues","boxPlotMode","start","upperQuartile","end","lowerQuartile","triggerEvent","interior","color","cancel","renderBoxAndWhisker","getPathString","average","updateDirection","i","visiblePoint","renderMarker","dataLabel","dataLabelModule","dataLabelCollections","commonId","element","id","outliers","remove","dataLabelElement","renderDataLabel","j","doDataLabelAnimation","topRect","midRect","direction","center","midWidth","midHeight","topWidth","topHeight","showMean","location","size","symbolId","removedPointIndex","previusDirection","getAttribute","renderer","drawPath","fill","opacity","dashArray","setAttribute","toString","parentElement","createGroup","enableCanvas","redraw","seriesElement","yValues","mode","yCount","quartile","getExclusiveQuartileValue","getInclusiveQuartileValue","getQuartileValues","getMinMaxOutlier","count","percentile","value","rank","integerRank","Math","floor","abs","fractionRank","isEvenList","halfLength","lowerQuartileArray","slice","upperQuartileArray","interquartile","rangeIQR","doAnimation","animate","getModuleName","destroy"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/chart/series/box-and-whisker-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { withInRange, sum, appendChildElement, getElement } from '../../common/utils/helper';\r\nimport { getSaturationColor, getPoint } from '../../common/utils/helper';\r\nimport { Size, PathOption } from '@syncfusion/ej2-svg-base';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { ColumnBase } from './column-base';\r\nimport { getMedian } from '../../common/utils/helper';\r\n/**\r\n * `BoxAndWhiskerSeries` module is used to render the box and whisker series.\r\n */\r\nvar BoxAndWhiskerSeries = /** @class */ (function (_super) {\r\n    __extends(BoxAndWhiskerSeries, _super);\r\n    function BoxAndWhiskerSeries() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Renders the BoxAndWhisker series on the chart.\r\n     *\r\n     * @param {Series} series - The series to be rendered.\r\n     * @param {Axis} xAxis - The X-axis associated with the series.\r\n     * @param {Axis} yAxis - The Y-axis associated with the series.\r\n     * @param {boolean} isInverted - Indicates whether the chart is inverted or not.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    BoxAndWhiskerSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\r\n        this.sideBySideInfo = this.getSideBySideInfo(series);\r\n        var argsData;\r\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\r\n            var point = _a[_i];\r\n            this.renderPoint(series, point, this.sideBySideInfo, argsData, xAxis, yAxis, isInverted);\r\n        }\r\n        if (series.marker.visible) {\r\n            series.chart.markerRender.render(series);\r\n        }\r\n    };\r\n    /**\r\n     * update the tip region fo box plot\r\n     *\r\n     * @param {Series} series series\r\n     * @param {Points} point point\r\n     * @param {DoubleRange} sideBySideInfo sideBySideInfo\r\n     * @returns {void}\r\n     */\r\n    BoxAndWhiskerSeries.prototype.updateTipRegion = function (series, point, sideBySideInfo) {\r\n        var tipRegion = this.getRectangle((point.xValue + sideBySideInfo.median), point.maximum, (point.xValue + sideBySideInfo.median), point.minimum, series);\r\n        this.updateTipSize(series, point, tipRegion, series.chart.requireInvertedAxis);\r\n    };\r\n    /**\r\n     * Update tip size to tip regions\r\n     *\r\n     * @param {Series} series Series\r\n     * @param {Points} point Points\r\n     * @param {Rect} region rect region\r\n     * @param {boolean} isInverted isInverted\r\n     * @returns {void}\r\n     */\r\n    BoxAndWhiskerSeries.prototype.updateTipSize = function (series, point, region, isInverted) {\r\n        var borderWidth = series.border.width || 1;\r\n        if (!isInverted) {\r\n            region.x -= borderWidth / 2;\r\n            region.width = region.width || borderWidth;\r\n        }\r\n        else {\r\n            region.y -= borderWidth / 2;\r\n            region.height = region.height || borderWidth;\r\n        }\r\n        point.regions.push(region);\r\n    };\r\n    BoxAndWhiskerSeries.prototype.renderPoint = function (series, point, sideBySideInfo, argsData, xAxis, yAxis, isInverted) {\r\n        point.symbolLocations = [];\r\n        point.regions = [];\r\n        var centerRegion;\r\n        if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\r\n            this.findBoxPlotValues(point.y, point, series.boxPlotMode);\r\n            //region to cover the top and bottom ticks\r\n            this.updateTipRegion(series, point, sideBySideInfo);\r\n            //get middle rect\r\n            centerRegion = this.getRectangle((point.xValue + sideBySideInfo.start), point.upperQuartile, (point.xValue + sideBySideInfo.end), point.lowerQuartile, series);\r\n            point.regions.push(centerRegion);\r\n            argsData = this.triggerEvent(series, point, series.interior, {\r\n                color: (!isNullOrUndefined(series.border.color) && series.border.color !== 'transparent') ? series.border.color :\r\n                    getSaturationColor(series.interior, -0.6),\r\n                width: series.border.width ? series.border.width : 1\r\n            });\r\n            if (!argsData.cancel) {\r\n                this.renderBoxAndWhisker(series, point, argsData, this.getPathString(point, series, getPoint(point.xValue, point.median, xAxis, yAxis, isInverted), getPoint(point.xValue + sideBySideInfo.median, point.average, xAxis, yAxis, isInverted)), sideBySideInfo.median);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates the direction of rendering for the specified series.\r\n     *\r\n     * @param {Series} series - The series to be rendered.\r\n     * @param {number[]} point - The point to be updated.\r\n     * @param {boolean} isInverted - Specifies the inverted axis.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    BoxAndWhiskerSeries.prototype.updateDirection = function (series, point, isInverted) {\r\n        var argsData;\r\n        for (var i = 0; i < point.length; i++) {\r\n            var visiblePoint = series.points[point[i]];\r\n            this.renderPoint(series, visiblePoint, this.sideBySideInfo, argsData, series.xAxis, series.yAxis, isInverted);\r\n            if (visiblePoint.symbolLocations && visiblePoint.symbolLocations.length && series.marker.visible) {\r\n                series.chart.markerRender.renderMarker(series, visiblePoint, visiblePoint.symbolLocations[0], visiblePoint.symbolLocations.length - 1, true);\r\n            }\r\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\r\n                series.chart.dataLabelCollections = [];\r\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\r\n                if (visiblePoint.outliers.length === 0) {\r\n                    var element = getElement(series.chart.dataLabelModule.commonId + visiblePoint.index + '_Text_' + 5);\r\n                    if (element) {\r\n                        element.remove();\r\n                    }\r\n                }\r\n                var dataLabelElement = series.chart.dataLabelModule.renderDataLabel(series, visiblePoint, null, series.marker.dataLabel);\r\n                for (var j = 0; j < dataLabelElement.length; j++) {\r\n                    series.chart.dataLabelModule.doDataLabelAnimation(series, dataLabelElement[j]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calculation for path direction performed here.\r\n     *\r\n     * @param {Points} point point\r\n     * @param {Series} series series\r\n     * @param {ChartLocation} median median\r\n     * @param {ChartLocation} average average\r\n     * @returns {string} direction\r\n     */\r\n    BoxAndWhiskerSeries.prototype.getPathString = function (point, series, median, average) {\r\n        var topRect = point.regions[0];\r\n        var midRect = point.regions[1];\r\n        var direction = '';\r\n        var center = series.chart.requireInvertedAxis ? topRect.y + topRect.height / 2 :\r\n            topRect.x + topRect.width / 2;\r\n        var midWidth = midRect.x + midRect.width;\r\n        var midHeight = midRect.y + midRect.height;\r\n        var topWidth = topRect.x + topRect.width;\r\n        var topHeight = topRect.y + topRect.height;\r\n        if (!series.chart.requireInvertedAxis) {\r\n            this.updateTipSize(series, point, { x: midRect.x, y: topRect.y, width: midWidth - midRect.x, height: 0 }, true);\r\n            this.updateTipSize(series, point, { x: midRect.x, y: topHeight, width: midWidth - midRect.x, height: 0 }, true);\r\n            direction += 'M ' + midRect.x + ' ' + topRect.y + ' ' + ' L ' + midWidth + ' ' + topRect.y;\r\n            direction += ' M ' + center + ' ' + topRect.y + ' ' + ' L ' + center + ' ' + midRect.y;\r\n            direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y +\r\n                ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\r\n            direction += ' M ' + center + ' ' + midHeight + ' L ' + center + ' ' + topHeight;\r\n            direction += ' M ' + midRect.x + ' ' + topHeight + ' L ' + midWidth + ' ' + topHeight;\r\n            direction += ' M ' + midRect.x + ' ' + median.y + ' L ' + midWidth + ' ' + median.y;\r\n            direction += series.showMean ?\r\n                ' M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) +\r\n                    ' M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) : '';\r\n        }\r\n        else {\r\n            this.updateTipSize(series, point, { x: topRect.x, y: midRect.y, width: 0, height: midHeight - midRect.y }, false);\r\n            this.updateTipSize(series, point, { x: topWidth, y: midRect.y, width: 0, height: midHeight - midRect.y }, true);\r\n            direction += 'M ' + topRect.x + ' ' + midRect.y + ' L ' + topRect.x + ' ' + midHeight;\r\n            direction += 'M ' + topRect.x + ' ' + center + ' ' + ' L ' + midRect.x + ' ' + center;\r\n            direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y +\r\n                ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\r\n            direction += ' M ' + midWidth + ' ' + center + ' L ' + topWidth + ' ' + center;\r\n            direction += ' M ' + topWidth + ' ' + midRect.y + ' L ' + topWidth + ' ' + midHeight;\r\n            direction += ' M ' + median.x + ' ' + midRect.y + ' ' + ' L ' + median.x + ' ' + midHeight;\r\n            direction += series.showMean ?\r\n                'M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) +\r\n                    'M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) : '';\r\n        }\r\n        return direction;\r\n    };\r\n    /**\r\n     * Rendering for box and whisker append here.\r\n     *\r\n     * @param {Series} series series\r\n     * @param {Points} point point\r\n     * @param {IPointRenderEventArgs} argsData argsData\r\n     * @param {string} direction path direction\r\n     * @param {number} median median\r\n     * @returns {void}\r\n     */\r\n    BoxAndWhiskerSeries.prototype.renderBoxAndWhisker = function (series, point, argsData, direction, median) {\r\n        var location;\r\n        var size;\r\n        var symbolId = series.chart.element.id + '_Series_' + series.index + '_Point_' + ((series.removedPointIndex !== null && series.removedPointIndex <= point.index) ? (point.index + 1) : point.index);\r\n        var previusDirection = getElement(symbolId + '_BoxPath') ? getElement((symbolId + '_BoxPath')).getAttribute('d') : '';\r\n        var element = series.chart.renderer.drawPath(new PathOption(symbolId + '_BoxPath', argsData.fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction));\r\n        element.setAttribute('role', 'img');\r\n        element.setAttribute('aria-label', point.x.toString() + ':' + point.maximum.toString()\r\n            + ':' + point.minimum.toString() + ':' + point.lowerQuartile.toString() + ':' + point.upperQuartile.toString());\r\n        var parentElement = series.chart.renderer.createGroup({\r\n            'id': symbolId\r\n        });\r\n        appendChildElement(series.chart.enableCanvas, parentElement, element, series.chart.redraw, true, null, null, null, previusDirection);\r\n        if (series.removedPointIndex !== null && series.removedPointIndex <= point.index) {\r\n            parentElement.id = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index;\r\n            element.id = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index + '_BoxPath';\r\n        }\r\n        for (var i = 0; i < point.outliers.length; i++) {\r\n            location = getPoint((point.xValue + median), point.outliers[i], series.xAxis, series.yAxis, series.chart.requireInvertedAxis);\r\n            size = new Size(series.marker.width, series.marker.height);\r\n            point.symbolLocations.push(location);\r\n            this.updateTipSize(series, point, {\r\n                x: location.x - (size.width / 2), y: location.y - (size.height / 2),\r\n                width: size.width, height: size.height\r\n            }, true);\r\n        }\r\n        appendChildElement(series.chart.enableCanvas, series.seriesElement, parentElement, series.chart.redraw);\r\n    };\r\n    /**\r\n     * To find the box plot values.\r\n     *\r\n     * @param {number[]} yValues yValues\r\n     * @param {Points} point point\r\n     * @param {BoxPlotMode} mode mode\r\n     * @returns {void}\r\n     */\r\n    BoxAndWhiskerSeries.prototype.findBoxPlotValues = function (yValues, point, mode) {\r\n        var yCount = yValues.length;\r\n        var quartile = {\r\n            average: sum(yValues) / yCount,\r\n            lowerQuartile: 0, upperQuartile: 0,\r\n            maximum: 0, minimum: 0,\r\n            median: 0, outliers: []\r\n        };\r\n        if (mode === 'Exclusive') {\r\n            quartile.lowerQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.25);\r\n            quartile.upperQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.75);\r\n            quartile.median = this.getExclusiveQuartileValue(yValues, yCount, 0.5);\r\n        }\r\n        else if (mode === 'Inclusive') {\r\n            quartile.lowerQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.25);\r\n            quartile.upperQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.75);\r\n            quartile.median = this.getInclusiveQuartileValue(yValues, yCount, 0.5);\r\n        }\r\n        else {\r\n            quartile.median = getMedian(yValues);\r\n            this.getQuartileValues(yValues, yCount, quartile);\r\n        }\r\n        this.getMinMaxOutlier(yValues, yCount, quartile);\r\n        point.minimum = quartile.minimum;\r\n        point.maximum = quartile.maximum;\r\n        point.lowerQuartile = quartile.lowerQuartile;\r\n        point.upperQuartile = quartile.upperQuartile;\r\n        point.median = quartile.median;\r\n        point.outliers = quartile.outliers;\r\n        point.average = quartile.average;\r\n    };\r\n    /**\r\n     * to find the exclusive quartile values\r\n     *\r\n     * @param {number[]} yValues yValues\r\n     * @param {number} count count\r\n     * @param {number} percentile percentile\r\n     * @returns {number} exclusive quartile value\r\n     */\r\n    BoxAndWhiskerSeries.prototype.getExclusiveQuartileValue = function (yValues, count, percentile) {\r\n        if (count === 0) {\r\n            return 0;\r\n        }\r\n        else if (count === 1) {\r\n            return yValues[0];\r\n        }\r\n        var value = 0;\r\n        var rank = percentile * (count + 1);\r\n        var integerRank = Math.floor(Math.abs(rank));\r\n        var fractionRank = rank - integerRank;\r\n        if (integerRank === 0) {\r\n            value = yValues[0];\r\n        }\r\n        else if (integerRank > count - 1) {\r\n            value = yValues[count - 1];\r\n        }\r\n        else {\r\n            value = fractionRank * (yValues[integerRank] - yValues[integerRank - 1]) + yValues[integerRank - 1];\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * to find the inclusive quartile values\r\n     *\r\n     * @param {number[]} yValues yValues\r\n     * @param {number} count count\r\n     * @param {number} percentile percentile\r\n     * @returns {number} inclusive quartile value\r\n     */\r\n    BoxAndWhiskerSeries.prototype.getInclusiveQuartileValue = function (yValues, count, percentile) {\r\n        if (count === 0) {\r\n            return 0;\r\n        }\r\n        else if (count === 1) {\r\n            return yValues[0];\r\n        }\r\n        var value = 0;\r\n        var rank = percentile * (count - 1);\r\n        var integerRank = Math.floor(Math.abs(rank));\r\n        var fractionRank = rank - integerRank;\r\n        value = fractionRank * (yValues[integerRank + 1] - yValues[integerRank]) + yValues[integerRank];\r\n        return value;\r\n    };\r\n    /**\r\n     * To find the quartile values\r\n     *\r\n     * @param {number[]} yValues yValues\r\n     * @param {number} count count\r\n     * @param {IBoxPlotQuartile} quartile quartile\r\n     * @returns {void}\r\n     */\r\n    BoxAndWhiskerSeries.prototype.getQuartileValues = function (yValues, count, quartile) {\r\n        if (count === 1) {\r\n            quartile.lowerQuartile = yValues[0];\r\n            quartile.upperQuartile = yValues[0];\r\n            return null;\r\n        }\r\n        var isEvenList = count % 2 === 0;\r\n        var halfLength = count / 2;\r\n        var lowerQuartileArray = yValues.slice(0, halfLength);\r\n        var upperQuartileArray = yValues.slice(isEvenList ? halfLength : halfLength + 1, count);\r\n        quartile.lowerQuartile = getMedian(lowerQuartileArray);\r\n        quartile.upperQuartile = getMedian(upperQuartileArray);\r\n    };\r\n    /**\r\n     * To find the min, max and outlier values\r\n     *\r\n     * @param {number[]} yValues yValues\r\n     * @param {number} count count\r\n     * @param {IBoxPlotQuartile} quartile quartile\r\n     * @returns {void}\r\n     */\r\n    BoxAndWhiskerSeries.prototype.getMinMaxOutlier = function (yValues, count, quartile) {\r\n        var interquartile = quartile.upperQuartile - quartile.lowerQuartile;\r\n        var rangeIQR = 1.5 * interquartile;\r\n        for (var i = 0; i < count; i++) {\r\n            if (yValues[i] < quartile.lowerQuartile - rangeIQR) {\r\n                quartile.outliers.push(yValues[i]);\r\n            }\r\n            else {\r\n                quartile.minimum = yValues[i];\r\n                break;\r\n            }\r\n        }\r\n        for (var i = count - 1; i >= 0; i--) {\r\n            if (yValues[i] > quartile.upperQuartile + rangeIQR) {\r\n                quartile.outliers.push(yValues[i]);\r\n            }\r\n            else {\r\n                quartile.maximum = yValues[i];\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Animates the series.\r\n     *\r\n     * @param  {Series} series - Defines the series to animate.\r\n     * @returns {void}\r\n     */\r\n    BoxAndWhiskerSeries.prototype.doAnimation = function (series) {\r\n        this.animate(series);\r\n    };\r\n    /**\r\n     * Get module name.\r\n     *\r\n     * @returns {string} module name\r\n     */\r\n    BoxAndWhiskerSeries.prototype.getModuleName = function () {\r\n        return 'BoxAndWhiskerSeries';\r\n        /**\r\n         * return the module name\r\n         */\r\n    };\r\n    /**\r\n     * To destroy the candle series.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    BoxAndWhiskerSeries.prototype.destroy = function () {\r\n        /**\r\n         * Destroys the candle series.\r\n         */\r\n    };\r\n    return BoxAndWhiskerSeries;\r\n}(ColumnBase));\r\nexport { BoxAndWhiskerSeries };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}