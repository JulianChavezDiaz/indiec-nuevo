{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\r\n * AccumulationChart base file\r\n */\nimport { Property, ChildProperty, Complex, createElement, Browser, animationMode } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Border, Font, Animation, EmptyPointSettings, Connector } from '../../common/model/base';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber, appendChildElement } from '../../common/utils/helper';\nimport { seriesRender, pointRender } from '../../common/model/constants';\nimport { getSeriesColor } from '../../common/model/theme';\nimport { getElement, firstToLowerCase } from '../../common/utils/helper';\n/**\r\n * Annotation settings for accumulation series.\r\n */\nvar AccumulationAnnotationSettings = /** @class */function (_super) {\n  __extends(AccumulationAnnotationSettings, _super);\n  function AccumulationAnnotationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], AccumulationAnnotationSettings.prototype, \"content\", void 0);\n  __decorate([Property('0')], AccumulationAnnotationSettings.prototype, \"x\", void 0);\n  __decorate([Property('0')], AccumulationAnnotationSettings.prototype, \"y\", void 0);\n  __decorate([Property('Pixel')], AccumulationAnnotationSettings.prototype, \"coordinateUnits\", void 0);\n  __decorate([Property('Chart')], AccumulationAnnotationSettings.prototype, \"region\", void 0);\n  __decorate([Property('Middle')], AccumulationAnnotationSettings.prototype, \"verticalAlignment\", void 0);\n  __decorate([Property('Center')], AccumulationAnnotationSettings.prototype, \"horizontalAlignment\", void 0);\n  __decorate([Property(null)], AccumulationAnnotationSettings.prototype, \"description\", void 0);\n  return AccumulationAnnotationSettings;\n}(ChildProperty);\nexport { AccumulationAnnotationSettings };\n/**\r\n * Configures the dataLabel in accumulation chart.\r\n */\nvar AccumulationDataLabelSettings = /** @class */function (_super) {\n  __extends(AccumulationDataLabelSettings, _super);\n  function AccumulationDataLabelSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], AccumulationDataLabelSettings.prototype, \"visible\", void 0);\n  __decorate([Property(true)], AccumulationDataLabelSettings.prototype, \"showZero\", void 0);\n  __decorate([Property(null)], AccumulationDataLabelSettings.prototype, \"name\", void 0);\n  __decorate([Property('transparent')], AccumulationDataLabelSettings.prototype, \"fill\", void 0);\n  __decorate([Property('Inside')], AccumulationDataLabelSettings.prototype, \"position\", void 0);\n  __decorate([Property(5)], AccumulationDataLabelSettings.prototype, \"rx\", void 0);\n  __decorate([Property(5)], AccumulationDataLabelSettings.prototype, \"ry\", void 0);\n  __decorate([Property(0)], AccumulationDataLabelSettings.prototype, \"angle\", void 0);\n  __decorate([Property(false)], AccumulationDataLabelSettings.prototype, \"enableRotation\", void 0);\n  __decorate([Complex({\n    width: null,\n    color: null\n  }, Border)], AccumulationDataLabelSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: null,\n    fontStyle: null,\n    fontWeight: null,\n    color: null\n  }, Font)], AccumulationDataLabelSettings.prototype, \"font\", void 0);\n  __decorate([Complex({}, Connector)], AccumulationDataLabelSettings.prototype, \"connectorStyle\", void 0);\n  __decorate([Property(null)], AccumulationDataLabelSettings.prototype, \"template\", void 0);\n  __decorate([Property('')], AccumulationDataLabelSettings.prototype, \"format\", void 0);\n  __decorate([Property(null)], AccumulationDataLabelSettings.prototype, \"maxWidth\", void 0);\n  __decorate([Property('Ellipsis')], AccumulationDataLabelSettings.prototype, \"textOverflow\", void 0);\n  __decorate([Property('Normal')], AccumulationDataLabelSettings.prototype, \"textWrap\", void 0);\n  return AccumulationDataLabelSettings;\n}(ChildProperty);\nexport { AccumulationDataLabelSettings };\n/**\r\n * Center value of the Pie series.\r\n */\nvar PieCenter = /** @class */function (_super) {\n  __extends(PieCenter, _super);\n  function PieCenter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('50%')], PieCenter.prototype, \"x\", void 0);\n  __decorate([Property('50%')], PieCenter.prototype, \"y\", void 0);\n  return PieCenter;\n}(ChildProperty);\nexport { PieCenter };\n/**\r\n * Points model for the series.\r\n *\r\n * @public\r\n */\nvar AccPoints = /** @class */function () {\n  function AccPoints() {\n    /** Accumulation point visibility. */\n    this.visible = true;\n    /** Accumulation point symbol location. */\n    this.symbolLocation = null;\n    /** @private */\n    this.region = null;\n    /** @private */\n    this.labelRegion = null;\n    /** @private */\n    this.labelVisible = true;\n    this.regions = null;\n    /** @private */\n    this.isExplode = false;\n    /** @private */\n    this.isClubbed = false;\n    /** @private */\n    this.isSliced = false;\n    /** @private  */\n    this.argsData = null;\n    /** @private */\n    this.isLabelUpdated = null;\n    /** @private */\n    this.initialLabelRegion = null;\n  }\n  return AccPoints;\n}();\nexport { AccPoints };\n/**\r\n *  Configures the series in accumulation chart.\r\n */\nvar AccumulationSeries = /** @class */function (_super) {\n  __extends(AccumulationSeries, _super);\n  function AccumulationSeries() {\n    /**\r\n     * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager.\r\n     * ```html\r\n     * <div id='Pie'></div>\r\n     * ```\r\n     * ```typescript\r\n     * let dataManager: DataManager = new DataManager({\r\n     *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'\r\n     * });\r\n     * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);\r\n     * let pie: AccumulationChart = new AccumulationChart({\r\n     * ...\r\n     *     series: [{\r\n     *        dataSource: dataManager,\r\n     *        xName: 'Id',\r\n     *        yName: 'Estimate',\r\n     *        query: query\r\n     *    }],\r\n     * ...\r\n     * });\r\n     * pie.appendTo('#Pie');\r\n     * ```\r\n     *\r\n     * @default ''\r\n     */\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n    _this.points = [];\n    /** @private */\n    _this.clubbedPoints = [];\n    /** @private */\n    _this.sumOfPoints = 0;\n    /** @private */\n    _this.isRectSeries = true;\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    /** @private */\n    _this.category = 'Series';\n    /** @private */\n    _this.rightSidePoints = [];\n    /** @private */\n    _this.leftSidePoints = [];\n    return _this;\n  }\n  /**\r\n   * To refresh the Datamanager for series.\r\n   *\r\n   * @private\r\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n   * @param {boolean} render - Specifies whether to render the accumulation chart after refreshing the DataManager.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.refreshDataManager = function (accumulation, render) {\n    var _this = this;\n    this.radius = this.radius ? this.radius : Browser.isDevice && this.dataLabel.position === 'Outside' ? '40%' : '80%';\n    var dateSource = this.dataSource || accumulation.dataSource;\n    if (!(dateSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n      this.dataManagerSuccess({\n        result: dateSource,\n        count: dateSource.length\n      }, accumulation, render);\n      return;\n    }\n    var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e, accumulation);\n    });\n  };\n  /**\r\n   * To get points on dataManager is success.\r\n   *\r\n   * @private\r\n   * @param {Object} e - The data manager result object.\r\n   * @param {Object} e.result - The result of the data manager process.\r\n   * @param {number} e.count - The count of items in the result.\r\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n   * @param {boolean} render - Specifies whether to render the accumulation chart after retrieving the points.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.dataManagerSuccess = function (e, accumulation, render) {\n    if (render === void 0) {\n      render = true;\n    }\n    var argsData = {\n      name: seriesRender,\n      series: this,\n      data: e.result\n    };\n    accumulation.allowServerDataBinding = false;\n    accumulation.trigger(seriesRender, argsData);\n    this.resultData = e.result !== '' ? e.result : [];\n    if (!accumulation.isBlazor && !render) {\n      this.getPoints(this.resultData, accumulation); // To update datasource using onPropertyChanged method. incident id: 290690\n    }\n    if (++accumulation.seriesCounts === accumulation.visibleSeries.length && render || window['Blazor'] && !render && accumulation.seriesCounts === 1) {\n      this.getPoints(this.resultData, accumulation);\n      accumulation.refreshChart();\n    }\n  };\n  /**\r\n   * To find points from result data.\r\n   *\r\n   * @private\r\n   * @param {Object} result - The result of the process.\r\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.getPoints = function (result, accumulation) {\n    var length = Object.keys(result).length;\n    this.sumOfPoints = 0;\n    if (length === 0) {\n      // fix for Pie datalabels are not removed for empty datasource\n      this.points = [];\n      return null;\n    }\n    this.findSumOfPoints(result);\n    this.points = [];\n    this.clubbedPoints = [];\n    this.sumOfClub = 0;\n    var point;\n    var colors = this.palettes.length ? this.palettes : getSeriesColor(accumulation.theme);\n    var clubValue = stringToNumber(this.groupTo, this.sumOfPoints);\n    for (var i = 0; i < length; i++) {\n      point = this.setPoints(result, i, colors, accumulation);\n      if (!this.isClub(point, clubValue, i)) {\n        if (isNullOrUndefined(point.y)) {\n          point.visible = false;\n        }\n        this.pushPoints(point, colors);\n      } else {\n        point.index = this.clubbedPoints.length;\n        point.isExplode = true;\n        this.clubbedPoints.push(point);\n        point.isSliced = true;\n      }\n    }\n    this.lastGroupTo = this.groupTo;\n    if (this.sumOfClub > 0) {\n      var clubPoint_1 = this.generateClubPoint();\n      this.pushPoints(clubPoint_1, colors);\n      var pointsLength_1 = this.points.length - 1;\n      this.clubbedPoints.map(function (point) {\n        point.index += pointsLength_1;\n        point.color = clubPoint_1.color;\n      });\n    }\n    if (this.clubbedPoints.length && this.explode && this.type === 'Pie' && (this.explodeAll || this.points[this.points.length - 1].index === this.explodeIndex)) {\n      this.points.splice(this.points.length - 1, 1);\n      this.points = this.points.concat(this.clubbedPoints);\n    }\n  };\n  AccumulationSeries.prototype.generateClubPoint = function () {\n    var clubPoint = new AccPoints();\n    clubPoint.isClubbed = true;\n    clubPoint.x = 'Others';\n    clubPoint.y = this.sumOfClub;\n    clubPoint.text = clubPoint.originalText = clubPoint.x + ': ' + this.sumOfClub;\n    clubPoint.sliceRadius = '80%';\n    return clubPoint;\n  };\n  /**\r\n   * Method to set point index and color.\r\n   *\r\n   * @param {AccPoints} point - The point data.\r\n   * @param {string[]} colors - The array of colors used in the accumulation chart.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.pushPoints = function (point, colors) {\n    point.index = this.points.length;\n    point.isExplode = this.explodeAll || point.index === this.explodeIndex;\n    point.color = point.color || colors[point.index % colors.length];\n    this.points.push(point);\n  };\n  /**\r\n   * Method to find club point.\r\n   *\r\n   * @param {AccPoints} point - The point data.\r\n   * @param {number} clubValue - The club value for accumulation chart.\r\n   * @param {number} index - The index of the point in the data set.\r\n   * @returns {boolean} - false\r\n   */\n  AccumulationSeries.prototype.isClub = function (point, clubValue, index) {\n    if (!isNullOrUndefined(clubValue)) {\n      if (this.groupMode === 'Value' && Math.abs(point.y) <= clubValue) {\n        this.sumOfClub += Math.abs(point.y);\n        return true;\n      } else if (this.groupMode === 'Point' && index >= clubValue) {\n        this.sumOfClub += Math.abs(point.y);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * Method to find sum of points in the series.\r\n   *\r\n   * @param {Object} result - The result of the process.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.findSumOfPoints = function (result) {\n    var length = Object.keys(result).length;\n    for (var i = 0; i < length; i++) {\n      if (!isNullOrUndefined(result[i]) && !isNullOrUndefined(result[i][this.yName]) && !isNaN(result[i][this.yName])) {\n        this.sumOfPoints += Math.abs(result[i][this.yName]);\n      }\n    }\n  };\n  /**\r\n   * Method to set points x, y and text from data source.\r\n   *\r\n   * @param {Object} data - The data containing information for the points.\r\n   * @param {number} i - The index of the current point in the data set.\r\n   * @param {string[]} colors - The array of colors used in the accumulation chart.\r\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n   * @returns {AccPoints} - The point data retrieved from the specified index.\r\n   */\n  AccumulationSeries.prototype.setPoints = function (data, i, colors, accumulation) {\n    var point = new AccPoints();\n    point.x = getValue(this.xName, data[i]);\n    point.y = getValue(this.yName, data[i]);\n    point.percentage = +(point.y / this.sumOfPoints * 100).toFixed(2);\n    point.legendImageUrl = getValue(this.legendImageUrl, data[i]);\n    point.color = getValue(this.pointColorMapping, data[i]);\n    point.text = point.originalText = getValue(this.dataLabel.name || '', data[i]);\n    point.tooltip = getValue(this.tooltipMappingName || '', data[i]);\n    point.sliceRadius = getValue(this.radius, data[i]);\n    point.sliceRadius = isNullOrUndefined(point.sliceRadius) ? '80%' : point.sliceRadius;\n    point.separatorY = accumulation.intl.formatNumber(point.y, {\n      useGrouping: accumulation.useGroupingSeparator\n    });\n    this.setAccEmptyPoint(point, i, data);\n    return point;\n  };\n  /**\r\n   * Method render the series elements for accumulation chart.\r\n   *\r\n   * @private\r\n   * @param {AccumulationChart} accumulation - The AccumulationChart control.\r\n   * @param {boolean} redraw - Specifies whether to redraw the points.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.renderSeries = function (accumulation, redraw) {\n    var seriesGroup = redraw ? getElement(accumulation.element.id + '_Series_' + this.index) : accumulation.renderer.createGroup({\n      id: accumulation.element.id + '_Series_' + this.index\n    });\n    this.renderPoints(accumulation, seriesGroup, redraw);\n    var datalabelGroup;\n    if (accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\n      datalabelGroup = accumulation.renderer.createGroup({\n        id: accumulation.element.id + '_datalabel_Series_' + this.index\n      });\n      datalabelGroup.style.visibility = (this.animation.enable && animationMode !== 'Disable' || animationMode === 'Enable') && accumulation.animateSeries && this.type === 'Pie' ? 'hidden' : 'visible';\n      this.renderDataLabel(accumulation, datalabelGroup, redraw);\n    }\n    if (this.type === 'Pie') {\n      this.findMaxBounds(this.labelBound, this.accumulationBound);\n      accumulation.pieSeriesModule.animateSeries(accumulation, this.animation, this, seriesGroup);\n    }\n    if (accumulation.accumulationLegendModule) {\n      this.labelBound.x -= accumulation.explodeDistance;\n      this.labelBound.y -= accumulation.explodeDistance;\n      this.labelBound.height += accumulation.explodeDistance - this.labelBound.y;\n      this.labelBound.width += accumulation.explodeDistance - this.labelBound.x;\n    }\n  };\n  /**\r\n   * Method render the points elements for accumulation chart series.\r\n   *\r\n   * @param {AccumulationChart} accumulation - The AccumulationChart control.\r\n   * @param {Element} seriesGroup - The group element to contain the point elements.\r\n   * @param {boolean} redraw - Specifies whether to redraw the points.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.renderPoints = function (accumulation, seriesGroup, redraw) {\n    var pointId = accumulation.element.id + '_Series_' + this.index + '_Point_';\n    var option;\n    for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      var argsData = {\n        cancel: false,\n        name: pointRender,\n        series: this,\n        point: point,\n        fill: point.color,\n        border: this.isEmpty(point) ? {\n          width: this.emptyPointSettings.border.width,\n          color: this.emptyPointSettings.border.color\n        } : {\n          width: this.border.width,\n          color: this.border.color\n        }\n      };\n      accumulation.trigger(pointRender, argsData);\n      point.color = argsData.fill;\n      option = new PathOption(pointId + point.index, point.color, argsData.border.width || 1, argsData.border.color || point.color, this.opacity, argsData.series.dashArray, '');\n      accumulation[firstToLowerCase(this.type) + 'SeriesModule'].renderPoint(point, this, accumulation, option, seriesGroup, redraw);\n    }\n    appendChildElement(false, accumulation.getSeriesElement(), seriesGroup, redraw);\n  };\n  /**\r\n   * Method render the datalabel elements for accumulation chart.\r\n   *\r\n   * @param {AccumulationChart} accumulation - The AccumulationChart control.\r\n   * @param {Element} datalabelGroup - The group element to contain the data label elements.\r\n   * @param {boolean} redraw - Specifies whether to redraw the data labels.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.renderDataLabel = function (accumulation, datalabelGroup, redraw) {\n    accumulation.accumulationDataLabelModule.findAreaRect();\n    var element = createElement('div', {\n      id: accumulation.element.id + '_Series_0' + '_DataLabelCollections'\n    });\n    this.leftSidePoints = [];\n    this.rightSidePoints = [];\n    var firstQuarter = [];\n    var secondQuarter = [];\n    for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      if (point.visible) {\n        if (this.dataLabel.showZero || !this.dataLabel.showZero && (point.y !== 0 || point.y === 0 && this.emptyPointSettings.mode === 'Zero')) {\n          accumulation.accumulationDataLabelModule.renderDataLabel(point, this.dataLabel, datalabelGroup, this.points, this.index, element, redraw);\n        }\n      }\n      if (point.midAngle >= 90 && point.midAngle <= 270) {\n        this.leftSidePoints.push(point);\n      } else {\n        if (point.midAngle >= 0 && point.midAngle <= 90) {\n          secondQuarter.push(point);\n        } else {\n          firstQuarter.push(point);\n        }\n      }\n    }\n    firstQuarter.sort(function (a, b) {\n      return a.midAngle - b.midAngle;\n    });\n    secondQuarter.sort(function (a, b) {\n      return a.midAngle - b.midAngle;\n    });\n    this.leftSidePoints.sort(function (a, b) {\n      return a.midAngle - b.midAngle;\n    });\n    this.rightSidePoints = firstQuarter.concat(secondQuarter);\n    accumulation.accumulationDataLabelModule.drawDataLabels(this, this.dataLabel, datalabelGroup, element, redraw);\n    if (this.dataLabel.template !== null && element.childElementCount) {\n      var dataLabelCallBack = accumulation.accumulationDataLabelModule.drawDataLabels.bind(accumulation.accumulationDataLabelModule, this, this.dataLabel, datalabelGroup, element, redraw);\n      if (accumulation.isReact) {\n        accumulation.renderReactTemplates(dataLabelCallBack);\n      }\n      appendChildElement(false, getElement(accumulation.element.id + '_Secondary_Element'), element, redraw);\n    }\n    appendChildElement(false, accumulation.getSeriesElement(), datalabelGroup, redraw);\n  };\n  /**\r\n   * To find maximum bounds for smart legend placing.\r\n   *\r\n   * @private\r\n   * @param {Rect} totalbound - The total bounding rect.\r\n   * @param {Rect} bound - The bounding rect to be compared.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.findMaxBounds = function (totalbound, bound) {\n    totalbound.x = bound.x < totalbound.x ? bound.x : totalbound.x;\n    totalbound.y = bound.y < totalbound.y ? bound.y : totalbound.y;\n    totalbound.height = bound.y + bound.height > totalbound.height ? bound.y + bound.height : totalbound.height;\n    totalbound.width = bound.x + bound.width > totalbound.width ? bound.x + bound.width : totalbound.width;\n  };\n  /**\r\n   * To set empty point value for null points.\r\n   *\r\n   * @private\r\n   * @param {AccPoints} point - The point to set as empty.\r\n   * @param {number} i - The index of the point in the data set.\r\n   * @param {Object} data - The data object.\r\n   * @returns {void}\r\n   */\n  AccumulationSeries.prototype.setAccEmptyPoint = function (point, i, data) {\n    if (!(isNullOrUndefined(point.y) || isNaN(point.y))) {\n      return null;\n    }\n    point.color = this.emptyPointSettings.fill || point.color;\n    switch (this.emptyPointSettings.mode) {\n      case 'Zero':\n        point.y = 0;\n        point.visible = true;\n        break;\n      case 'Average':\n        {\n          var previous = data[i - 1] ? data[i - 1][this.yName] || 0 : 0;\n          var next = data[i + 1] ? data[i + 1][this.yName] || 0 : 0;\n          point.y = (Math.abs(previous) + Math.abs(next)) / 2;\n          this.sumOfPoints += point.y;\n          point.visible = true;\n          break;\n        }\n      default:\n        point.visible = false;\n        break;\n    }\n  };\n  /**\r\n   * To find point is empty.\r\n   *\r\n   * @param {AccPoints} point - The point to check.\r\n   * @returns {boolean} - True if the point is empty, otherwise false.\r\n   */\n  AccumulationSeries.prototype.isEmpty = function (point) {\n    return point.color === this.emptyPointSettings.fill;\n  };\n  __decorate([Property('')], AccumulationSeries.prototype, \"dataSource\", void 0);\n  __decorate([Property()], AccumulationSeries.prototype, \"query\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"xName\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"name\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"tooltipMappingName\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"yName\", void 0);\n  __decorate([Property(true)], AccumulationSeries.prototype, \"visible\", void 0);\n  __decorate([Complex({\n    color: null,\n    width: 0\n  }, Border)], AccumulationSeries.prototype, \"border\", void 0);\n  __decorate([Complex(null, Animation)], AccumulationSeries.prototype, \"animation\", void 0);\n  __decorate([Property('SeriesType')], AccumulationSeries.prototype, \"legendShape\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"legendImageUrl\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"pointColorMapping\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"selectionStyle\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"groupTo\", void 0);\n  __decorate([Property('Value')], AccumulationSeries.prototype, \"groupMode\", void 0);\n  __decorate([Complex({}, AccumulationDataLabelSettings)], AccumulationSeries.prototype, \"dataLabel\", void 0);\n  __decorate([Property([])], AccumulationSeries.prototype, \"palettes\", void 0);\n  __decorate([Property(0)], AccumulationSeries.prototype, \"startAngle\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"endAngle\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"radius\", void 0);\n  __decorate([Property('0')], AccumulationSeries.prototype, \"innerRadius\", void 0);\n  __decorate([Property('Pie')], AccumulationSeries.prototype, \"type\", void 0);\n  __decorate([Property(true)], AccumulationSeries.prototype, \"enableTooltip\", void 0);\n  __decorate([Property(false)], AccumulationSeries.prototype, \"explode\", void 0);\n  __decorate([Property('30%')], AccumulationSeries.prototype, \"explodeOffset\", void 0);\n  __decorate([Property(false)], AccumulationSeries.prototype, \"explodeAll\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"explodeIndex\", void 0);\n  __decorate([Complex({\n    mode: 'Drop'\n  }, EmptyPointSettings)], AccumulationSeries.prototype, \"emptyPointSettings\", void 0);\n  __decorate([Property(0)], AccumulationSeries.prototype, \"gapRatio\", void 0);\n  __decorate([Property('80%')], AccumulationSeries.prototype, \"width\", void 0);\n  __decorate([Property('80%')], AccumulationSeries.prototype, \"height\", void 0);\n  __decorate([Property('20%')], AccumulationSeries.prototype, \"neckWidth\", void 0);\n  __decorate([Property('20%')], AccumulationSeries.prototype, \"neckHeight\", void 0);\n  __decorate([Property('Linear')], AccumulationSeries.prototype, \"pyramidMode\", void 0);\n  __decorate([Property(1)], AccumulationSeries.prototype, \"opacity\", void 0);\n  __decorate([Property('0')], AccumulationSeries.prototype, \"dashArray\", void 0);\n  return AccumulationSeries;\n}(ChildProperty);\nexport { AccumulationSeries };\n/**\r\n * method to get series from index.\r\n *\r\n * @private\r\n * @param {number} index - The index of the series to retrieve.\r\n * @param {AccumulationSeries[]} visibleSeries - The array of visible series in the chart.\r\n * @returns {AccumulationSeries} - The series retrieved from the specified index.\r\n */\nexport function getSeriesFromIndex(index, visibleSeries) {\n  for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n    var series = visibleSeries_1[_i];\n    if (index === series.index) {\n      return series;\n    }\n  }\n  return visibleSeries[0];\n}\n/**\r\n * method to get point from index.\r\n *\r\n * @private\r\n * @param {number} index - The index of the point to retrieve.\r\n * @param {AccPoints[]} points - The array of points in the data set.\r\n * @returns {AccPoints} - The point retrieved from the specified index.\r\n */\nexport function pointByIndex(index, points) {\n  for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n    var point = points_1[_i];\n    if (point.index === index) {\n      return point;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","ChildProperty","Complex","createElement","Browser","animationMode","isNullOrUndefined","getValue","DataManager","Border","Font","Animation","EmptyPointSettings","Connector","Rect","PathOption","stringToNumber","appendChildElement","seriesRender","pointRender","getSeriesColor","getElement","firstToLowerCase","AccumulationAnnotationSettings","_super","apply","AccumulationDataLabelSettings","width","color","fontFamily","size","fontStyle","fontWeight","PieCenter","AccPoints","visible","symbolLocation","region","labelRegion","labelVisible","regions","isExplode","isClubbed","isSliced","argsData","isLabelUpdated","initialLabelRegion","AccumulationSeries","_this","points","clubbedPoints","sumOfPoints","isRectSeries","clipRect","category","rightSidePoints","leftSidePoints","refreshDataManager","accumulation","render","radius","isDevice","dataLabel","position","dateSource","dataSource","query","dataManagerSuccess","result","count","dataManager","dataModule","getData","generateQuery","requiresCount","then","e","name","series","data","allowServerDataBinding","trigger","resultData","isBlazor","getPoints","seriesCounts","visibleSeries","window","refreshChart","keys","findSumOfPoints","sumOfClub","point","colors","palettes","theme","clubValue","groupTo","setPoints","isClub","y","pushPoints","index","push","lastGroupTo","clubPoint_1","generateClubPoint","pointsLength_1","map","explode","type","explodeAll","explodeIndex","splice","concat","clubPoint","x","text","originalText","sliceRadius","groupMode","Math","abs","yName","isNaN","xName","percentage","toFixed","legendImageUrl","pointColorMapping","tooltip","tooltipMappingName","separatorY","intl","formatNumber","useGrouping","useGroupingSeparator","setAccEmptyPoint","renderSeries","redraw","seriesGroup","element","id","renderer","createGroup","renderPoints","datalabelGroup","accumulationDataLabelModule","style","visibility","animation","enable","animateSeries","renderDataLabel","findMaxBounds","labelBound","accumulationBound","pieSeriesModule","accumulationLegendModule","explodeDistance","height","pointId","option","_i","_a","cancel","fill","border","isEmpty","emptyPointSettings","opacity","dashArray","renderPoint","getSeriesElement","findAreaRect","firstQuarter","secondQuarter","showZero","mode","midAngle","sort","a","drawDataLabels","template","childElementCount","dataLabelCallBack","bind","isReact","renderReactTemplates","totalbound","bound","previous","next","getSeriesFromIndex","visibleSeries_1","pointByIndex","points_1"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/model/acc-base.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n/**\r\n * AccumulationChart base file\r\n */\r\nimport { Property, ChildProperty, Complex, createElement, Browser, animationMode } from '@syncfusion/ej2-base';\r\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\r\nimport { DataManager } from '@syncfusion/ej2-data';\r\nimport { Border, Font, Animation, EmptyPointSettings, Connector } from '../../common/model/base';\r\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\r\nimport { stringToNumber, appendChildElement } from '../../common/utils/helper';\r\nimport { seriesRender, pointRender } from '../../common/model/constants';\r\nimport { getSeriesColor } from '../../common/model/theme';\r\nimport { getElement, firstToLowerCase } from '../../common/utils/helper';\r\n/**\r\n * Annotation settings for accumulation series.\r\n */\r\nvar AccumulationAnnotationSettings = /** @class */ (function (_super) {\r\n    __extends(AccumulationAnnotationSettings, _super);\r\n    function AccumulationAnnotationSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationAnnotationSettings.prototype, \"content\", void 0);\r\n    __decorate([\r\n        Property('0')\r\n    ], AccumulationAnnotationSettings.prototype, \"x\", void 0);\r\n    __decorate([\r\n        Property('0')\r\n    ], AccumulationAnnotationSettings.prototype, \"y\", void 0);\r\n    __decorate([\r\n        Property('Pixel')\r\n    ], AccumulationAnnotationSettings.prototype, \"coordinateUnits\", void 0);\r\n    __decorate([\r\n        Property('Chart')\r\n    ], AccumulationAnnotationSettings.prototype, \"region\", void 0);\r\n    __decorate([\r\n        Property('Middle')\r\n    ], AccumulationAnnotationSettings.prototype, \"verticalAlignment\", void 0);\r\n    __decorate([\r\n        Property('Center')\r\n    ], AccumulationAnnotationSettings.prototype, \"horizontalAlignment\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationAnnotationSettings.prototype, \"description\", void 0);\r\n    return AccumulationAnnotationSettings;\r\n}(ChildProperty));\r\nexport { AccumulationAnnotationSettings };\r\n/**\r\n * Configures the dataLabel in accumulation chart.\r\n */\r\nvar AccumulationDataLabelSettings = /** @class */ (function (_super) {\r\n    __extends(AccumulationDataLabelSettings, _super);\r\n    function AccumulationDataLabelSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property(false)\r\n    ], AccumulationDataLabelSettings.prototype, \"visible\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], AccumulationDataLabelSettings.prototype, \"showZero\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationDataLabelSettings.prototype, \"name\", void 0);\r\n    __decorate([\r\n        Property('transparent')\r\n    ], AccumulationDataLabelSettings.prototype, \"fill\", void 0);\r\n    __decorate([\r\n        Property('Inside')\r\n    ], AccumulationDataLabelSettings.prototype, \"position\", void 0);\r\n    __decorate([\r\n        Property(5)\r\n    ], AccumulationDataLabelSettings.prototype, \"rx\", void 0);\r\n    __decorate([\r\n        Property(5)\r\n    ], AccumulationDataLabelSettings.prototype, \"ry\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], AccumulationDataLabelSettings.prototype, \"angle\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], AccumulationDataLabelSettings.prototype, \"enableRotation\", void 0);\r\n    __decorate([\r\n        Complex({ width: null, color: null }, Border)\r\n    ], AccumulationDataLabelSettings.prototype, \"border\", void 0);\r\n    __decorate([\r\n        Complex({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, Font)\r\n    ], AccumulationDataLabelSettings.prototype, \"font\", void 0);\r\n    __decorate([\r\n        Complex({}, Connector)\r\n    ], AccumulationDataLabelSettings.prototype, \"connectorStyle\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationDataLabelSettings.prototype, \"template\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationDataLabelSettings.prototype, \"format\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationDataLabelSettings.prototype, \"maxWidth\", void 0);\r\n    __decorate([\r\n        Property('Ellipsis')\r\n    ], AccumulationDataLabelSettings.prototype, \"textOverflow\", void 0);\r\n    __decorate([\r\n        Property('Normal')\r\n    ], AccumulationDataLabelSettings.prototype, \"textWrap\", void 0);\r\n    return AccumulationDataLabelSettings;\r\n}(ChildProperty));\r\nexport { AccumulationDataLabelSettings };\r\n/**\r\n * Center value of the Pie series.\r\n */\r\nvar PieCenter = /** @class */ (function (_super) {\r\n    __extends(PieCenter, _super);\r\n    function PieCenter() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property('50%')\r\n    ], PieCenter.prototype, \"x\", void 0);\r\n    __decorate([\r\n        Property('50%')\r\n    ], PieCenter.prototype, \"y\", void 0);\r\n    return PieCenter;\r\n}(ChildProperty));\r\nexport { PieCenter };\r\n/**\r\n * Points model for the series.\r\n *\r\n * @public\r\n */\r\nvar AccPoints = /** @class */ (function () {\r\n    function AccPoints() {\r\n        /** Accumulation point visibility. */\r\n        this.visible = true;\r\n        /** Accumulation point symbol location. */\r\n        this.symbolLocation = null;\r\n        /** @private */\r\n        this.region = null;\r\n        /** @private */\r\n        this.labelRegion = null;\r\n        /** @private */\r\n        this.labelVisible = true;\r\n        this.regions = null;\r\n        /** @private */\r\n        this.isExplode = false;\r\n        /** @private */\r\n        this.isClubbed = false;\r\n        /** @private */\r\n        this.isSliced = false;\r\n        /** @private  */\r\n        this.argsData = null;\r\n        /** @private */\r\n        this.isLabelUpdated = null;\r\n        /** @private */\r\n        this.initialLabelRegion = null;\r\n    }\r\n    return AccPoints;\r\n}());\r\nexport { AccPoints };\r\n/**\r\n *  Configures the series in accumulation chart.\r\n */\r\nvar AccumulationSeries = /** @class */ (function (_super) {\r\n    __extends(AccumulationSeries, _super);\r\n    function AccumulationSeries() {\r\n        /**\r\n         * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager.\r\n         * ```html\r\n         * <div id='Pie'></div>\r\n         * ```\r\n         * ```typescript\r\n         * let dataManager: DataManager = new DataManager({\r\n         *         url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'\r\n         * });\r\n         * let query: Query = new Query().take(50).where('Estimate', 'greaterThan', 0, false);\r\n         * let pie: AccumulationChart = new AccumulationChart({\r\n         * ...\r\n         *     series: [{\r\n         *        dataSource: dataManager,\r\n         *        xName: 'Id',\r\n         *        yName: 'Estimate',\r\n         *        query: query\r\n         *    }],\r\n         * ...\r\n         * });\r\n         * pie.appendTo('#Pie');\r\n         * ```\r\n         *\r\n         * @default ''\r\n         */\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /** @private */\r\n        _this.points = [];\r\n        /** @private */\r\n        _this.clubbedPoints = [];\r\n        /** @private */\r\n        _this.sumOfPoints = 0;\r\n        /** @private */\r\n        _this.isRectSeries = true;\r\n        /** @private */\r\n        _this.clipRect = new Rect(0, 0, 0, 0);\r\n        /** @private */\r\n        _this.category = 'Series';\r\n        /** @private */\r\n        _this.rightSidePoints = [];\r\n        /** @private */\r\n        _this.leftSidePoints = [];\r\n        return _this;\r\n    }\r\n    /**\r\n     * To refresh the Datamanager for series.\r\n     *\r\n     * @private\r\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n     * @param {boolean} render - Specifies whether to render the accumulation chart after refreshing the DataManager.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.refreshDataManager = function (accumulation, render) {\r\n        var _this = this;\r\n        this.radius = this.radius ? this.radius : (Browser.isDevice && this.dataLabel.position === 'Outside') ? '40%' : '80%';\r\n        var dateSource = this.dataSource || accumulation.dataSource;\r\n        if (!(dateSource instanceof DataManager) && isNullOrUndefined(this.query)) {\r\n            this.dataManagerSuccess({ result: dateSource, count: dateSource.length }, accumulation, render);\r\n            return;\r\n        }\r\n        var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\r\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e, accumulation); });\r\n    };\r\n    /**\r\n     * To get points on dataManager is success.\r\n     *\r\n     * @private\r\n     * @param {Object} e - The data manager result object.\r\n     * @param {Object} e.result - The result of the data manager process.\r\n     * @param {number} e.count - The count of items in the result.\r\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n     * @param {boolean} render - Specifies whether to render the accumulation chart after retrieving the points.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.dataManagerSuccess = function (e, accumulation, render) {\r\n        if (render === void 0) { render = true; }\r\n        var argsData = {\r\n            name: seriesRender, series: this, data: e.result\r\n        };\r\n        accumulation.allowServerDataBinding = false;\r\n        accumulation.trigger(seriesRender, argsData);\r\n        this.resultData = e.result !== '' ? e.result : [];\r\n        if (!accumulation.isBlazor && !render) {\r\n            this.getPoints(this.resultData, accumulation); // To update datasource using onPropertyChanged method. incident id: 290690\r\n        }\r\n        if ((++accumulation.seriesCounts === accumulation.visibleSeries.length && render)\r\n            || (window['Blazor'] && !render && accumulation.seriesCounts === 1)) {\r\n            this.getPoints(this.resultData, accumulation);\r\n            accumulation.refreshChart();\r\n        }\r\n    };\r\n    /**\r\n     * To find points from result data.\r\n     *\r\n     * @private\r\n     * @param {Object} result - The result of the process.\r\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.getPoints = function (result, accumulation) {\r\n        var length = Object.keys(result).length;\r\n        this.sumOfPoints = 0;\r\n        if (length === 0) {\r\n            // fix for Pie datalabels are not removed for empty datasource\r\n            this.points = [];\r\n            return null;\r\n        }\r\n        this.findSumOfPoints(result);\r\n        this.points = [];\r\n        this.clubbedPoints = [];\r\n        this.sumOfClub = 0;\r\n        var point;\r\n        var colors = this.palettes.length ? this.palettes : getSeriesColor(accumulation.theme);\r\n        var clubValue = stringToNumber(this.groupTo, this.sumOfPoints);\r\n        for (var i = 0; i < length; i++) {\r\n            point = this.setPoints(result, i, colors, accumulation);\r\n            if (!this.isClub(point, clubValue, i)) {\r\n                if (isNullOrUndefined(point.y)) {\r\n                    point.visible = false;\r\n                }\r\n                this.pushPoints(point, colors);\r\n            }\r\n            else {\r\n                point.index = this.clubbedPoints.length;\r\n                point.isExplode = true;\r\n                this.clubbedPoints.push(point);\r\n                point.isSliced = true;\r\n            }\r\n        }\r\n        this.lastGroupTo = this.groupTo;\r\n        if (this.sumOfClub > 0) {\r\n            var clubPoint_1 = this.generateClubPoint();\r\n            this.pushPoints(clubPoint_1, colors);\r\n            var pointsLength_1 = this.points.length - 1;\r\n            this.clubbedPoints.map(function (point) {\r\n                point.index += pointsLength_1;\r\n                point.color = clubPoint_1.color;\r\n            });\r\n        }\r\n        if (this.clubbedPoints.length && this.explode && this.type === 'Pie'\r\n            && (this.explodeAll || this.points[this.points.length - 1].index === this.explodeIndex)) {\r\n            this.points.splice(this.points.length - 1, 1);\r\n            this.points = this.points.concat(this.clubbedPoints);\r\n        }\r\n    };\r\n    AccumulationSeries.prototype.generateClubPoint = function () {\r\n        var clubPoint = new AccPoints();\r\n        clubPoint.isClubbed = true;\r\n        clubPoint.x = 'Others';\r\n        clubPoint.y = this.sumOfClub;\r\n        clubPoint.text = clubPoint.originalText = clubPoint.x + ': ' + this.sumOfClub;\r\n        clubPoint.sliceRadius = '80%';\r\n        return clubPoint;\r\n    };\r\n    /**\r\n     * Method to set point index and color.\r\n     *\r\n     * @param {AccPoints} point - The point data.\r\n     * @param {string[]} colors - The array of colors used in the accumulation chart.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.pushPoints = function (point, colors) {\r\n        point.index = this.points.length;\r\n        point.isExplode = this.explodeAll || (point.index === this.explodeIndex);\r\n        point.color = point.color || colors[point.index % colors.length];\r\n        this.points.push(point);\r\n    };\r\n    /**\r\n     * Method to find club point.\r\n     *\r\n     * @param {AccPoints} point - The point data.\r\n     * @param {number} clubValue - The club value for accumulation chart.\r\n     * @param {number} index - The index of the point in the data set.\r\n     * @returns {boolean} - false\r\n     */\r\n    AccumulationSeries.prototype.isClub = function (point, clubValue, index) {\r\n        if (!isNullOrUndefined(clubValue)) {\r\n            if (this.groupMode === 'Value' && Math.abs(point.y) <= clubValue) {\r\n                this.sumOfClub += Math.abs(point.y);\r\n                return true;\r\n            }\r\n            else if (this.groupMode === 'Point' && index >= clubValue) {\r\n                this.sumOfClub += Math.abs(point.y);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Method to find sum of points in the series.\r\n     *\r\n     * @param {Object} result - The result of the process.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.findSumOfPoints = function (result) {\r\n        var length = Object.keys(result).length;\r\n        for (var i = 0; i < length; i++) {\r\n            if (!isNullOrUndefined(result[i]) && !isNullOrUndefined(result[i][this.yName])\r\n                && !isNaN(result[i][this.yName])) {\r\n                this.sumOfPoints += Math.abs(result[i][this.yName]);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Method to set points x, y and text from data source.\r\n     *\r\n     * @param {Object} data - The data containing information for the points.\r\n     * @param {number} i - The index of the current point in the data set.\r\n     * @param {string[]} colors - The array of colors used in the accumulation chart.\r\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\r\n     * @returns {AccPoints} - The point data retrieved from the specified index.\r\n     */\r\n    AccumulationSeries.prototype.setPoints = function (data, i, colors, accumulation) {\r\n        var point = new AccPoints();\r\n        point.x = getValue(this.xName, data[i]);\r\n        point.y = getValue(this.yName, data[i]);\r\n        point.percentage = (+(point.y / this.sumOfPoints * 100).toFixed(2));\r\n        point.legendImageUrl = getValue(this.legendImageUrl, data[i]);\r\n        point.color = getValue(this.pointColorMapping, data[i]);\r\n        point.text = point.originalText = getValue(this.dataLabel.name || '', data[i]);\r\n        point.tooltip = getValue(this.tooltipMappingName || '', data[i]);\r\n        point.sliceRadius = getValue(this.radius, data[i]);\r\n        point.sliceRadius = isNullOrUndefined(point.sliceRadius) ? '80%' : point.sliceRadius;\r\n        point.separatorY = accumulation.intl.formatNumber(point.y, { useGrouping: accumulation.useGroupingSeparator });\r\n        this.setAccEmptyPoint(point, i, data);\r\n        return point;\r\n    };\r\n    /**\r\n     * Method render the series elements for accumulation chart.\r\n     *\r\n     * @private\r\n     * @param {AccumulationChart} accumulation - The AccumulationChart control.\r\n     * @param {boolean} redraw - Specifies whether to redraw the points.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.renderSeries = function (accumulation, redraw) {\r\n        var seriesGroup = redraw ? getElement(accumulation.element.id + '_Series_' + this.index) :\r\n            accumulation.renderer.createGroup({ id: accumulation.element.id + '_Series_' + this.index });\r\n        this.renderPoints(accumulation, seriesGroup, redraw);\r\n        var datalabelGroup;\r\n        if (accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\r\n            datalabelGroup = accumulation.renderer.createGroup({ id: accumulation.element.id + '_datalabel_Series_' + this.index });\r\n            datalabelGroup.style.visibility =\r\n                (((this.animation.enable && animationMode !== 'Disable') || animationMode === 'Enable') && accumulation.animateSeries && this.type === 'Pie') ? 'hidden' : 'visible';\r\n            this.renderDataLabel(accumulation, datalabelGroup, redraw);\r\n        }\r\n        if (this.type === 'Pie') {\r\n            this.findMaxBounds(this.labelBound, this.accumulationBound);\r\n            accumulation.pieSeriesModule.animateSeries(accumulation, this.animation, this, seriesGroup);\r\n        }\r\n        if (accumulation.accumulationLegendModule) {\r\n            this.labelBound.x -= accumulation.explodeDistance;\r\n            this.labelBound.y -= accumulation.explodeDistance;\r\n            this.labelBound.height += (accumulation.explodeDistance - this.labelBound.y);\r\n            this.labelBound.width += (accumulation.explodeDistance - this.labelBound.x);\r\n        }\r\n    };\r\n    /**\r\n     * Method render the points elements for accumulation chart series.\r\n     *\r\n     * @param {AccumulationChart} accumulation - The AccumulationChart control.\r\n     * @param {Element} seriesGroup - The group element to contain the point elements.\r\n     * @param {boolean} redraw - Specifies whether to redraw the points.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.renderPoints = function (accumulation, seriesGroup, redraw) {\r\n        var pointId = accumulation.element.id + '_Series_' + this.index + '_Point_';\r\n        var option;\r\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\r\n            var point = _a[_i];\r\n            var argsData = {\r\n                cancel: false, name: pointRender, series: this, point: point, fill: point.color,\r\n                border: this.isEmpty(point) ? { width: this.emptyPointSettings.border.width, color: this.emptyPointSettings.border.color } :\r\n                    { width: this.border.width, color: this.border.color }\r\n            };\r\n            accumulation.trigger(pointRender, argsData);\r\n            point.color = argsData.fill;\r\n            option = new PathOption(pointId + point.index, point.color, argsData.border.width || 1, argsData.border.color || point.color, this.opacity, argsData.series.dashArray, '');\r\n            accumulation[(firstToLowerCase(this.type) + 'SeriesModule')].\r\n                renderPoint(point, this, accumulation, option, seriesGroup, redraw);\r\n        }\r\n        appendChildElement(false, accumulation.getSeriesElement(), seriesGroup, redraw);\r\n    };\r\n    /**\r\n     * Method render the datalabel elements for accumulation chart.\r\n     *\r\n     * @param {AccumulationChart} accumulation - The AccumulationChart control.\r\n     * @param {Element} datalabelGroup - The group element to contain the data label elements.\r\n     * @param {boolean} redraw - Specifies whether to redraw the data labels.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.renderDataLabel = function (accumulation, datalabelGroup, redraw) {\r\n        accumulation.accumulationDataLabelModule.findAreaRect();\r\n        var element = createElement('div', {\r\n            id: accumulation.element.id + '_Series_0' + '_DataLabelCollections'\r\n        });\r\n        this.leftSidePoints = [];\r\n        this.rightSidePoints = [];\r\n        var firstQuarter = [];\r\n        var secondQuarter = [];\r\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\r\n            var point = _a[_i];\r\n            if (point.visible) {\r\n                if (this.dataLabel.showZero || (!this.dataLabel.showZero && ((point.y !== 0) || (point.y === 0 &&\r\n                    this.emptyPointSettings.mode === 'Zero')))) {\r\n                    accumulation.accumulationDataLabelModule.renderDataLabel(point, this.dataLabel, datalabelGroup, this.points, this.index, element, redraw);\r\n                }\r\n            }\r\n            if (point.midAngle >= 90 && point.midAngle <= 270) {\r\n                this.leftSidePoints.push(point);\r\n            }\r\n            else {\r\n                if (point.midAngle >= 0 && point.midAngle <= 90) {\r\n                    secondQuarter.push(point);\r\n                }\r\n                else {\r\n                    firstQuarter.push(point);\r\n                }\r\n            }\r\n        }\r\n        firstQuarter.sort(function (a, b) { return a.midAngle - b.midAngle; });\r\n        secondQuarter.sort(function (a, b) { return a.midAngle - b.midAngle; });\r\n        this.leftSidePoints.sort(function (a, b) { return a.midAngle - b.midAngle; });\r\n        this.rightSidePoints = firstQuarter.concat(secondQuarter);\r\n        accumulation.accumulationDataLabelModule.drawDataLabels(this, this.dataLabel, datalabelGroup, element, redraw);\r\n        if (this.dataLabel.template !== null && element.childElementCount) {\r\n            var dataLabelCallBack = accumulation.accumulationDataLabelModule.drawDataLabels.bind(accumulation.accumulationDataLabelModule, this, this.dataLabel, datalabelGroup, element, redraw);\r\n            if (accumulation.isReact) {\r\n                accumulation.renderReactTemplates(dataLabelCallBack);\r\n            }\r\n            appendChildElement(false, getElement(accumulation.element.id + '_Secondary_Element'), element, redraw);\r\n        }\r\n        appendChildElement(false, accumulation.getSeriesElement(), datalabelGroup, redraw);\r\n    };\r\n    /**\r\n     * To find maximum bounds for smart legend placing.\r\n     *\r\n     * @private\r\n     * @param {Rect} totalbound - The total bounding rect.\r\n     * @param {Rect} bound - The bounding rect to be compared.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.findMaxBounds = function (totalbound, bound) {\r\n        totalbound.x = bound.x < totalbound.x ? bound.x : totalbound.x;\r\n        totalbound.y = bound.y < totalbound.y ? bound.y : totalbound.y;\r\n        totalbound.height = (bound.y + bound.height) > totalbound.height ? (bound.y + bound.height) : totalbound.height;\r\n        totalbound.width = (bound.x + bound.width) > totalbound.width ? (bound.x + bound.width) : totalbound.width;\r\n    };\r\n    /**\r\n     * To set empty point value for null points.\r\n     *\r\n     * @private\r\n     * @param {AccPoints} point - The point to set as empty.\r\n     * @param {number} i - The index of the point in the data set.\r\n     * @param {Object} data - The data object.\r\n     * @returns {void}\r\n     */\r\n    AccumulationSeries.prototype.setAccEmptyPoint = function (point, i, data) {\r\n        if (!(isNullOrUndefined(point.y) || isNaN(point.y))) {\r\n            return null;\r\n        }\r\n        point.color = this.emptyPointSettings.fill || point.color;\r\n        switch (this.emptyPointSettings.mode) {\r\n            case 'Zero':\r\n                point.y = 0;\r\n                point.visible = true;\r\n                break;\r\n            case 'Average': {\r\n                var previous = data[i - 1] ? (data[i - 1][this.yName] || 0) : 0;\r\n                var next = data[i + 1] ? (data[i + 1][this.yName] || 0) : 0;\r\n                point.y = (Math.abs(previous) + Math.abs(next)) / 2;\r\n                this.sumOfPoints += point.y;\r\n                point.visible = true;\r\n                break;\r\n            }\r\n            default:\r\n                point.visible = false;\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * To find point is empty.\r\n     *\r\n     * @param {AccPoints} point - The point to check.\r\n     * @returns {boolean} - True if the point is empty, otherwise false.\r\n     */\r\n    AccumulationSeries.prototype.isEmpty = function (point) {\r\n        return point.color === this.emptyPointSettings.fill;\r\n    };\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationSeries.prototype, \"dataSource\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], AccumulationSeries.prototype, \"query\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationSeries.prototype, \"xName\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationSeries.prototype, \"name\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationSeries.prototype, \"tooltipMappingName\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationSeries.prototype, \"yName\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], AccumulationSeries.prototype, \"visible\", void 0);\r\n    __decorate([\r\n        Complex({ color: null, width: 0 }, Border)\r\n    ], AccumulationSeries.prototype, \"border\", void 0);\r\n    __decorate([\r\n        Complex(null, Animation)\r\n    ], AccumulationSeries.prototype, \"animation\", void 0);\r\n    __decorate([\r\n        Property('SeriesType')\r\n    ], AccumulationSeries.prototype, \"legendShape\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationSeries.prototype, \"legendImageUrl\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], AccumulationSeries.prototype, \"pointColorMapping\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationSeries.prototype, \"selectionStyle\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationSeries.prototype, \"groupTo\", void 0);\r\n    __decorate([\r\n        Property('Value')\r\n    ], AccumulationSeries.prototype, \"groupMode\", void 0);\r\n    __decorate([\r\n        Complex({}, AccumulationDataLabelSettings)\r\n    ], AccumulationSeries.prototype, \"dataLabel\", void 0);\r\n    __decorate([\r\n        Property([])\r\n    ], AccumulationSeries.prototype, \"palettes\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], AccumulationSeries.prototype, \"startAngle\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationSeries.prototype, \"endAngle\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationSeries.prototype, \"radius\", void 0);\r\n    __decorate([\r\n        Property('0')\r\n    ], AccumulationSeries.prototype, \"innerRadius\", void 0);\r\n    __decorate([\r\n        Property('Pie')\r\n    ], AccumulationSeries.prototype, \"type\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], AccumulationSeries.prototype, \"enableTooltip\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], AccumulationSeries.prototype, \"explode\", void 0);\r\n    __decorate([\r\n        Property('30%')\r\n    ], AccumulationSeries.prototype, \"explodeOffset\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], AccumulationSeries.prototype, \"explodeAll\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], AccumulationSeries.prototype, \"explodeIndex\", void 0);\r\n    __decorate([\r\n        Complex({ mode: 'Drop' }, EmptyPointSettings)\r\n    ], AccumulationSeries.prototype, \"emptyPointSettings\", void 0);\r\n    __decorate([\r\n        Property(0)\r\n    ], AccumulationSeries.prototype, \"gapRatio\", void 0);\r\n    __decorate([\r\n        Property('80%')\r\n    ], AccumulationSeries.prototype, \"width\", void 0);\r\n    __decorate([\r\n        Property('80%')\r\n    ], AccumulationSeries.prototype, \"height\", void 0);\r\n    __decorate([\r\n        Property('20%')\r\n    ], AccumulationSeries.prototype, \"neckWidth\", void 0);\r\n    __decorate([\r\n        Property('20%')\r\n    ], AccumulationSeries.prototype, \"neckHeight\", void 0);\r\n    __decorate([\r\n        Property('Linear')\r\n    ], AccumulationSeries.prototype, \"pyramidMode\", void 0);\r\n    __decorate([\r\n        Property(1)\r\n    ], AccumulationSeries.prototype, \"opacity\", void 0);\r\n    __decorate([\r\n        Property('0')\r\n    ], AccumulationSeries.prototype, \"dashArray\", void 0);\r\n    return AccumulationSeries;\r\n}(ChildProperty));\r\nexport { AccumulationSeries };\r\n/**\r\n * method to get series from index.\r\n *\r\n * @private\r\n * @param {number} index - The index of the series to retrieve.\r\n * @param {AccumulationSeries[]} visibleSeries - The array of visible series in the chart.\r\n * @returns {AccumulationSeries} - The series retrieved from the specified index.\r\n */\r\nexport function getSeriesFromIndex(index, visibleSeries) {\r\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\r\n        var series = visibleSeries_1[_i];\r\n        if (index === series.index) {\r\n            return series;\r\n        }\r\n    }\r\n    return visibleSeries[0];\r\n}\r\n/**\r\n * method to get point from index.\r\n *\r\n * @private\r\n * @param {number} index - The index of the point to retrieve.\r\n * @param {AccPoints[]} points - The array of points in the data set.\r\n * @returns {AccPoints} - The point retrieved from the specified index.\r\n */\r\nexport function pointByIndex(index, points) {\r\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\r\n        var point = points_1[_i];\r\n        if (point.index === index) {\r\n            return point;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}