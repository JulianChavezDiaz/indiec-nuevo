{"ast":null,"code":"/**\r\n * PdfPageSettings.ts class for EJ2-PDF\r\n */\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\nimport { PdfPageSize } from './pdf-page-size';\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\nimport { PdfMargins } from './../graphics/pdf-margins';\n/**\r\n * The class provides various `setting` related with PDF pages.\r\n */\nvar PdfPageSettings = /** @class */function () {\n  function PdfPageSettings(margins) {\n    //Fields\n    /**\r\n     * The page `margins`.\r\n     * @private\r\n     */\n    this.pageMargins = new PdfMargins();\n    /**\r\n     * The page `size`.\r\n     * @default a4\r\n     * @private\r\n     */\n    this.pageSize = PdfPageSize.a4;\n    /**\r\n     * The page `rotation angle`.\r\n     * @default PdfPageRotateAngle.RotateAngle0\r\n     * @private\r\n     */\n    this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n    /**\r\n     * The page `orientation`.\r\n     * @default PdfPageOrientation.Portrait\r\n     * @private\r\n     */\n    this.pageOrientation = PdfPageOrientation.Portrait;\n    /**\r\n     * The page `origin`.\r\n     * @default 0,0\r\n     * @private\r\n     */\n    this.pageOrigin = new PointF(0, 0);\n    /**\r\n     * Checks the Whether the `rotation` is applied or not.\r\n     * @default false\r\n     * @private\r\n     */\n    this.isRotation = false;\n    if (typeof margins === 'number') {\n      this.pageMargins.setMargins(margins);\n    }\n  }\n  Object.defineProperty(PdfPageSettings.prototype, \"size\", {\n    //Properties\n    /**\r\n     * Gets or sets the `size` of the page.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pageSize;\n    },\n    set: function (value) {\n      this.setSize(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\n    /**\r\n     * Gets or sets the page `orientation`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pageOrientation;\n    },\n    set: function (orientation) {\n      if (this.pageOrientation !== orientation) {\n        this.pageOrientation = orientation;\n        this.updateSize(orientation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\n    /**\r\n     * Gets or sets the `margins` of the page.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pageMargins;\n    },\n    set: function (value) {\n      this.pageMargins = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"width\", {\n    /**\r\n     * Gets or sets the `width` of the page.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pageSize.width;\n    },\n    set: function (value) {\n      this.pageSize.width = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"height\", {\n    /**\r\n     * Gets or sets the `height` of the page.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pageSize.height;\n    },\n    set: function (value) {\n      this.pageSize.height = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\n    /**\r\n     * Gets or sets the `origin` of the page.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pageOrigin;\n    },\n    set: function (value) {\n      this.pageOrigin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\n    /**\r\n     * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\r\n     * @private\r\n     */\n    get: function () {\n      return this.rotateAngle;\n    },\n    set: function (value) {\n      this.rotateAngle = value;\n      this.isRotation = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Methods\n  /**\r\n   * `Update page size` depending on orientation.\r\n   * @private\r\n   */\n  PdfPageSettings.prototype.updateSize = function (orientation) {\n    var min = Math.min(this.pageSize.width, this.pageSize.height);\n    var max = Math.max(this.pageSize.width, this.pageSize.height);\n    switch (orientation) {\n      case PdfPageOrientation.Portrait:\n        this.pageSize = new SizeF(min, max);\n        break;\n      case PdfPageOrientation.Landscape:\n        this.pageSize = new SizeF(max, min);\n        break;\n    }\n  };\n  /**\r\n   * Creates a `clone` of the object.\r\n   * @private\r\n   */\n  PdfPageSettings.prototype.clone = function () {\n    var settings = this;\n    settings.pageMargins = this.pageMargins.clone();\n    // if (GetTransition() != null)\n    // {\n    //     settings.Transition = (PdfPageTransition)Transition.clone();\n    // }\n    return settings;\n  };\n  /**\r\n   * Returns `size`, shrinked by the margins.\r\n   * @private\r\n   */\n  PdfPageSettings.prototype.getActualSize = function () {\n    var width = this.width - (this.margins.left + this.margins.right);\n    var height = this.height - (this.margins.top + this.margins.bottom);\n    var size = new SizeF(width, height);\n    return size;\n  };\n  /**\r\n   * Sets `size` to the page aaccording to the orientation.\r\n   * @private\r\n   */\n  PdfPageSettings.prototype.setSize = function (size) {\n    var min = Math.min(size.width, size.height);\n    var max = Math.max(size.width, size.height);\n    if (this.orientation === PdfPageOrientation.Portrait) {\n      this.pageSize = new SizeF(min, max);\n    } else {\n      this.pageSize = new SizeF(max, min);\n    }\n  };\n  return PdfPageSettings;\n}();\nexport { PdfPageSettings };","map":{"version":3,"names":["SizeF","PointF","PdfPageSize","PdfPageRotateAngle","PdfPageOrientation","PdfMargins","PdfPageSettings","margins","pageMargins","pageSize","a4","rotateAngle","RotateAngle0","pageOrientation","Portrait","pageOrigin","isRotation","setMargins","Object","defineProperty","prototype","get","set","value","setSize","enumerable","configurable","orientation","updateSize","width","height","min","Math","max","Landscape","clone","settings","getActualSize","left","right","top","bottom","size"],"sources":["C:/Users/wiliam/Desktop/indiec-nuevo/fronted-vue/node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-settings.js"],"sourcesContent":["/**\r\n * PdfPageSettings.ts class for EJ2-PDF\r\n */\r\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\r\nimport { PdfPageSize } from './pdf-page-size';\r\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\r\nimport { PdfMargins } from './../graphics/pdf-margins';\r\n/**\r\n * The class provides various `setting` related with PDF pages.\r\n */\r\nvar PdfPageSettings = /** @class */ (function () {\r\n    function PdfPageSettings(margins) {\r\n        //Fields\r\n        /**\r\n         * The page `margins`.\r\n         * @private\r\n         */\r\n        this.pageMargins = new PdfMargins();\r\n        /**\r\n         * The page `size`.\r\n         * @default a4\r\n         * @private\r\n         */\r\n        this.pageSize = PdfPageSize.a4;\r\n        /**\r\n         * The page `rotation angle`.\r\n         * @default PdfPageRotateAngle.RotateAngle0\r\n         * @private\r\n         */\r\n        this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\r\n        /**\r\n         * The page `orientation`.\r\n         * @default PdfPageOrientation.Portrait\r\n         * @private\r\n         */\r\n        this.pageOrientation = PdfPageOrientation.Portrait;\r\n        /**\r\n         * The page `origin`.\r\n         * @default 0,0\r\n         * @private\r\n         */\r\n        this.pageOrigin = new PointF(0, 0);\r\n        /**\r\n         * Checks the Whether the `rotation` is applied or not.\r\n         * @default false\r\n         * @private\r\n         */\r\n        this.isRotation = false;\r\n        if (typeof margins === 'number') {\r\n            this.pageMargins.setMargins(margins);\r\n        }\r\n    }\r\n    Object.defineProperty(PdfPageSettings.prototype, \"size\", {\r\n        //Properties\r\n        /**\r\n         * Gets or sets the `size` of the page.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pageSize;\r\n        },\r\n        set: function (value) {\r\n            this.setSize(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\r\n        /**\r\n         * Gets or sets the page `orientation`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pageOrientation;\r\n        },\r\n        set: function (orientation) {\r\n            if (this.pageOrientation !== orientation) {\r\n                this.pageOrientation = orientation;\r\n                this.updateSize(orientation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\r\n        /**\r\n         * Gets or sets the `margins` of the page.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pageMargins;\r\n        },\r\n        set: function (value) {\r\n            this.pageMargins = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPageSettings.prototype, \"width\", {\r\n        /**\r\n         * Gets or sets the `width` of the page.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pageSize.width;\r\n        },\r\n        set: function (value) {\r\n            this.pageSize.width = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPageSettings.prototype, \"height\", {\r\n        /**\r\n         * Gets or sets the `height` of the page.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pageSize.height;\r\n        },\r\n        set: function (value) {\r\n            this.pageSize.height = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\r\n        /**\r\n         * Gets or sets the `origin` of the page.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pageOrigin;\r\n        },\r\n        set: function (value) {\r\n            this.pageOrigin = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\r\n        /**\r\n         * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.rotateAngle;\r\n        },\r\n        set: function (value) {\r\n            this.rotateAngle = value;\r\n            this.isRotation = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Methods\r\n    /**\r\n     * `Update page size` depending on orientation.\r\n     * @private\r\n     */\r\n    PdfPageSettings.prototype.updateSize = function (orientation) {\r\n        var min = Math.min(this.pageSize.width, this.pageSize.height);\r\n        var max = Math.max(this.pageSize.width, this.pageSize.height);\r\n        switch (orientation) {\r\n            case PdfPageOrientation.Portrait:\r\n                this.pageSize = new SizeF(min, max);\r\n                break;\r\n            case PdfPageOrientation.Landscape:\r\n                this.pageSize = new SizeF(max, min);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Creates a `clone` of the object.\r\n     * @private\r\n     */\r\n    PdfPageSettings.prototype.clone = function () {\r\n        var settings = this;\r\n        settings.pageMargins = this.pageMargins.clone();\r\n        // if (GetTransition() != null)\r\n        // {\r\n        //     settings.Transition = (PdfPageTransition)Transition.clone();\r\n        // }\r\n        return settings;\r\n    };\r\n    /**\r\n     * Returns `size`, shrinked by the margins.\r\n     * @private\r\n     */\r\n    PdfPageSettings.prototype.getActualSize = function () {\r\n        var width = this.width - (this.margins.left + this.margins.right);\r\n        var height = this.height - (this.margins.top + this.margins.bottom);\r\n        var size = new SizeF(width, height);\r\n        return size;\r\n    };\r\n    /**\r\n     * Sets `size` to the page aaccording to the orientation.\r\n     * @private\r\n     */\r\n    PdfPageSettings.prototype.setSize = function (size) {\r\n        var min = Math.min(size.width, size.height);\r\n        var max = Math.max(size.width, size.height);\r\n        if (this.orientation === PdfPageOrientation.Portrait) {\r\n            this.pageSize = new SizeF(min, max);\r\n        }\r\n        else {\r\n            this.pageSize = new SizeF(max, min);\r\n        }\r\n    };\r\n    return PdfPageSettings;\r\n}());\r\nexport { PdfPageSettings };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}